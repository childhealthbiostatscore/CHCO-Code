---
title: "CALICO Health Disparities Analyses"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    fig-width: 12
    fig-height: 9
    page-layout: full
    theme:
      light: flatly
      dark: darkly
editor: source
---

```{r setup}
#| include: false
library(Hmisc)
library(tidyverse)
library(arsenal)
library(glmnet)
library(naniar)
home_dir <- switch(Sys.info()["sysname"],
  "Darwin" = "/Users/timvigers/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Vigers/BDC/Janet Snell-Bergeon/CALICO",
  "Windows" = "C:/Users/timvigers/OneDrive - The University of Colorado Denver/Vigers/BDC/Janet Snell-Bergeon/CALICO",
  "Linux" = "/home/timvigers/OneDrive/Vigers/BDC/Janet Snell-Bergeon/CALICO"
)
knitr::opts_knit$set(root.dir = home_dir)
```

```{r data import and cleaning}
#| include: false
# Load data
load("./Data_Clean/analysis_data.RData")
# Select columns, remove "Other" and "Military" insurance,
# combine races
df <- df %>%
  filter(!insur_type %in% c("Military", "Other {insur_other}"))
df$combined_race[df$combined_race == "Pacific Islander"] <- "Other"
df$combined_race[df$combined_race == "American Indian or Alaska Native"] <-
  "Other"
df$combined_race <- droplevels(df$combined_race)
# Basic formula for tables
f <- as.formula(paste("~", paste(ses_vars, collapse = "+")))
# Set table options
mycontrols <-
  tableby.control(numeric.stats = c("Nmiss2", "meansd", "medianq1q3", "range"))
# First visit only
cv1 <- df %>%
  group_by(record_number) %>%
  slice_min(redcap_repeat_instance) %>%
  ungroup()
```

# At time of diagnosis/first clinic visit

## Overall

```{r results='asis'}
t1 <- tableby(f, data = cv1, control = mycontrols)
summary(t1, labelTranslations = labels(df), pfootnote = T)
```

## By insurance type

```{r results='asis'}
t2 <- tableby(update(f, insur_type ~ .), data = cv1, control = mycontrols)
summary(t2, labelTranslations = labels(df), pfootnote = T)
```

## By race

```{r results='asis'}
t3 <- tableby(update(f, combined_race ~ .), data = cv1, control = mycontrols)
summary(t3, labelTranslations = labels(df), pfootnote = T)
```

## By ethnicity

```{r results='asis'}
t4 <- tableby(update(f, ethnicity ~ .), data = cv1, control = mycontrols)
summary(t4, labelTranslations = labels(df), pfootnote = T)
```

## By specialty

```{r results='asis'}
t5 <- tableby(update(f, pcosdx_specialty ~ .), data = cv1, control = mycontrols)
summary(t5, labelTranslations = labels(df), pfootnote = T)
```

# Treatments 2 years post-Dx

```{r}
# Treatments used after diagnosis - limit to two years
post_dx_tx <- df %>%
  filter(cv_monthssincepcosdx <= 24) %>%
  group_by(record_number) %>%
  summarise(
    insur_type = insur_type[1], combined_race = combined_race[1],
    ethnicity = ethnicity[1], pcosdx_specialty = pcosdx_specialty[1],
    across(
      contains("cv_medications"), ~ ifelse(any(. == "Checked"), "Yes", "No")
    )
  )
labs <- label(df)[match(colnames(post_dx_tx), colnames(df))]
labs <- sub(
  "Current treatment \\(not prescribed this visit\\)",
  "Treatment post-Dx", labs
)
label(post_dx_tx) <- as.list(labs)
colnames(post_dx_tx)[2:ncol(post_dx_tx)] <-
  paste0(colnames(post_dx_tx)[2:ncol(post_dx_tx)], "_post_dx")
# New basic formula
f <- as.formula(paste("~", paste(c(
  paste0("cv_medications___", 1:30, "_post_dx"),
  "cv_medications___60_post_dx",
  "cv_medications___0_post_dx", "cv_medications___unk_post_dx"
), collapse = "+")))
```

## Overall

```{r results='asis'}
t6 <- tableby(f, data = post_dx_tx, control = mycontrols)
summary(t6, labelTranslations = labels(df), pfootnote = T)
```

## By insurance type

```{r results='asis'}
t7 <- tableby(update(f, insur_type_post_dx ~ .),
  data = post_dx_tx, control = mycontrols
)
summary(t7, labelTranslations = labels(df), pfootnote = T)
```

## By race

```{r results='asis'}
t8 <- tableby(update(f, combined_race_post_dx ~ .),
  data = post_dx_tx, control = mycontrols
)
summary(t8, labelTranslations = labels(df), pfootnote = T)
```

## By ethnicity

```{r results='asis'}
t9 <- tableby(update(f, ethnicity_post_dx ~ .),
  data = post_dx_tx, control = mycontrols
)
summary(t9, labelTranslations = labels(df), pfootnote = T)
```

## By specialty

```{r results='asis'}
t10 <- tableby(update(f, pcosdx_specialty_post_dx ~ .),
  data = post_dx_tx, control = mycontrols
)
summary(t10, labelTranslations = labels(df), pfootnote = T)
```

# Model selection

```{r}
# Basic model dataframe
xvars <- c(
  "combined_race", "ethnicity", "pcosdx_birthweight_calc",
  "pcosdx_famhx_parent___22", "pcosdx_famhx_parent___14", "pcosdx_famhx___27",
  "pcosdx_famhx___28", "pcosdx_famhx___22", "pcosdx_famhx___14",
  "pcosdx_famhx___60", "cv_bmi_percentile", "cv_tg",
  "cv_ast", "cv_alt", "pcosdx_pmh___6",
  "cv_acneother___1", "cv_acneother___2"
)
mod_df <- df %>%
  group_by(record_number) %>%
  slice_min(redcap_repeat_instance) %>%
  select(
    record_number, pcosdx_age, cv_tt_perc, cv_hirsutism_cat, cv_acneface,
    all_of(xvars), contains("cv_medications___")
  )
# Plot missing
vis_miss(as.data.frame(mod_df))
gg_miss_var(as.data.frame(mod_df), show_pct = T)
# Basic formula
f <- as.formula(paste0("~", paste0(xvars, collapse = "+")))
# Set seed
set.seed(1017)
```

Models were selected using 5 fold cross-validation to determine the optimal $\lambda$ value for LASSO regression. Coefficients not selected by the lasso are indicated with a "."

## Age at diagnosis

```{r}
#| warning: false
# X and Y matrices (from basic linear model)
X <- lm(update(f, pcosdx_age ~ .), mod_df)
X <- data.frame(X$model)
Y <- X$pcosdx_age
X$pcosdx_age <- NULL
# CV
cv <- cv.glmnet(data.matrix(X), Y, nfolds = 5)
# Coefficients
c <- rownames(coef(cv, s = "lambda.min"))[which(coef(cv, s = "lambda.min") != 0)]
c <- c[-which(c == "(Intercept)")]
if (length(c) == 0) {
  print("No variables selected.")
} else {
  m <- lm(as.formula(paste0("pcosdx_age ~ ", paste0(c, collapse = "+"))), mod_df)
  m %>% gtsummary::tbl_regression()
}
```

## Testosterone percent of normal

```{r}
#| warning: false
# X and Y matrices (from basic linear model)
X <- lm(update(f, cv_tt_perc ~ .), mod_df)
X <- data.frame(X$model)
Y <- X$cv_tt_perc
X$cv_tt_perc <- NULL
# CV
cv <- cv.glmnet(data.matrix(X), Y, nfolds = 5)
# Coefficients
c <- rownames(coef(cv, s = "lambda.min"))[which(coef(cv, s = "lambda.min") != 0)]
c <- c[-which(c == "(Intercept)")]
if (length(c) == 0) {
  print("No variables selected.")
} else {
  m <- lm(as.formula(paste0("cv_tt_perc ~ ", paste0(c, collapse = "+"))), mod_df)
  m %>% gtsummary::tbl_regression()
}
```

## Prediabetes

```{r}
#| warning: false
# X and Y matrices (from basic linear model)
X <- glm(update(f, pcosdx_pmh___6 ~ . - pcosdx_pmh___6), mod_df,
  family = "binomial"
)
X <- data.frame(X$model)
Y <- X$pcosdx_pmh___6
X$pcosdx_pmh___6 <- NULL
# CV
cv <- cv.glmnet(data.matrix(X), Y, nfolds = 5, family = "binomial")
# Coefficients
c <- rownames(coef(cv, s = "lambda.min"))[which(coef(cv, s = "lambda.min") != 0)]
c <- c[-which(c == "(Intercept)")]
if (length(c) == 0) {
  print("No variables selected.")
} else {
  m <- glm(as.formula(paste0("pcosdx_pmh___6 ~ ", paste0(c, collapse = "+"))), mod_df, family = "binomial")
  m %>% gtsummary::tbl_regression()
}
```

## Hirsutism

```{r}
#| warning: false
levels(mod_df$cv_hirsutism_cat) <- c("No", "Yes", "Yes", "Yes", "Yes")
# X and Y matrices (from basic linear model)
X <- glm(update(f, cv_hirsutism_cat ~ .), mod_df, family = "binomial")
X <- data.frame(X$model)
Y <- X$cv_hirsutism_cat
X$cv_hirsutism_cat <- NULL
# CV
cv <- cv.glmnet(data.matrix(X), Y, nfolds = 5, family = "binomial")
# Coefficients
c <- rownames(coef(cv, s = "lambda.min"))[which(coef(cv, s = "lambda.min") != 0)]
c <- c[-which(c == "(Intercept)")]
if (length(c) == 0) {
  print("No variables selected.")
} else {
  m <- glm(as.formula(paste0("cv_hirsutism_cat ~ ", paste0(c, collapse = "+"))), mod_df, family = "binomial")
  m %>% gtsummary::tbl_regression()
}
```

## Acne status

Impossible to fit this model because everyone with complete data had acne. 

```{r}
#| warning: false
#| eval: false
levels(mod_df$cv_acneface) <- c("Yes", "Yes", "Yes", "No", "Yes")
# X and Y matrices (from basic linear model)
X <- glm(update(f, cv_acneface ~ .), mod_df, family = "binomial")
X <- data.frame(X$model)
Y <- X$cv_acneface
X$cv_acneface <- NULL
# CV
cv <- cv.glmnet(data.matrix(X), Y, nfolds = 5, family = "binomial")
# Coefficients
c <- rownames(coef(cv, s = "lambda.min"))[which(coef(cv, s = "lambda.min") != 0)]
c <- c[-which(c == "(Intercept)")]
if (length(c) == 0) {
  print("No variables selected.")
} else {
  m <- glm(as.formula(paste0("cv_hirsutism_cat ~ ", paste0(c, collapse = "+"))), mod_df, family = "binomial")
  m %>% gtsummary::tbl_regression()
}
```

## Treatment at baseline

```{r results='asis'}
#| warning: false
treats <- colnames(mod_df)[grep("cv_medications___", colnames(mod_df))]
invisible(lapply(treats, function(t) {
  cat("\n")
  cat("\n")
  cat("###", as.character(label(mod_df[, t])))
  cat("\n")
  cat("\n")
  # X and Y matrices (from basic linear model)
  X <- glm(update(f, paste(t, "~ .")), mod_df, family = "binomial")
  X <- data.frame(X$model)
  Y <- X[, t]
  X[, t] <- NULL
  if (sum(Y == "Checked") >= 5) {
    # CV
    cv <- cv.glmnet(data.matrix(X), Y, nfolds = 5, family = "binomial")
    # Coefficients
    c <- rownames(coef(cv, s = "lambda.min"))[which(coef(cv, s = "lambda.min") != 0)]
    c <- c[-which(c == "(Intercept)")]
    if (length(c) == 0) {
      print("No variables selected.")
    } else {
      m <- glm(as.formula(paste0("cv_hirsutism_cat ~ ", paste0(c, collapse = "+"))), mod_df, family = "binomial")
      m %>%
        gtsummary::tbl_regression() %>%
        print()
    }
  } else {
    cat(
      "Unable to perform model selection due to lack of variability in outcome."
    )
  }
  cat("\n")
  cat("\n")
}))
```
