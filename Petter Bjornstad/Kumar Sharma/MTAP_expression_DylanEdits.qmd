---
title: "MTAP expression"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, message = F, warning=F}
#| include: false
library(scran)
library(future)
library(future.apply)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(arsenal)
library(Biobase)
library(msigdbr)
library(kableExtra)
library(knitr)
library(REDCapR)
library(data.table)
library(emmeans)
library(NMF)
library(pheatmap)
library(UpSetR)
library(enrichR)
library(WriteXLS)
library(SAVER)
library(readxl)
library(limma)
library(edgeR)
library(BiocGenerics)
library(GSEABase)
library(slingshot)
library(SingleCellExperiment)
library(MAST)
library(muscat)
library(scater)
library(Seurat)
library(jsonlite)
library(dplyr)
library(glmmTMB)
library(reshape2)
library(broom.mixed)
library(nebula)
library(table1)
library(clusterProfiler)
library('org.Hs.eg.db')

```

```{r include = F}
reticulate::use_python("/mmfs1/gscratch/scrubbed/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")
```

```{r echo = F, include=F}
# read PB90 Seurat file for CROCODILE
temp_file <- tempfile(fileext = ".rds")
s3$download_file("scrna", "Kidney transcriptomics/Single cell RNA seq/PB_90_RPCAFix_Metadata_LR_RM_kpmpV1labelled.rds", temp_file)
so <- readRDS(temp_file)

so <- readRDS("C:/Users/netio/OneDrive - UW/Laura Pyle's files - Biostatistics Core Shared Drive/scRNA/data_raw/PB_90_RPCAFix_Metadata_LR_RM_kpmpV1labelled.rds")

#Check the number of Mitochondrial genes to start
sum(grepl("^MT-", rownames(so))) 

# Identify mitochondrial genes (human: start with "MT-")
mito_genes <- grep("^MT-", rownames(so), value = TRUE)
so <- subset(so, features = setdiff(rownames(so), mito_genes))

#Check the number of Mitochondrial genes after filtering to ensure filtering step was successful
sum(grepl("^MT-", rownames(so))) #Should be 0


#Ribosomal genes
# Identify ribosomal genes
ribo_genes <- c(
  "RPL22", "RPL11", "RPS8", "RPL5", "RPS27", "RPS7", "RPS27A", "RPL31", "RPL37A", "RPL32", "RPL15", "RPL14", "RPL29",
  "RPL24", "RPL22L1", "RPL35A", "RPL9", "RPL34", "RPS3A", "RPL37", "RPS23", "RPS14", "RPS18", "RPS10", "RPL10A", 
  "RPS20", "RPL7", "RPL30", "RPL8", "RPS6", "RPL35", "RPL12", "RPL7A", "RPS24", "RPLP2", "RPL27A", "RPS13", "RPS3",
  "RPS25", "RPS26", "RPL41", "RPL6", "RPLP0", "RPL21", "RPS29", "RPL4", "RPLP1", "RPS17", "RPS2", "RPS15A", "RPL13",
  "RPL26", "RPL23A", "RPL23", "RPL19", "RPL27", "RPL38", "RPL17", "RPS15", "RPL36", "RPS28", "RPL18A", "RPS16", 
  "RPS19", "RPL18", "RPL13A", "RPS11", "RPS9", "RPL28", "RPS5", "RPS21", "RPL3", "RPS4X", "RPL36A", "RPL39", 
  "RPL10", "RPS4Y1")

so<- subset(so, features = setdiff(rownames(so), ribo_genes))
# sum(grepl("^MT-", rownames(so_kpmp_sc))) #0
length(which(rownames(so) %in% ribo_genes)) #0
ncol(so) #211,218 cells
nrow(so) #31,242 genes

so <- subset(so, 
                      subset = nFeature_RNA > 500 & nFeature_RNA < 5000 & percent.mt < 10)


counts_layer <- round(GetAssayData(so, layer = 'counts'))
library_size <- Matrix::colSums(round(GetAssayData(so, layer = 'counts')))
so$library_size <- library_size
sce <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = counts_layer))
sce <- computeSumFactors(sce)
# View size factors
sizeFactors(sce)
## Calculate offset â†’ (size factors)
so$pooled_offset <- (sizeFactors(sce))


so_t1d_hc <- subset(so, group %in% c("Type_1_Diabetes","Lean_Control"))

#Filter to only CROCODILE
so_t1d_hc <- subset(so_t1d_hc, cohort == 'CROCODILE')

#expr_matrix <- as.matrix(GetAssayData(so_t1d_hc, layer = "counts"))
#expr_matrix <- as.matrix(GetAssayData(so_t1d_hc, assay = "RNA", layer = "counts"))
# expr_matrix <- so_kpmp_sc@assays$RNA@counts
# Calculate the proportion of cells expressing each gene
#num_cells_per_gene <- rowSums(expr_matrix > 0)  # Count nonzero cells per gene
#total_cells <- ncol(expr_matrix)  # Total number of cells
#gene_proportion <- num_cells_per_gene / total_cells  # Fraction of cells expressing each gene
#remove(expr_matrix)
# Keep genes expressed in at least "gene_pct" of cells
#genes_to_keep <- names(gene_proportion[gene_proportion >= 0.05])
#so_t1d_hc<- subset(so_t1d_hc, features = genes_to_keep)

meta.data <- so_t1d_hc@meta.data



test <- meta.data %>% dplyr::select(record_id, cohort, group, visit, age, sex)

harmonized_data <- read.csv("C:/Users/netio/OneDrive - UW/Laura Pyle's files - Biostatistics Core Shared Drive/Data Harmonization/Data Clean/harmonized_dataset.csv", na = '')
dat <- harmonized_data %>%
     arrange(screen_date) %>% 
     dplyr::summarise(across(where(negate(is.numeric)), ~ ifelse(all(is.na(.x)), NA_character_, first(na.omit(.x)))),
                      across(where(is.numeric), ~ ifelse(all(is.na(.x)), NA_real_, first(na.omit(.x)))),
                      .by = c(record_id, visit))

dat <- dat %>% dplyr::select(record_id, mrn, bmi, sex, age)
test <- test %>% left_join(dat, by='record_id')
test <- test %>% filter(!duplicated(record_id))
test <- test %>% dplyr::select(record_id, cohort, group, 
                               age = age.y, sex = sex.y, bmi)
table1(~age + sex + bmi + cohort | group, data = test)



jpeg('C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_KPMP_celltype.jpeg', width=900, 
     height=900)
DimPlot(so_t1d_hc, reduction = "umap.harmony", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_celltype.jpeg", width=900, 
     height=900)
DimPlot(so_t1d_hc, reduction = "umap.harmony", group.by = "celltype_harmony", raster = F, alpha = 0.2, label = T)
dev.off()

```

# HC vs. T1D in PB90

## All cell types combined

```{r echo = F}

cgas <- data.table::fread("C:/Users/netio/Documents/UofW/cGAS_Analysis/cGAS_genes_AmiGO2.txt",
                          header=F)
cgas[2] <- 'TMEM173'


meta.data <- so_t1d_hc@meta.data


rm(so)
save.image('C:/Users/netio/Documents/UofW/cGAS_Analysis/cGWAS_sot1d_hc_data.RData')


jpeg('C:/Users/netio/Documents/UofW/cGAS_Analysis/CellDistributions.jpeg', height= 1500, width = 1200)
ggplot(meta.data %>% filter(celltype_rpca != 'ATL'), aes(x=group, fill=celltype_harmony))+
  geom_bar(position='fill')+theme_classic()+labs(x='Condition Group', fill='Cell Type')+
  theme(text = element_text(size=25))
dev.off()

jpeg('C:/Users/netio/Documents/UofW/cGAS_Analysis/CellDistributions_EC.jpeg', height= 1500, width = 1200)
ggplot(meta.data %>% filter(celltype_rpca != 'ATL') %>% filter(celltype_harmony %in% c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM")), aes(x=group, fill=celltype_harmony))+
  geom_bar(position='fill')+theme_classic()+labs(x='Condition Group', fill='Cell Type')+
  theme(text = element_text(size=25))
dev.off()






jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_Full_T1D_LC.jpeg", width=900, 
     height=900)
DimPlot(so_t1d_hc, reduction = "umap.harmony", group.by = "celltype_harmony", raster = F, alpha = 0.2, label = T)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_MTAP.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc, reduction = "umap.harmony", features = "MTAP", raster = F)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_NOS3.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc, reduction = "umap.harmony", features = "NOS3", raster = F)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_NOS2.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc, reduction = "umap.harmony", features = "NOS2", raster = F)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_NOS1.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc, reduction = "umap.harmony", features = "NOS1", raster = F)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_cGWAS_STING.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc, reduction = "umap.harmony", features = unique(c(cgas$V1, 'TMEM173')), raster = F)
dev.off()


```
### Pseudoreplication (Treating each cell independently)
```{r echo = F}
FindMarkers(so_t1d_hc, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = "MTAP")

FindMarkers(so_t1d_hc, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = "NOS3")

FindMarkers(so_t1d_hc, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = cgas$V1)





```

### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}

counts_t1d_hc <- round(GetAssayData(so_t1d_hc, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary
 
write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_MTAP_analysis_nooffset.txt', row.names=F,
            quote=F, sep='\t')


counts_t1d_hc <- round(GetAssayData(so_t1d_hc, layer = "counts")) # load counts and round
counts_t1d_hc_nos3 <- counts_t1d_hc["NOS3",]
meta_gene <- subset(so_t1d_hc, features = "NOS3")@meta.data
pred_gene <- model.matrix(~group, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_nos3, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary

write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_NOS3_analysis_nooffset.txt', row.names=F,
            quote=F, sep='\t')




counts_t1d_hc <- round(GetAssayData(so_t1d_hc, layer = "counts")) # load counts and round
counts_t1d_hc_cgas <- counts_t1d_hc[cgas$V1,]
meta_gene <- subset(so_t1d_hc, features = cgas$V1)@meta.data
pred_gene <- model.matrix(~group, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_cgas, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary


write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_CGAS_analysis_nooffset.txt', row.names=F,
            quote=F, sep='\t')


rm(list=c(counts_t1d_hc_nos3, counts_t1d_hc_cgas, counts_t1d_hc_mtap))


##NEBULA with Offsets 


#with offset


full_analysis <- FindVariableFeatures(so_t1d_hc, selection.method = "vst", nfeatures = 2000)
hvgs <- VariableFeatures(full_analysis)
full_analysis <- subset(so_t1d_hc, features = hvgs)
full_counts <- round(GetAssayData(full_analysis, layer = "counts")) 


meta_gene <- full_analysis@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = full_analysis, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = full_counts, id = full_analysis$record_id, pred = data_g_gene$pred, 
                          offset = full_analysis$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary

write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_fullanalysis_offset.txt', row.names=F,
            quote=F, sep='\t')


plotting_function(as.data.frame(result_allcells), 'Top2000HVGs')

sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes, pvalue = summary.p_groupType_1_Diabetes) %>% filter(pvalue < 0.05)

enrich_GO_BP <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "BP") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_CC <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "CC") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_MF <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "MF") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)

sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes.sexMale, pvalue = summary.p_groupType_1_Diabetes.sexMale) %>% filter(pvalue < 0.05)



#just testing which is compared to which 
meta.data <- so_t1d_hc@meta.data
meta.data <- meta.data %>% dplyr::mutate(group2 = ifelse(group == 'Type_1_Diabetes', 1, 0))
so_t1d_hc@meta.data$group2 <- meta.data$group2


#Type 1 Diabetes as 1, controls as 0
counts_t1d_hc <- round(GetAssayData(so_t1d_hc, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group2*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, offset = so_t1d_hc$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary








counts_t1d_hc <- round(GetAssayData(so_t1d_hc, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, offset = so_t1d_hc$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary


write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_MTAP_analysis_offset.txt', row.names=F,
            quote=F, sep='\t')


counts_t1d_hc <- round(GetAssayData(so_t1d_hc, layer = "counts")) # load counts and round
counts_t1d_hc_nos3 <- counts_t1d_hc["NOS3",]
meta_gene <- subset(so_t1d_hc, features = "NOS3")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_nos3, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, offset = so_t1d_hc$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary

write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_NOS3_analysis_offset.txt', row.names=F,
            quote=F, sep='\t')

counts_t1d_hc <- round(GetAssayData(so_t1d_hc, layer = "counts")) # load counts and round
counts_t1d_hc_cgas <- counts_t1d_hc[cgas$V1,]
meta_gene <- subset(so_t1d_hc, features = cgas$V1)@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_cgas, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, offset = so_t1d_hc$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary

write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_cGAS_analysis_offset.txt', row.names=F,
            quote=F, sep='\t')

rm(list=c(counts_t1d_hc_nos3, counts_t1d_hc_cgas, counts_t1d_hc_mtap))




#Plotting top 2,000 genes expressions 

plotting_function <- function(sig_markers, file_name){
  sig_markers <- sig_markers %>% dplyr::select(gene = summary.gene,
                                        logfc_sex = summary.logFC_sexMale, 
                                        logfc_group = summary.logFC_groupType_1_Diabetes, 
                                        logfc_interaction = summary.logFC_groupType_1_Diabetes.sexMale, 
                                        p_sex = summary.p_sexMale,
                                        p_group = summary.p_groupType_1_Diabetes, 
                                        p_interaction = summary.p_groupType_1_Diabetes.sexMale)
  
  variable_names <- c('Sex Effects', 'Diagnosis Group Effects', 'Interaction Effects')
  
  
  for(i in c(1:3)){
    tmp_logfc <- i + 1
    tmp_p <- i + 4
    tmp_df <- sig_markers %>% dplyr::select(gene, tmp_logfc, tmp_p)
    tmp_label <- variable_names[i]
    names(tmp_df) <- c('Gene', 'LogFC', 'Pvalue')
    tmp_df <- tmp_df %>% filter(!is.na(Pvalue))
    tmp_df$diffexp <- 'No'
    tmp_df$diffexp[tmp_df$Pvalue < 0.05 & tmp_df$LogFC > 0] <- 'Up'
    tmp_df$diffexp[tmp_df$Pvalue < 0.05 & tmp_df$LogFC < 0] <- 'Down'
    tmp_df <- tmp_df %>% arrange(Pvalue)
    tmp_df$label <- NA
    tmp_df$label[1:10] <- tmp_df$Gene[1:10]
    
    list_to_remove <- tmp_df %>% filter(Pvalue > 0.05 & abs(LogFC) > 8)
    
    if(nrow(list_to_remove) > 0){
    tmp_df <- tmp_df %>% filter(!Gene %in% list_to_remove$Gene)
    }
    
#Making graph
    if(length(unique(tmp_df$diffexp)) > 1){
tmp_graph <- ggplot(tmp_df, aes(x= LogFC, y=-log10(Pvalue), col = diffexp, label=label))+
  geom_point()+
  geom_text(size=2, vjust = 2, color='black')+
  scale_color_manual(values = c('orange', 'grey', 'purple'),
                     labels = c('Downregulated', 'Not significant', 'Upregulated'))+
  geom_hline(yintercept = -log10(0.05), col='blue', linetype='dashed')+
  geom_vline(xintercept = c(0), col='black', linetype ='dashed')+
  theme_classic()+labs(x='LogFC', y='-log10 pvalue', col ='Differential Expression', 
                       title = paste0(tmp_label, ' in NEBULA Analysis'))
}else{
  tmp_graph <- ggplot(tmp_df, aes(x= LogFC, y=-log10(Pvalue), col = diffexp, label=label))+
  geom_point()+
  geom_text(size=2, vjust = 2, color='black')+
  scale_color_manual(values = c('grey'),
                     labels = c('Not significant'))+
  geom_hline(yintercept = -log10(0.05), col='blue', linetype='dashed')+
      geom_vline(xintercept = c(0), col='black', linetype ='dashed')+
  theme_classic()+labs(x='LogFC', y='-log10 P-value', col ='Differential Expression', 
                       title = paste0(tmp_label, ' in NEBULA Analysis'))
  
}
    pdf(paste0('C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_VolcanoPlot_', file_name, '_', tmp_label, '.pdf'))
    print(tmp_graph)
    dev.off()
}
}


plotting_function(nebula_full, 'Top2000')










```

## EC
```{r echo = F}
so_t1d_hc$celltype_ec <- ifelse(so_t1d_hc$celltype_harmony %in% c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"),
                                     "EC", as.character(so_t1d_hc$celltype_harmony))
so_t1d_hc_ec <- subset(so_t1d_hc, celltype_ec == "EC")

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_EC_MTAP.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc_ec, reduction = "umap.harmony", features = "MTAP", raster = F)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_EC_NOS3.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc_ec, reduction = 'umap.harmony', features = 'NOS3', raster = F)
dev.off()

jpeg("C:/Users/netio/Documents/UofW/cGAS_Analysis/UMAP_EC_cGWAS_STING.jpeg", width=900, 
     height=900)
FeaturePlot(so_t1d_hc_ec, reduction = 'umap.harmony', features = cgas$V1)
dev.off()







```
### Pseudoreplication (Treating each cell independently)

```{r echo = F}
FindMarkers(so_t1d_hc_ec, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = "MTAP")

FindMarkers(so_t1d_hc_ec, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = "NOS3")

FindMarkers(so_t1d_hc_ec, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = cgas$V1)

```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}

counts_layer <- round(GetAssayData(so_t1d_hc_ec, layer = 'counts'))
library_size <- Matrix::colSums(counts_layer)
so_t1d_hc$library_size <- library_size


#EC Top 2,000 Analysis


full_analysis <- FindVariableFeatures(so_t1d_hc_ec, selection.method = "vst", nfeatures = 2000)
hvgs <- VariableFeatures(full_analysis)
full_analysis <- subset(so_t1d_hc_ec, features = hvgs)
full_counts <- round(GetAssayData(full_analysis, layer = "counts")) 


meta_gene <- full_analysis@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = full_analysis, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = full_counts, id = full_analysis$record_id, pred = data_g_gene$pred, 
                          offset = full_analysis$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary

write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_EC_fullanalysis_offset_withsex.txt', row.names=F,
            quote=F, sep='\t')



plotting_function(as.data.frame(result_allcells), 'EC_Top2000HVGs')

sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes, pvalue = summary.p_groupType_1_Diabetes) %>% filter(pvalue < 0.05)

enrich_GO_BP <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "BP") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_CC <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "CC") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_MF <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "MF") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)

sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes.sexMale, pvalue = summary.p_groupType_1_Diabetes.sexMale) %>% filter(pvalue < 0.05)



counts_t1d_hc <- round(GetAssayData(so_t1d_hc_ec, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc_ec, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_ec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_ec$pooled_offset,
                 reml = T, model = "NBLMM")

result_ec$summary

#NOS


counts_t1d_hc <- round(GetAssayData(so_t1d_hc_ec, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["NOS3",]
meta_gene <- subset(so_t1d_hc_ec, features = "NOS3")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_ec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_ec$pooled_offset,
                 reml = T, model = "NBLMM")

result_ec$summary

#cGAS-STING


counts_t1d_hc <- round(GetAssayData(so_t1d_hc_ec, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc[cgas$V1,]
meta_gene <- subset(so_t1d_hc_ec, features = cgas$V1)@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_ec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_ec$pooled_offset,
                 reml = T, model = "NBLMM")

result_ec$summary






##Baseline vs. Follow-up Analysis 






```

## POD
```{r echo = F}
so_t1d_hc$celltype_pod <- ifelse(so_t1d_hc$celltype_harmony %in% c("POD"),
                                     "pod", as.character(so_t1d_hc$celltype_harmony))
so_t1d_hc_pod <- subset(so_t1d_hc, celltype_pod == "pod")

full_analysis <- FindVariableFeatures(so_t1d_hc_pod, selection.method = "vst", nfeatures = 2000)
hvgs <- VariableFeatures(full_analysis)
full_analysis <- subset(so_t1d_hc_pod, features = hvgs)
full_counts <- round(GetAssayData(full_analysis, layer = "counts")) 


meta_gene <- full_analysis@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = full_analysis, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = full_counts, id = full_analysis$record_id, pred = data_g_gene$pred, 
                          offset = full_analysis$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary

write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_pod_fullanalysis_offset_withsex.txt', row.names=F,
            quote=F, sep='\t')


plotting_function(as.data.frame(result_allcells), 'POD__Top2000HVGs')


sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes, pvalue = summary.p_groupType_1_Diabetes) %>% filter(pvalue < 0.05)

enrich_GO_BP <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "BP") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_CC <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "CC") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_MF <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "MF") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)

sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes.sexMale, pvalue = summary.p_groupType_1_Diabetes.sexMale) %>% filter(pvalue < 0.05)



counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pod, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc_pod, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pod <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_pod$pooled_offset,
                 reml = T, model = "NBLMM")

result_pod$summary

#NOS

counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pod, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["NOS3",]
meta_gene <- subset(so_t1d_hc_pod, features = "NOS3")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pod <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_pod$pooled_offset,
                 reml = T, model = "NBLMM")

result_pod$summary

#cGAS-STING


counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pod, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc[cgas$V1,]
meta_gene <- subset(so_t1d_hc_pod, features = cgas$V1)@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pod <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_pod$pooled_offset,
                 reml = T, model = "NBLMM")

result_pod$summary

























```


#PEC

so_t1d_hc$celltype_pec <- ifelse(so_t1d_hc$celltype_harmony %in% c("PEC"),
                                     "pec", as.character(so_t1d_hc$celltype_harmony))
so_t1d_hc_pec <- subset(so_t1d_hc, celltype_pec == "pec")

full_analysis <- FindVariableFeatures(so_t1d_hc_pec, selection.method = "vst", nfeatures = 2000)
hvgs <- VariableFeatures(full_analysis)
full_analysis <- subset(so_t1d_hc_pec, features = hvgs)
full_counts <- round(GetAssayData(full_analysis, layer = "counts")) 


meta_gene <- full_analysis@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = full_analysis, id = meta_gene$record_id, pred = pred_gene)
result_allcells <- nebula(count = full_counts, id = full_analysis$record_id, pred = data_g_gene$pred, 
                          offset = full_analysis$pooled_offset,
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary

write.table(result_allcells, 'C:/Users/netio/Documents/UofW/cGAS_Analysis/NEBULA_pec_fullanalysis_offset_withsex.txt', row.names=F,
            quote=F, sep='\t')

plotting_function(as.data.frame(result_allcells), 'PEC_Top2000HVGs')


sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes, pvalue = summary.p_groupType_1_Diabetes) %>% filter(pvalue < 0.05)

enrich_GO_BP <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "BP") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_CC <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "CC") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)
enrich_GO_MF <- enrichGO(gene = sig_results$Gene, OrgDb = org.Hs.eg.db, keyType = "SYMBOL", ont = "MF") %>% as.data.frame() %>% select(Description, GeneRatio, p.adjust, Count) %>% 
  filter(p.adjust < 0.05)

sig_results <- as.data.frame(result_allcells) %>% dplyr::select(Gene = summary.gene, LogFC = summary.logFC_groupType_1_Diabetes.sexMale, pvalue = summary.p_groupType_1_Diabetes.sexMale) %>% filter(pvalue < 0.05)



counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pec, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc_pec, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_pec$pooled_offset,
                 reml = T, model = "NBLMM")

result_pec$summary

#NOS

counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pec, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["NOS3",]
meta_gene <- subset(so_t1d_hc_pec, features = "NOS3")@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_pec$pooled_offset,
                 reml = T, model = "NBLMM")

result_pec$summary

#cGAS-STING


counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pec, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc[cgas$V1,]
meta_gene <- subset(so_t1d_hc_pec, features = cgas$V1)@meta.data
pred_gene <- model.matrix(~group*sex, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T, offset = so_t1d_hc_pec$pooled_offset,
                 reml = T, model = "NBLMM")

result_pec$summary














##ATTEMPT PIO Analysis


attempt_so <- readRDS("C:/Users/netio/OneDrive - UW/Laura Pyle's files - Biostatistics Core Shared Drive/scRNA/data_raw/PB_attempt_harmony_rpca_RM_kpmpV1labelled_Sept2024.RDS")


meta.data <- attempt_so@meta.data





sum(grepl("^MT-", rownames(attempt_so))) 

# Identify mitochondrial genes (human: start with "MT-")
mito_genes <- grep("^MT-", rownames(attempt_so), value = TRUE)
attempt_so <- subset(attempt_so, features = setdiff(rownames(attempt_so), mito_genes))

#Check the number of Mitochondrial genes after filtering to ensure filtering step was successful
sum(grepl("^MT-", rownames(attempt_so))) #Should be 0


#Ribosomal genes
# Identify ribosomal genes
ribo_genes <- c(
  "RPL22", "RPL11", "RPS8", "RPL5", "RPS27", "RPS7", "RPS27A", "RPL31", "RPL37A", "RPL32", "RPL15", "RPL14", "RPL29",
  "RPL24", "RPL22L1", "RPL35A", "RPL9", "RPL34", "RPS3A", "RPL37", "RPS23", "RPS14", "RPS18", "RPS10", "RPL10A", 
  "RPS20", "RPL7", "RPL30", "RPL8", "RPS6", "RPL35", "RPL12", "RPL7A", "RPS24", "RPLP2", "RPL27A", "RPS13", "RPS3",
  "RPS25", "RPS26", "RPL41", "RPL6", "RPLP0", "RPL21", "RPS29", "RPL4", "RPLP1", "RPS17", "RPS2", "RPS15A", "RPL13",
  "RPL26", "RPL23A", "RPL23", "RPL19", "RPL27", "RPL38", "RPL17", "RPS15", "RPL36", "RPS28", "RPL18A", "RPS16", 
  "RPS19", "RPL18", "RPL13A", "RPS11", "RPS9", "RPL28", "RPS5", "RPS21", "RPL3", "RPS4X", "RPL36A", "RPL39", 
  "RPL10", "RPS4Y1")

attempt_so <- subset(attempt_so, features = setdiff(rownames(so), ribo_genes))
# sum(grepl("^MT-", rownames(so_kpmp_sc))) #0
length(which(rownames(attempt_so) %in% ribo_genes)) #0
ncol(attempt_so) #211,218 cells
nrow(attempt_so) #31,242 genes

attempt_so <- subset(attempt_so, 
                      subset = nFeature_RNA > 500 & nFeature_RNA < 5000 & percent.mt < 10)

#Make sure IDs are right







counts_layer <- round(GetAssayData(attempt_so, layer = 'counts'))
library_size <- Matrix::colSums(round(GetAssayData(attempt_so, layer = 'counts')))
attempt_so$library_size <- library_size
sce <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = counts_layer))
sce <- computeSumFactors(sce)
# View size factors
sizeFactors(sce)
## Calculate offset â†’ (size factors)
attempt_so$pooled_offset <- (sizeFactors(sce))






















### Pseudoreplication (Treating each cell independently)

















```{r echo = F}
FindMarkers(so_t1d_hc_pod, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = "MTAP")
```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}
counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pod, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc_pod, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pod <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_pod$summary
```

## PEC
```{r echo = F}
so_t1d_hc$celltype_pec <- ifelse(so_t1d_hc$celltype_harmony %in% c("PEC"),
                                     "PEC", as.character(so_t1d_hc$celltype_harmony))
so_t1d_hc_pec <- subset(so_t1d_hc, celltype_pec == "PEC")

FeaturePlot(so_t1d_hc_pec, reduction = "umap.harmony", features = "MTAP", raster = F)
```
### Pseudoreplication (Treating each cell independently)

```{r echo = F}
FindMarkers(so_t1d_hc_pec, ident.1 = "Type_1_Diabetes", ident.2 = "Lean_Control", group.by = "group", features = "MTAP")
```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}
counts_t1d_hc <- round(GetAssayData(so_t1d_hc_pec, layer = "counts")) # load counts and round
counts_t1d_hc_mtap <- counts_t1d_hc["MTAP",]
meta_gene <- subset(so_t1d_hc_pec, features = "MTAP")@meta.data
pred_gene <- model.matrix(~group, data = meta_gene)
data_g_gene <- list(count = counts_t1d_hc_mtap, id = meta_gene$record_id, pred = pred_gene)
result_pec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_pec$summary
```

## PT
```{r echo = F}
so_t1d_hc$celltype_pt <- ifelse(grepl("PT-", so_t1d_hc$celltype_harmony),
                                 "PT", as.character(so_t1d_hc$celltype_harmony))
so_t1d_hc_pt <- subset(so_t1d_hc, celltype_pt == "PT" & celltype_harmony != "PT_lowQuality")
FeaturePlot(so_t1d_hc_pt, reduction = "umap.harmony", features = "MTAP", raster = F)
```

# T1D (-) vs. T1D (+) in ATTEMPT

```{r echo = F}
temp_file <- tempfile(fileext = ".RDS")
s3$download_file("scrna", "Kidney transcriptomics/Single cell RNA seq/PB_attempt_harmony_rpca_RM_kpmpV1labelled_Sept2024.RDS", temp_file)
attempt_so <- readRDS(temp_file)

DimPlot(attempt_so, reduction = "umap.harmony", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
DimPlot(attempt_so, reduction = "umap.harmony", group.by = "celltype", raster = F, alpha = 0.2, label = T)

temp_file <- tempfile(fileext = ".RDS")
s3$download_file("harmonized.dataset", "attempt_clinical_data.RDS", temp_file)
attempt_dat <- readRDS(temp_file)

attempt_so_meta <- attempt_so@meta.data %>%
  mutate(subject_id = Subject.ID,
         visit = case_when(Visit == "BL" ~ "PRE", 
                           Visit == "4M" ~ "POST"))
attempt_so_meta <- left_join(attempt_so_meta, attempt_dat, by = c("subject_id", "visit"))
rownames(attempt_so_meta) <- attempt_so_meta$barcode
attempt_so <- AddMetaData(attempt_so, attempt_so_meta)

attempt_so$visit <- factor(attempt_so$visit, levels = c("PRE", "POST"))
attempt_so$treatment <- factor(attempt_so$treatment, levels = c("Placebo", "Dapagliflozin 5mg"),
                                  labels = c("Placebo", "Dapagliflozin"))

attempt_so_bl <- subset(attempt_so, visit == "PRE")
```

## All cell types combined

```{r echo = F}
FeaturePlot(attempt_so_bl, reduction = "umap.harmony", features = "MTAP", raster = F)
```
### Pseudoreplication (Treating each cell independently)

```{r echo = F}
FindMarkers(attempt_so_bl, ident.1 = "Dapagliflozin", ident.2 = "Placebo", group.by = "treatment", 
            features = "MTAP", logfc.threshold = 0)
```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}
counts_attempt_bl <- round(GetAssayData(attempt_so_bl, layer = "counts")) # load counts and round
counts_attempt_bl_mtap <- counts_attempt_bl["MTAP",]
meta_gene <- subset(attempt_so_bl, features = "MTAP")@meta.data
pred_gene <- model.matrix(~treatment, data = meta_gene)
data_g_gene <- list(count = counts_attempt_bl_mtap, id = meta_gene$subject_id, pred = pred_gene)
result_allcells <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_allcells$summary
```

## EC
```{r echo = F}
attempt_so_bl$celltype_ec <- ifelse(attempt_so_bl$celltype %in% c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"),
                                     "EC", as.character(attempt_so_bl$celltype))
attempt_so_bl_hc_ec <- subset(attempt_so_bl, celltype_ec == "EC")

FeaturePlot(attempt_so_bl_hc_ec, reduction = "umap.harmony", features = "MTAP", raster = F)
```
### Pseudoreplication (Treating each cell independently)

```{r echo = F}
FindMarkers(attempt_so_bl_hc_ec, ident.1 = "Dapagliflozin", ident.2 = "Placebo", group.by = "treatment", features = "MTAP", logfc.threshold = 0)
```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}
counts_attempt_bl <- round(GetAssayData(attempt_so_bl_hc_ec, layer = "counts")) # load counts and round
counts_attempt_bl_mtap <- counts_attempt_bl["MTAP", , drop = F]
meta_gene <- subset(attempt_so_bl_hc_ec, features = "MTAP")@meta.data
pred_gene <- model.matrix(~treatment, data = meta_gene)
data_g_gene <- list(count = counts_attempt_bl_mtap, id = meta_gene$subject, pred = pred_gene)
result_ec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")
result_ec$summary
```

## POD
```{r echo = F}
attempt_so_bl$celltype_pod <- ifelse(attempt_so_bl$celltype %in% c("POD"),
                                     "POD", as.character(attempt_so_bl$celltype))
attempt_so_bl_hc_pod <- subset(attempt_so_bl, celltype_pod == "POD")

FeaturePlot(attempt_so_bl_hc_pod, reduction = "umap.harmony", features = "MTAP", raster = F)
```
### Pseudoreplication (Treating each cell independently)

```{r echo = F}
FindMarkers(attempt_so_bl_hc_pod, ident.1 = "Dapagliflozin", ident.2 = "Placebo", group.by = "treatment", features = "MTAP", logfc.threshold = 0)
```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}
counts_attempt_bl <- round(GetAssayData(attempt_so_bl_hc_pod, layer = "counts")) # load counts and round
counts_attempt_bl_mtap <- counts_attempt_bl["MTAP",]
meta_gene <- subset(attempt_so_bl_hc_pod, features = "MTAP")@meta.data
pred_gene <- model.matrix(~treatment, data = meta_gene)
data_g_gene <- list(count = counts_attempt_bl_mtap, id = meta_gene$subject_id, pred = pred_gene)
result_pod <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_pod$summary
```

## PEC
```{r echo = F}
attempt_so_bl$celltype_pec <- ifelse(attempt_so_bl$celltype %in% c("PEC"),
                                     "PEC", as.character(attempt_so_bl$celltype))
attempt_so_bl_hc_pec <- subset(attempt_so_bl, celltype_pec == "PEC")

FeaturePlot(attempt_so_bl_hc_pec, reduction = "umap.harmony", features = "MTAP", raster = F)
```
### Pseudoreplication (Treating each cell independently)

```{r echo = F}
FindMarkers(attempt_so_bl_hc_pec, ident.1 = "Dapagliflozin", ident.2 = "Placebo", group.by = "treatment", features = "MTAP", logfc.threshold = 0)
```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}
counts_attempt_bl <- round(GetAssayData(attempt_so_bl_hc_pec, layer = "counts")) # load counts and round
counts_attempt_bl_mtap <- counts_attempt_bl["MTAP",]
meta_gene <- subset(attempt_so_bl_hc_pec, features = "MTAP")@meta.data
pred_gene <- model.matrix(~treatment, data = meta_gene)
data_g_gene <- list(count = counts_attempt_bl_mtap, id = meta_gene$subject_id, pred = pred_gene)
result_pec <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_pec$summary
```

## PT
```{r echo = F}
attempt_so_bl$celltype_pt <- ifelse(grepl("PT-", attempt_so_bl$celltype),
                                 "PT", as.character(attempt_so_bl$celltype))
attempt_so_bl_hc_pt <- subset(attempt_so_bl, celltype_pt == "PT" & celltype != "PT_lowQuality")
FeaturePlot(attempt_so_bl_hc_pt, reduction = "umap.harmony", features = "MTAP", raster = F)
```
### Pseudoreplication (Treating each cell independently)

```{r echo = F}
FindMarkers(attempt_so_bl_hc_pt, ident.1 = "Dapagliflozin", ident.2 = "Placebo", group.by = "treatment", features = "MTAP", logfc.threshold = 0)
```
### Mixed model using NEBULA (Treating each subject independently)

```{r echo = F}
counts_attempt_bl <- round(GetAssayData(attempt_so_bl_hc_pt, layer = "counts")) # load counts and round
counts_attempt_bl_mtap <- counts_attempt_bl["MTAP",]
meta_gene <- subset(attempt_so_bl_hc_pt, features = "MTAP")@meta.data
pred_gene <- model.matrix(~treatment, data = meta_gene)
data_g_gene <- list(count = counts_attempt_bl_mtap, id = meta_gene$subject_id, pred = pred_gene)
result_pt <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, 
                 ncore = 1, output_re = T, covariance = T,
                 reml = T, model = "NBLMM")

result_pt$summary
```