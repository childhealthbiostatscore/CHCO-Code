---
title: "Integration of scRNA, SOMAScan, and Targeted Metabolomics in CROCODILE"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
bibliography: /Users/timvigers/Library/CloudStorage/Dropbox/Miscellaneous/zotero.bib
csl: /Users/timvigers/Library/CloudStorage/Dropbox/Miscellaneous/american-medical-association.csl
editor: source
---

```{r libraries}
#| include: false
library(tidyverse)
library(Seurat)
library(MOFA2)
```

```{r data cleaning}
# Import scRNA
so <- readRDS("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/scRNA/data_clean/seurat_data_no_computations.RDS")
# Limit to CROCODILE
so <- so[, grepl("CRC", so$michigan_id)]
# Normalize
so <- NormalizeData(so)
# Aggregate by ident - variable features only
rna <- AggregateExpression(so,
  assays = "RNA", group.by = c("ident", "michigan_id"),
  features = VariableFeatures(so)[1:7596] # Top 7596 to match SOMA dimensionality
)
rna <- as.data.frame(t(rna$RNA))
# List of dataframes
celltype = sub("_CRC-\\d\\d","",rownames(rna))
rna = split.data.frame(rna,celltype)
rna = lapply(rna,function(d){
  rownames(d) = sub(".*_CRC","CRC",rownames(d))
  colnames(d) = paste(colnames(d),"in",sub("_CRC-\\d\\d","",rownames(d)))
  return(d)
})
# Just PT cells for now
rna = rna[grep("PT-",names(rna))]
# Find those with complete PT cell data
keep = Reduce(intersect,lapply(rna, rownames))
rna = lapply(rna,function(d){
  return(data.matrix(d[keep,]))
})
# Import SOMAScan
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/CROCODILE/Somalogic data/croc_soma.Rdata")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/CROCODILE/Somalogic data/analytes.Rdata")
rownames(croc_soma)=NULL
# Normalize and exclude those without scRNA data
croc_soma <- croc_soma %>%
  select(SampleDescription, contains("seq")) %>%
  column_to_rownames("SampleDescription")
croc_soma = log(croc_soma)
croc_soma = data.matrix(croc_soma[keep,])
# Targeted metabolomics
metabs <- read.csv("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/CROCODILE/Data_Cleaned/metabolomics_rq.csv")
metabs <- metabs %>% column_to_rownames("CmpdID")
colnames(metabs) <- sub("\\.", "-", colnames(metabs))
metabs <- data.frame(t(metabs))
# Normalize and exclude those missing scRNA
metabs <- log(metabs)
metabs = data.matrix(metabs[keep,])
# Put together
mofa_dfs = c(rna,list("SOMAScan"=croc_soma),list("Metabolomics"=metabs))
```

# With scRNAseq data

```{r prepare mofa}
#| eval: false
# Prepare for MOFA!
mo <- create_mofa(mofa_dfs[-which(names(mofa_dfs)=="Metabolomics")])
# Data options
data_opts <- get_default_data_options(mo)
data_opts$scale_views <- T
data_opts$scale_groups <- F
# Model options
model_opts <- get_default_model_options(mo)
# model_opts$num_factors <- 4
# Training options
training_opts <- get_default_training_options(mo)
training_opts$seed <- 1017
# Path for saving
model_path <- "/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/Multiomics/data_cleaned/mofa_model.hdf5"
```

```{r fit mofa}
#| eval: false
# Fit
mo <- prepare_mofa(
  object = mo,
  data_options = data_opts,
  model_options = model_opts,
  training_options = training_opts
)
mo_trained <- run_mofa(mo, outfile = model_path, use_basilisk = T)
```

```{r}
model <- load_model(model_path)
```

## Data overview

```{r}
#| label: fig-overview
#| fig-cap: Data overview
plot_data_overview(model)
```

```{r}
# Metadata from model
md <- samples_metadata(model)
# Add clinical data
croc <- read.csv("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/Data Harmonization/Data Clean/harmonized_dataset.csv", na.strings = "")
croc <- croc %>%
  filter(study == "CROCODILE") %>%
  select(record_id, acr_u, albuminuria_cat) %>%
  group_by(record_id) %>%
  summarise_all(~ first(na.omit(.x)))
md <- left_join(md, croc, by = c("sample" = "record_id"))
samples_metadata(model) <- md
```

## Variance decomposition

```{r}
plot_variance_explained(model, x = "factor", y = "view")
```

## Single factors

```{r}
plot_factor(model,
  factor = 1:2,
  color_by = "acr_u",
  shape_by = "albuminuria_cat"
)
```

## Multiple factors

```{r}
plot_factors(model,
  factors = 1:2,
  color_by = "acr_u"
)
```

# MOFA questions

1. Do you use spike-slab sparsity prior in the factors and/or weights? 
  - Any other model/training recommendations?
  
2. What feature selection approaches do you use prior to fitting the model? I used `VariableFeatures()` in `Seurat` and `nearZeroVar()` from the `caret` package (both with default options).
