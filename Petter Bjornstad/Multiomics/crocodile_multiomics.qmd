---
title: "Integration of scRNA, SOMAScan, and Targeted Metabolomics in CROCODILE"
author: "Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
    theme:
      light: flatly
      dark: darkly
bibliography: /Users/timvigers/Library/CloudStorage/Dropbox/Miscellaneous/zotero.bib
csl: /Users/timvigers/Library/CloudStorage/Dropbox/Miscellaneous/american-medical-association.csl
editor: source
---

```{r libraries}
#| include: false
library(tidyverse)
library(Seurat)
library(MOFA2)
```

```{r data cleaning}
#| cache: true
# CROCODILE clinical data
croc <- read.csv("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/Data Harmonization/Data Clean/harmonized_dataset.csv", na.strings = "")
croc <- croc %>%
  filter(study == "CROCODILE") %>%
  select(record_id, acr_u, albuminuria_cat) %>%
  group_by(record_id) %>%
  summarise_all(~ first(na.omit(.x)))
ids <- as.character(unique(croc$record_id))
# Number of features
nfeat <- 500
# Import scRNA
so <- readRDS("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/scRNA/data_clean/seurat_data_no_computations.RDS")
# Limit to CROCODILE
so <- so[, grepl("CRC", so$michigan_id)]
# Normalize and scale
so <- NormalizeData(so)
so <- ScaleData(so)
celltypes <- as.character(unique(Idents(so)))
# Get the top features by cell type
rna <- lapply(celltypes, function(ct) {
  sso <- subset(so, idents = ct)
  ct_vars <- FindVariableFeatures(sso, nfeatures = nfeat, verbose = F)
  ct_vars <- VariableFeatures(ct_vars)
  rn <- AggregateExpression(sso, group.by = "michigan_id", features = ct_vars)
  rn <- t(rn$RNA)
  colnames(rn) <- paste(colnames(rn), "in", ct)
  # Add rows of missing if necessary (need all matrices to be same dimensions)
  miss <- ids[which(!ids %in% rownames(rn))]
  if (length(miss) > 0) {
    miss_mat <- matrix(rep(rep(NA, times = nfeat), times = length(miss)),
      nrow = length(miss), byrow = T
    )
    rownames(miss_mat) <- miss
    colnames(miss_mat) <- colnames(rn)
    rn <- rbind(rn, miss_mat)
  }
  # Sort and return
  rn <- rn[ids, ]
  return(rn)
})
names(rna) <- celltypes
# Import SOMAScan
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/CROCODILE/Somalogic data/croc_soma.Rdata")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/CROCODILE/Somalogic data/analytes.Rdata")
rownames(croc_soma) <- NULL
# Exclude those without scRNA data
croc_soma <- croc_soma %>%
  select(SampleDescription, contains("seq")) %>%
  column_to_rownames("SampleDescription")
croc_soma <- log(croc_soma)
cvs <- sapply(croc_soma[, 2:ncol(croc_soma)], function(c) {
  sd(c, na.rm = T) / mean(c, na.rm = T)
})
soma_var <- names(cvs)[order(cvs, decreasing = T)[1:nfeat]]
croc_soma <- croc_soma[, soma_var]
miss <- ids[which(!ids %in% rownames(croc_soma))]
if (length(miss) > 0) {
    miss_mat <- matrix(rep(rep(NA, times = nfeat), times = length(miss)),
      nrow = length(miss), byrow = T
    )
    rownames(miss_mat) <- miss
    colnames(miss_mat) <- colnames(croc_soma)
    croc_soma <- rbind(croc_soma, miss_mat)
  }
croc_soma <- croc_soma[ids, ]
# Targeted metabolomics
metabs <- read.csv("/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/CROCODILE/Data_Cleaned/metabolomics_rq.csv")
metabs <- metabs %>% column_to_rownames("CmpdID")
colnames(metabs) <- sub("\\.", "-", colnames(metabs))
metabs <- data.frame(t(metabs))
metabs <- log(metabs)
miss <- ids[which(!ids %in% rownames(metabs))]
if (length(miss) > 0) {
    miss_mat <- matrix(rep(rep(NA, times = ncol(metabs)), times = length(miss)),
      nrow = length(miss), byrow = T
    )
    rownames(miss_mat) <- miss
    colnames(miss_mat) <- colnames(metabs)
    metabs <- rbind(metabs, miss_mat)
  }
metabs <- metabs[ids, ]
# Put together
mofa_dfs <- c(rna, list("SOMAScan" = croc_soma), list("Metabolomics" = metabs))
# Format matrices
mofa_dfs <- lapply(mofa_dfs, function(d) {
  data.matrix(t(d))
})
names(mofa_dfs) = gsub("/",".",names(mofa_dfs))
```

# With scRNAseq data

```{r prepare mofa}
# Prepare for MOFA!
mo <- create_mofa(mofa_dfs)
# Data options
data_opts <- get_default_data_options(mo)
data_opts$scale_views <- T
data_opts$scale_groups <- F
# Model options
model_opts <- get_default_model_options(mo)
# model_opts$num_factors <- 4
# Training options
training_opts <- get_default_training_options(mo)
training_opts$seed <- 1017
# Path for saving
model_path <- "/Users/timvigers/Library/CloudStorage/Dropbox/Work/Petter Bjornstad/Multiomics/data_cleaned/mofa_model.hdf5"
```

```{r fit mofa}
#| eval: false
# Fit
mo <- prepare_mofa(
  object = mo,
  data_options = data_opts,
  model_options = model_opts,
  training_options = training_opts
)
mo_trained <- run_mofa(mo, outfile = model_path, use_basilisk = T)
```

```{r}
model <- load_model(model_path)
```

## Data overview

```{r}
#| label: fig-overview
#| fig-cap: Data overview
plot_data_overview(model)
```

```{r}
# Metadata from model
md <- samples_metadata(model)
# Add clinical data
md <- left_join(md, croc, by = c("sample" = "record_id"))
samples_metadata(model) <- md
```

## Variance decomposition

```{r}
plot_variance_explained(model, x = "factor", y = "view")
```

## Single factors

```{r}
plot_factor(model,
  factor = 1:4,
  color_by = "acr_u",
  shape_by = "albuminuria_cat"
)
```

## Multiple factors

```{r}
plot_factors(model,
  factors = 1:4,
  color_by = "albuminuria_cat"
)
```

# MOFA questions

1. Do you use spike-slab sparsity prior in the factors and/or weights? 
- Any other model/training recommendations?

2. What feature selection approaches do you use prior to fitting the model? Currently I am running `FindVariableFeatures(nfeatures = 200)` for each cell type subset in and using the "genes" with the largest coefficient of variation for SOMAScan.
