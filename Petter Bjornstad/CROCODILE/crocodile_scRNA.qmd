---
title: "CROCODILE scRNAseq"
author: "Laura Pyle, Tim Vigers & Ye Ji Choi"
date: "today"
date-format: long
execute: 
  echo: false
  warning: false
  messages: false
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r libraries}
#| include: false
library(Seurat)
library(future)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggtree)
library(ggpubr)
library(rstatix)
library(table1)
library(GSVA)
library(Biobase)
library(ReactomeGSA)
library(GSEABase)
library(GSVAdata)
library(msigdbr)
library(kableExtra)
library(knitr)
```

```{r scRNA data setup}
#| include: false
# Parallel processing
plan(multicore, workers = 16)
options(future.globals.maxSize=2e9)
# Import
so <- readRDS("/run/user/1014/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/scRNA/data_clean/seurat_data_no_computations.RDS")
# CROCODILE only
so <- so[, grepl("CRC", so$michigan_id)]
# Exclude control with IgA
so <- subset(so, T2D_HC_Phil != "HC_igA")
so$Group <- so$T2D_HC_Phil
# Normalize and scale
so <- NormalizeData(so)
so <- ScaleData(so)
# PCA
so <- RunPCA(so, features = VariableFeatures(object = so))
# ElbowPlot(so)
# Cluster cells
so <- FindNeighbors(so)
so <- FindClusters(so)
# Perform UMAP and tSNE
so <- RunUMAP(so, dims = 1:30)
# so = RunTSNE(so,dim.embed = 3)
# General cell types as identifiers
so$generaltype <- sub("_.*", "", so$LR_clusters)
Idents(so) <- so$LR_clusters
# Get genes_subset of interest (TCA cycle)
genes <- c(
  "ACO1", "ACO2", "IDH1", "IDH2", "IDH3A", "IDH3B", "IDH3G", "OGDH", "OGDHL",
  "SUCLA2", "SUCLG1", "SUCLG2", "SDHA", "SDHB", "SDHC", "SDHD", "FH", "MDH1",
  "MDH2", "FAS", "CS"
)
genes = sort(genes)
all.genes = rownames(so)

acetylcoa_genes <- c(
  "PDHA1", "PDHB", "ACADM", "ACADS", "ACADL", "BCAT1", "BCAT2", "GOT1", "GOT2", 
  "ACSS2", "ACSS1", "PDC","PDK1", "PDP1", "PC"
)

ckd_genes <- c(
  "GLS", "GLUD1", "EGLN2", "EGLN1", "EGLN3", "EPO", "PC", "PCK1", "PCK2", "FBP1", 
  "G6PC", "IDH1", "IDH2", "IDH3A", "OGDH"
)

ir_genes <- c(
  "TFAM", "ACLY", "DGAT1", "SPTLC1", "IDH1", "PRKAA2", "NFE2L2", 
  "INSR", "IRS1", "IRS2", "PDHA1", "PDHB", "ACACA", "FASN",
  "PPARGC1A", "SLC2A4", "PC", "GLUD1", "CACNA1C", 
  "IL6", "TNF", "MRPL12", "MTOR", "FOXP3"
)

sglt2_genes <- c(
  "SLC2A2", "INSR", "ACADM", "ACADS",
  "HMGCS2", "BDH1", "NOX4", "SOD1", "PPARGC1A", "NOS3"
)

oxy_phos_genes <- c(
  "NDUFS6", "SDHA", "SDHB", "SDHC", "SDHD",
  "UQCRC1", "UQCRC2", "COX4I1", "COX4I2", "ATP5PF"
)
```


# Differential expression

In the table below, T1D are group 1 and HC are group 2. Negative values indicate that the gene is more highly expressed in the second group (HC).

```{r}
# function for de.markers
de.markers <- function(seurat_object, genes, group.by, id1, id2, celltype, extension){
  m = FindMarkers(seurat_object, features = genes,group.by = group.by,ident.1 = id1, 
                  ident.2 = id2, subset.ident = celltype,verbose = T, logfc.threshold=0.10,
                  min.pct = .10)
  m$p_val_adj = p.adjust(m$p_val,method = "bonferroni")
  m <- m %>% dplyr::select(avg_log2FC,pct.1,pct.2,p_val,p_val_adj) %>% arrange(p_val)
  genes_subset <- rownames(m)[m$p_val <= 0.05]

  if (length(genes_subset) > 0){
    assign(paste0("genes_subset", extension), genes_subset, envir = .GlobalEnv)
  }
  assign(paste0("m", extension), m, envir = .GlobalEnv)
  return(knitr::kable(m, digits = 3))
}
```

## TCA cycle genes
```{r}
de.markers(so, genes, "Group", id2 = "HC", id1 = "T1D", "PT", "")
```
## Acetyl CoA genes
```{r}
de.markers(so, acetylcoa_genes, "Group", id2 = "HC", id1 = "T1D", "PT", "_acetylcoa")
```
## CKD genes
```{r}
de.markers(so, ckd_genes, "Group", id2 = "HC", id1 = "T1D", "PT", "_ckd")
```
## IR genes
```{r}
de.markers(so, ir_genes, "Group", id2 = "HC", id1 = "T1D", "PT", "_ir")
```
## SGLT2i genes
```{r}
de.markers(so, sglt2_genes, "Group", id2 = "HC", id1 = "T1D", "PT", "_sglt2")
```
## Oxygen phosphorylation genes
```{r}
de.markers(so, oxy_phos_genes, "Group", id2 = "HC", id1 = "T1D", "PT", "_oxy_phos")
```
# Differential expression in sub PT celltypes

In the table below, T1D are group 1 and HC are group 2. Negative values indicate that the gene is more highly expressed in the second group (HC).

## PT-1
```{r}
de.markers(subset(so, celltype == "PT-1"), genes, "Group", id2 = "HC", id1 = "T1D", "PT", ".1")
```
## PT-2
```{r}
de.markers(subset(so, celltype == "PT-2"), genes, "Group", id2 = "HC", id1 = "T1D", "PT", ".2")
```
## PT-3
```{r}
de.markers(subset(so, celltype == "PT-3"), genes, "Group", id2 = "HC", id1 = "T1D", "PT", ".3")
```
## PT-4
```{r}
de.markers(subset(so, celltype == "PT-4"), genes, "Group", id2 = "HC", id1 = "T1D", "PT", ".4")
```
## PT-5
```{r}
de.markers(subset(so, celltype == "PT-5"), genes, "Group", id2 = "HC", id1 = "T1D", "PT", ".5")
```

# UMAP

## By group
```{r}
# Testing color combos
gb_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00203FFF','#ADEFD1FF'))
pp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#5F4B8BFF','#E69A8DFF'))
bp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00539CFF','#EEA47FFF'))
pg_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#6E6E6DFF','#FAD0C9FF'))
by_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00539CFF','#FFD662FF'))
gp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#80C4B7','#EDCBD2'))
# Remove title
umap = gp_umap + theme(plot.title = element_blank())
umap
# Save image
# ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/UMAP_Group_1200x900.jpeg",
#        plot = umap,scale = 3,width = 1200,height = 900,units = "px")
```

## By cell type (general)

```{r}
# Idents(so) = so$generaltype
order = sort(as.character(unique(Idents(so))),decreasing = T)
order = c(order[-which(order=="PT")], order[which(order=="PT")])
p = DimPlot(so,
  reduction = "umap",
  order = order
) + scale_color_discrete_qualitative(palette = "Pastel 1")
p
#Save image
ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/UMAP_General_Cell_Type_1200x900.jpeg",
       plot = p,scale = 3,width = 1200,height = 900,units = "px")
```
## By cell type

```{r}
#Idents(so) = so$celltype
order = sort(as.character(unique(Idents(so))),decreasing = T)
order = c(order[-which(order=="PT")], order[which(order=="PT")])
p = DimPlot(so,
  reduction = "umap",
  order = order,
  label = T
) + scale_color_discrete_qualitative(palette = "Pastel 1")
p
# Save image
ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/UMAP_Cell_Type_1200x900.jpeg",
       plot = p,scale = 3,width = 1200,height = 900,units = "px")
```


## By group and feature

```{r results='asis'}
# invisible(lapply(genes, function(g) {
#   cat("\n")
#   cat("###", g)
#   cat("\n")
#   p = FeaturePlot(so,
#     features = g, split.by = "Group", order = T,
#     cols = RColorBrewer::brewer.pal(3, "YlGnBu")
#   ) + theme(legend.position = "right")
#   print(p)
#   cat("\n")
# Save
# ggsave(filename = paste0("/home/yejichoi/Documents/lin_temp_folder/Gene specific/UMAPs/UMAP_",g,"_1600x900.jpeg"),plot = p,scale = 3,
#      width = 1600,height = 900,units = "px")
# }))
```
# Cell count
```{r}
# By PT subtypes
cellcount<- so@meta.data %>% 
  filter(generaltype == "PT") %>%
  filter(celltype != "PT_lowQuality") %>%
  ggplot(aes(Group, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
ggsave(plot = cellcount, filename = "/home/yejichoi/Documents/lin_temp_folder/PT_cell_proportions.jpg")
```

# TCA cycle genes

## Violin plots

### Split violin plot function
```{r}
GeomSplitViolin <- ggproto(
  "GeomSplitViolin", 
  GeomViolin, 
  draw_group = function(self, data, ..., draw_quantiles = NULL) {
    data <- transform(data, 
                      xminv = x - violinwidth * (x - xmin), 
                      xmaxv = x + violinwidth * (xmax - x))
    grp <- data[1,'group']
    newdata <- plyr::arrange(
      transform(data, x = if(grp%%2==1) xminv else xmaxv), 
      if(grp%%2==1) y else -y
    )
    newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
    newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x']) 
    if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
      stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <= 1))
      quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
      aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
      aesthetics$alpha <- rep(1, nrow(quantiles))
      both <- cbind(quantiles, aesthetics)
      quantile_grob <- GeomPath$draw_panel(both, ...)
      ggplot2:::ggname("geom_split_violin", 
                       grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
    } else {
      ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
    }
  }
)

geom_split_violin <- function (mapping = NULL, 
                               data = NULL, 
                               stat = "ydensity", 
                               position = "identity", ..., 
                               draw_quantiles = NULL, 
                               trim = TRUE, 
                               scale = "area", 
                               na.rm = FALSE, 
                               show.legend = NA, 
                               inherit.aes = TRUE) {
  layer(data = data, 
        mapping = mapping, 
        stat = stat, 
        geom = GeomSplitViolin, 
        position = position, 
        show.legend = show.legend, 
        inherit.aes = inherit.aes, 
        params = list(trim = trim, 
                      scale = scale, 
                      draw_quantiles = draw_quantiles, 
                      na.rm = na.rm, ...)
  )
}

split.vp <- function(seurat_object, genes, filepath, color1 = "#6c9a8b", color2 = "#e8998d") {
  for (i in 1:length(genes)){
    cat("\n")
    cat("###", genes[i])
    cat("\n")  
    d = VlnPlot(seurat_object, features = genes[i], split.by = "Group", idents = "PT", split.plot = F, pt.size = 0) 
    d = d$data
    p = ggplot(d,aes(x=ident, y = !!sym(genes[i]), fill=split))+
      geom_jitter(position = position_jitterdodge(jitter.width = 0.5, dodge.width = 0.9), 
                  size = 0.2, alpha = 0.3, show.legend = T, aes(color = split)) +
      geom_split_violin(trim = T) +
      theme_bw()+
      theme(legend.title = element_blank(),
            axis.title.x = element_blank(), 
            axis.text.x=element_blank(),
            plot.title = element_text()) +
      labs(title = (paste0(genes[i]," in  PT Cells")),
           y = "Expression") +
      scale_fill_manual(values=c(color1, color2)) + 
      scale_color_manual(values=c(color1, color2))
    print(p)
    cat("\n")
    # Save
    ggsave(filename = paste0(filepath,"Violin_",genes[i],".jpeg"),plot = p,scale = 5,
         width = 800,height = 600,units = "px")
  }
}

split.vp.combined <- function(seurat_object, genes, filepath, color1 = "#6c9a8b", color2 = "#e8998d") {
  compiled_d = data.frame()
  for (i in 1:length(genes)){
    d = VlnPlot(seurat_object, features = genes[i], split.by = "Group", idents = "PT", split.plot = F, pt.size = 0) 
    d = d$data
    d$genename = colnames(d)[1]
    colnames(d)[1] <- "expression"
    compiled_d = rbind(compiled_d, d)
    }
  p = 
    ggplot(compiled_d,aes(x=genename, y = expression, fill=split)) +
    geom_jitter(position = position_jitterdodge(jitter.width = 0.5, dodge.width = 0.9), 
                size = 0.2, alpha = 0.3, show.legend = T, aes(color = split)) +    
    geom_split_violin(scale = "width", trim = T) +
    theme_bw() +
    theme(legend.title = element_blank(),
          axis.title.x = element_blank(), 
          plot.title = element_text()) +
    labs(title = "PT Cells",
         y = "Expression") +
    scale_fill_manual(values=c(color1, color2)) + 
    scale_color_manual(values=c(color1, color2))
  print(p)
  cat("\n")
 # Save
  ggsave(filename = paste0(filepath,"Violin_combined",".jpeg"),plot = p,scale = 5,
        width = 1000,height = 600,units = "px")

}


```

### In PT cells

```{r}
split.vp(seurat_object = so, genes = genes_subset, filepath = "/home/yejichoi/Documents/lin_temp_folder/")
split.vp.combined(seurat_object = so, genes = genes_subset, filepath = "/home/yejichoi/Documents/lin_temp_folder/")
```

## Ridge plots

### In PT cells

```{r}
#| message: false
rp = RidgePlot(so, features = genes_subset, group.by = "Group", idents = "PT")
rp
ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Ridge_Group_1920x1080.jpeg",
       plot = rp,scale = 3,
       width = 1920,height = 1080,units = "px")
```

## Dot plots

### All cells

```{r}
dp = DotPlot(so,
  features = genes_subset, scale = T,scale.by= "size",dot.scale = 10)
dp
ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_All_1600x900.jpeg",
       plot = dp,scale = 3,
       width = 1600,height = 900,units = "px")
```

### PT cells only

```{r}
# Formatted dot plot function
# colorlow = "#8ecae6", colormid = "#fcbf49", colorhigh = "#d90429"
dp.formatted <- function(seurat_object, genes, celltype, group.by, m,
                         colorlow = "#83c5be", colormid = "#f4f1bb", colorhigh = "#d90429"
                         ){
  pt.combined <- DotPlot(seurat_object,
  features = genes,idents = celltype, group.by = group.by,
  scale = F, cols = "RdYlBu"
)$data 

  pt.plot <- pt.combined %>% 
    ggplot(aes(x=features.plot, y = id, color = avg.exp.scaled, size = pct.exp)) + 
    geom_point() +
    theme_bw() +
    scale_color_gradient2(low = colorlow, mid = colormid, high = colorhigh, midpoint = 2,
                          guide = guide_colorbar(label.vjust = 0.8, ticks = F, draw.ulim = T, draw.llim = T),
                          limits = c(0,4)) +
    scale_size(range = c(0,15), limits = c(10,100)) +
    theme(panel.grid = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          legend.text = element_text(size = 8),
          legend.title = element_text(size = 8, vjust = 0.5),
          legend.spacing.x = unit(.1, "cm"),
          legend.direction = "horizontal") +
    guides(size = guide_legend(label.position = "bottom",
                               title.position = "top"),
           color = guide_colorbar(label.position = "bottom",
                                title.position = "top")) +
    labs(color = "Count (Log-scaled) ",
         size = "Expression (%) ") + 
    scale_y_discrete(limits=rev)

  pt.table <- m %>%
    filter(rownames(m) %in% genes) %>%
    dplyr::mutate(p_val = p_format(p_val),
                  p_val_adj = p_format(p_val_adj)) %>% 
    dplyr::select(pct.1, pct.2, avg_log2FC, p_val, p_val_adj) 
  gg.pt.table <- ggtexttable(format(pt.table, digits = 3, scientific = F),
              cols = c("HC", "T1D", "Log2FC", "p-value", "q-value"),
              theme = ttheme("blank")) %>%
    tab_add_hline(at.row = 1:2, row.side = "top", linewidth = 1) %>%
    tab_add_title("% Expressed in PT Cells")
  
  pt.plot_table <- ggarrange(pt.plot, NULL, gg.pt.table,
            nrow = 1, widths = c(1,-0.1,1), common.legend = F,
            legend = "top")

}

pt.plot_table <- dp.formatted(seurat_object = so, genes = genes_subset, group.by = "Group",
                   celltype = "PT", m = m)

ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_PT_cells_1920x1080.jpeg",
       plot = pt.plot_table, scale = 3,
       width = 1000,height = 500,units = "px")
pt.plot_table
```
## Dot plot of PT subtypes combined
```{r warning = F}
pt.1 <- DotPlot(subset(so, celltype == "PT-1"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% dplyr::mutate(pt.celltype = paste0("PT-1:",id))
pt.2 <- DotPlot(subset(so, celltype == "PT-2"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% dplyr::mutate(pt.celltype = paste0("PT-2:",id))
pt.3 <- DotPlot(subset(so, celltype == "PT-3"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% dplyr::mutate(pt.celltype = paste0("PT-3:",id))
pt.4 <- DotPlot(subset(so, celltype == "PT-4"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% dplyr::mutate(pt.celltype = paste0("PT-4:",id))
pt.5 <- DotPlot(subset(so, celltype == "PT-5"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% dplyr::mutate(pt.celltype = paste0("PT-5:",id))

pt_dot <-rbind(pt.1, pt.2, pt.3, pt.4, pt.5)
match_1 <- (genes_subset %in% genes_subset.1) * 9.5
m1.label <- m.1 %>% dplyr::mutate(m1.label = case_when(p_val <= 0.05 & pct.1 > pct.2 ~ "<",
                                                p_val <= 0.05 & pct.1 < pct.2 ~ ">"))%>%
  dplyr::select(m1.label) %>%
  dplyr::mutate(genes_subset = rownames(m.1))
genes_subset.2 <- ""
match_2 <- (genes_subset %in% genes_subset.2) * 7.5
m2.label <- m.2 %>% dplyr::mutate(m2.label = case_when(p_val <= 0.05 & pct.1 > pct.2 ~ "<",
                                                p_val <= 0.05 & pct.1 < pct.2 ~ ">")) %>%
  dplyr::select(m2.label) %>%
  dplyr::mutate(genes_subset = rownames(m.2))
match_3 <- (genes_subset %in% genes_subset.3) * 5.5
m3.label <- m.3 %>% dplyr::mutate(m3.label = case_when(p_val <= 0.05 & pct.1 > pct.2 ~ "<",
                                                p_val <= 0.05 & pct.1 < pct.2 ~ ">")) %>%
  dplyr::select(m3.label) %>%
  dplyr::mutate(genes_subset = rownames(m.3))
match_4 <- (genes_subset %in% genes_subset.4) * 3.5
m4.label <- m.4 %>% dplyr::mutate(m4.label = case_when(p_val <= 0.05 & pct.1 > pct.2 ~ "<",
                                                p_val <= 0.05 & pct.1 < pct.2 ~ ">")) %>%
  dplyr::select(m4.label) %>%
  dplyr::mutate(genes_subset = rownames(m.4))
match_5 <- (genes_subset %in% genes_subset.5) * 1.5
m5.label <- m.5 %>% dplyr::mutate(m5.label = case_when(p_val <= 0.05 & pct.1 > pct.2 ~ "<",
                                                p_val <= 0.05 & pct.1 < pct.2 ~ ">")) %>%
  dplyr::select(m5.label) %>%
  dplyr::mutate(genes_subset = rownames(m.5))

genes_subset_df <- as.data.frame(genes_subset) %>%
  dplyr::mutate(x = seq_along(genes_subset)) %>% 
  cbind(match_1, match_2, match_3, match_4, match_5)  %>%
  left_join(m1.label) %>% left_join(m2.label) %>% left_join(m3.label) %>%
  left_join(m4.label) %>% left_join(m5.label) 
genes_subset_df[genes_subset_df==0] <- NA

pt.plot.subset <- pt_dot %>% 
  ggplot(aes(x=features.plot, y = pt.celltype, color = avg.exp.scaled, size = pct.exp)) + 
  geom_point() +
  theme_bw() +
  scale_color_gradient2(low = "#83c5be", mid = "#f4f1bb", high = "#d90429", midpoint = 2,
                          guide = guide_colorbar(label.vjust = 0.8, ticks = F, draw.ulim = T, draw.llim = T),
                          limits = c(0,4)) +
  scale_size(range = c(0,15), limits = c(10,100)) +
  theme(panel.grid = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 8, vjust = 0.5),
        legend.spacing.x = unit(.1, "cm"),
        legend.direction = "horizontal") +
  guides(size = guide_legend(label.position = "bottom",
                             title.position = "top"),
         color = guide_colorbar(label.position = "bottom",
                              title.position = "top")) +
  labs(color = "Count (Log-scaled) ",
       size = "Expression (%) ") + 
  geom_hline(yintercept = 2.5, size = .3, color = "gray") +
  geom_hline(yintercept = 4.5, size = .3, color = "gray") +
  geom_hline(yintercept = 6.5, size = .3, color = "gray") +
  geom_hline(yintercept = 8.5, size = .3, color = "gray") +
  geom_text(data = genes_subset_df, aes(x = x, y = match_1, label = m1.label), color = "#006d77", size = 4,
            angle = 90, vjust = 0.35) +
  geom_text(data = genes_subset_df, aes(x = x, y = match_2, label = m2.label), color = "#006d77", size = 4,
            angle = 90, vjust = 0.35) +
  geom_text(data = genes_subset_df, aes(x = x, y = match_3, label = m3.label), color = "#006d77", size = 4,
            angle = 90, vjust = 0.35) +
  geom_text(data = genes_subset_df, aes(x = x, y = match_4, label = m4.label), color = "#006d77", size = 4,
            angle = 90, vjust = 0.35) +
  geom_text(data = genes_subset_df, aes(x = x, y = match_5, label = m5.label), color = "#006d77", size = 4,
            angle = 90, vjust = 0.35) + 
    scale_y_discrete(limits=rev)

# Create an empty list to store the tables
table_list <- list()

for (i in 1:5) {
  m_i <- get(paste0("m.", i))  # Dynamically access m.i
  
  pt.table <- m_i %>%
    filter(p_val <= 0.05) %>%
    dplyr::mutate(p_val = p_format(p_val)) %>%
    dplyr::select(pct.1, pct.2, avg_log2FC, p_val)
  
  # Check if pt.table is empty, if not, proceed
  if (nrow(pt.table) > 0) {
    gg.pt.table <- ggtexttable(
      format(pt.table, digits = 3, scientific = FALSE),
      cols = c("HC", "T1D", "Log2FC", "p-value"),
      theme = ttheme("blank")
    ) %>%
      tab_add_hline(at.row = 1:2, row.side = "top", linewidth = 1) %>%
      tab_add_title(paste("% Expressed in PT-", i, " Cells", sep = ""))
    
    table_list[[i]] <- gg.pt.table  # Store the table in the list
  }
}

gg.pt.table <- ggarrange(table_list[[1]], table_list[[3]], table_list[[4]], table_list[[5]], ncol = 1)
ptsub.plot_table <- ggarrange(pt.plot.subset, NULL, gg.pt.table,
          nrow = 1, widths = c(1.5,-0.1,1), common.legend = T)

ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_PT_subcells_1920x1080.jpeg",
       plot = ptsub.plot_table, scale = 3.5,
       width = 1200,height = 700,units = "px")
ptsub.plot_table
```
# Acetyl CoA genes
## Violin plots
```{r}
split.vp(seurat_object = so, genes = genes_subset_acetylcoa, filepath = "/home/yejichoi/Documents/lin_temp_folder/")
split.vp.combined(seurat_object = so, genes = genes_subset_acetylcoa, filepath = "/home/yejichoi/Documents/lin_temp_folder/acetylcoa_")
```
## Dot Plot
```{r}
pt.plot_table_acetylcoa <- dp.formatted(seurat_object = so, genes = genes_subset_acetylcoa, group.by = "Group",
                   celltype = "PT", m = m_acetylcoa)

ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_PT_cells_acetylcoa.jpeg",
       plot = pt.plot_table_acetylcoa, scale = 3,
       width = 1000,height = 500,units = "px")
pt.plot_table_acetylcoa
```

# Insulin resistance genes
## Violin plots
```{r}
split.vp(seurat_object = so, genes = genes_subset_ir, filepath = "/home/yejichoi/Documents/lin_temp_folder/")
split.vp.combined(seurat_object = so, genes = genes_subset_ir, filepath = "/home/yejichoi/Documents/lin_temp_folder/ir_")
```

## Dot Plot
```{r}
pt.plot_table_ir <- dp.formatted(seurat_object = so, genes = genes_subset_ir, group.by = "Group",
                   celltype = "PT", m = m_ir)

ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_PT_cells_IR.jpeg",
       plot = pt.plot_table_ir, scale = 3,
       width = 1000,height = 500,units = "px")
pt.plot_table_ir
```
# Chronic kidney disesase genes
## Violin plots
```{r}
split.vp(seurat_object = so, genes = genes_subset_ckd, filepath = "/home/yejichoi/Documents/lin_temp_folder/")
split.vp.combined(seurat_object = so, genes = genes_subset_ckd, filepath = "/home/yejichoi/Documents/lin_temp_folder/ckd_")
```
## Dot Plot
```{r}
pt.plot_table_ckd <- dp.formatted(seurat_object = so, genes = genes_subset_ckd, group.by = "Group",
                   celltype = "PT", m = m_ckd)

ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_PT_cells_ckd.jpeg",
       plot = pt.plot_table_ckd, scale = 3,
       width = 1000,height = 500,units = "px")
pt.plot_table_ckd
```

# Oxygen phosphorylation genes
## Violin plots
```{r}
split.vp(seurat_object = so, genes = genes_subset_oxy_phos, filepath = "/home/yejichoi/Documents/lin_temp_folder/")
split.vp.combined(seurat_object = so, genes = genes_subset_oxy_phos, filepath = "/home/yejichoi/Documents/lin_temp_folder/oxy_phos_")
```
## Dot Plot
```{r}
pt.plot_table_oxy_phos <- dp.formatted(seurat_object = so, genes = genes_subset_oxy_phos, group.by = "Group",
                   celltype = "PT", m = m_oxy_phos)

ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_PT_cells_oxy_phos.jpeg",
       plot = pt.plot_table_oxy_phos, scale = 3,
       width = 1000,height = 500,units = "px")
pt.plot_table_oxy_phos
```

# SGLT2i genes
## Violin plots
```{r}
split.vp(seurat_object = so, genes = genes_subset_sglt2, filepath = "/home/yejichoi/Documents/lin_temp_folder/")
split.vp.combined(seurat_object = so, genes = genes_subset_sglt2, filepath = "/home/yejichoi/Documents/lin_temp_folder/sglt2_")
```
## Dot Plot
```{r}
pt.plot_table_sglt2 <- dp.formatted(seurat_object = so, genes = genes_subset_sglt2, group.by = "Group",
                   celltype = "PT", m = m_sglt2)

ggsave(filename = "/home/yejichoi/Documents/lin_temp_folder/Dot_PT_cells_sglt2.jpeg",
       plot = pt.plot_table_sglt2, scale = 3,
       width = 1000,height = 500,units = "px")

pt.plot_table_sglt2
```
# Import CROC data from RedCap
```{r}
load("/run/user/1014/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/croc_data.RData")
dict <- read.csv("/run/user/1014/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Data Harmonization/data_dictionary_master.csv")
source("/home/yejichoi/Documents/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/label_harmonized_function.R")

# Blood metabolomics
blood_metab <- c("citrate", "two_oxoglutarate", "succinate", 
                 "fumarate", "malate", "aspartate",
                 "glutamate", "alanine", "arginine", "cystine", "histidine", 
                 "leucine_isoleucine", "lysine", "methionine", "phenylalanine", 
                 "proline", "serine", "thereonine",
                 "tyrosine", "valine", "glutamine")
blood_metab_tca <- c("citrate", "succinate", "fumarate", "malate")

# Spatial metabolomics
spatial_metab <- dat %>% dplyr::select(ends_with("_tissue")) %>% colnames()
spatial_metab_tca <- c("isocitric_citric_acid_tissue",
                   "aconitic_acid_tissue",
                   "succinic_acid_tissue",
                   "fumaric_acid_tissue",
                   "malic_acid_tissue")
```

## Extract individual level expression in scRNA
```{r warning = F}
meta_features <- so[["RNA"]]@meta.features
a <- rownames(meta_features)
var_list <- c("sample", "ident", "michigan_id", a)
pt_md <- FetchData(so, vars = var_list) %>%
  filter(ident == "PT")

pt_md <- pt_md %>%
  group_by(michigan_id) %>%
  dplyr::summarise(across(where(is.numeric), ~ mean(.x > 0, na.rm = TRUE)))

pt_md_tca <- pt_md %>%
  dplyr::select(michigan_id, genes_subset) %>% 
  dplyr::rename(record_id = michigan_id) %>%
  left_join(dat)

pt_md_ir <- pt_md %>%
  dplyr::select(michigan_id, genes_subset_ir) %>% 
  dplyr::rename(record_id = michigan_id) %>%
  left_join(dat)
```
# Associations
## Associations: sc PT, spatial metabolomics, blood metabolites
### Associate spatial metabolomics with sc PT transcripts
```{r}
dict <- label_harmonized_dict(dat, dict)
# Modify some labels
dict <- dict %>%
  mutate(avg_c_k2 = "Average cortical k2 (global)",
         avg_c_k2_wo_cyst_vw = "Average cortical k2 (voxelwise)")
metabo_sc <- function(data, gene, transcripts, gene_name) {
  plots <- list()
  for (i in 1:length(transcripts)) {
    plot <- data %>%
      ggplot(aes_string(y = gene, x = transcripts[i], color = "group")) +
      geom_smooth(method = lm, se = F, aes(color=NULL), color = "black",
                  linetype = "dashed") +
      geom_point() +
      geom_smooth(method = lm, se = F) +
      labs(color = "Group",
           y = gene_name) +
      theme_bw()
    plots[[i]] <- plot
  }
  ggarrange(plotlist = plots, common.legend = T)
}
```

```{r warning = F, message = F}
# Plots
metabo_sc(data = pt_md_tca, gene = "isocitric_citric_acid_tissue", 
          transcripts = c("ACO1", "ACO2", "IDH1"),
          gene_name = "Isocitric/citric acid")
metabo_sc(data = pt_md_tca, gene = "aconitic_acid_tissue", 
          transcripts = c("ACO1", "ACO2"),
          gene_name = "Aconitate")
metabo_sc(data = pt_md_tca, gene = "succinic_acid_tissue", 
          transcripts = c("OGDH", "OGDHL", "SUCLG1", "SUCLG2", "SDHB", "SDHC"),
          gene_name = "Succinate")
metabo_sc(data = pt_md_tca, gene = "fumaric_acid_tissue", 
          transcripts = c("SDHB", "SDHC"),
          gene_name = "Fumarate")
metabo_sc(data = pt_md_tca, gene = "malic_acid_tissue", 
          transcripts = c("ACO1", "ACO2", "IDH1"),
          gene_name = "Malate")
  
```
### Associate blood metabolites with sc PT transcripts
```{r message=F, warning=F}
metabo_sc(data = pt_md_tca, gene = "citrate", 
          transcripts = c("ACO1", "ACO2", "IDH1"),
          gene_name = "Citrate")

metabo_sc(data = pt_md_tca, gene = "succinate", 
          transcripts = c("OGDH", "OGDHL", "SUCLG1", "SUCLG2", "SDHB", "SDHC"),
          gene_name = "Succinate")

metabo_sc(data = pt_md_tca, gene = "fumarate", 
          transcripts = c("SDHB", "SDHC"),
          gene_name = "Fumarate")

metabo_sc(data = pt_md_tca, gene = "malate", 
          transcripts = c("ACO1", "ACO2", "IDH1"),
          gene_name = "Malate")
```
### Associate blood metabolites with spatial metabolomics
```{r message=F, warning=F}
citrate_plot <- pt_md_tca %>%
      ggplot(aes_string(y = spatial_metab_tca[1], x = blood_metab_tca[1], color = "group")) +
      geom_smooth(method = lm, se = F, aes(color=NULL), color = "black",
                  linetype = "dashed") +
      geom_point() +
      geom_smooth(method = lm, se = F) +
      labs(color = "Group",
           y = spatial_metab_tca[1]) +
      theme_bw()

succinate_plot <- pt_md_tca %>%
      ggplot(aes_string(y = spatial_metab_tca[3], x = blood_metab_tca[2], color = "group")) +
      geom_smooth(method = lm, se = F, aes(color=NULL), color = "black",
                  linetype = "dashed") +
      geom_point() +
      geom_smooth(method = lm, se = F) +
      labs(color = "Group",
           y = spatial_metab_tca[3]) +
      theme_bw()

fumarate_plot <- pt_md_tca %>%
      ggplot(aes_string(y = spatial_metab_tca[4], x = blood_metab_tca[3], color = "group")) +
      geom_smooth(method = lm, se = F, aes(color=NULL), color = "black",
                  linetype = "dashed") +
      geom_point() +
      geom_smooth(method = lm, se = F) +
      labs(color = "Group",
           y = spatial_metab_tca[4]) +
      theme_bw()

malate_plot <- pt_md_tca %>%
      ggplot(aes_string(y = spatial_metab_tca[5], x = blood_metab_tca[4], color = "group")) +
      geom_smooth(method = lm, se = F, aes(color=NULL), color = "black",
                  linetype = "dashed") +
      geom_point() +
      geom_smooth(method = lm, se = F) +
      labs(color = "Group",
           y = spatial_metab_tca[5]) +
      theme_bw()
ggarrange(citrate_plot, succinate_plot, fumarate_plot, malate_plot, common.legend = T)
```

## Associations: sc PT transcripts
#### Associate GBM width with sc PT transcripts

```{r message=F, warning=F}
## Log GBM width, and group the two groups
metabo_sc(data = pt_md_tca, gene = "gbm_thick_artmean", 
          transcripts = genes_subset,
          gene_name = "GBM width")
```

#### Associate global k2 with sc PT transcripts
```{r}
metabo_sc(data = pt_md_tca, gene = "avg_c_k2", 
          transcripts = genes_subset,
          gene_name = "Cortex k2")
```

#### Associate voxelwise k2 with sc PT transcripts
```{r}
metabo_sc(data = pt_md_tca, gene = "avg_c_k2_wo_cyst_vw", 
          transcripts = genes_subset,
          gene_name = "Voxel-wise Cortex k2")
```

#### Associate insulin sensitivity with sc PT transcripts
```{r}
metabo_sc(data = pt_md_tca, gene = "p2_raw_m", 
          transcripts = genes_subset,
          gene_name = "M-value")

metabo_sc(data = pt_md_ir, gene = "p2_raw_m", 
          transcripts = genes_subset_ir,
          gene_name = "M-value")
```

## Associations: spatial metabolomics
#### Associate GBM width with spatial metabolomics
```{r}
metabo_sc(data = pt_md_tca, gene = "gbm_thick_artmean", 
          transcripts = spatial_metab_tca,
          gene_name = "GBM Width")
```

#### Associate global k2 with spatial metabolomics
```{r}
metabo_sc(data = pt_md_tca, gene = "avg_c_k2", 
          transcripts = spatial_metab_tca,
          gene_name = "Cortex k2")
```

#### Associate voxelwise k2 with spatial metabolomics
```{r}
metabo_sc(data = pt_md_tca, gene = "avg_c_k2_wo_cyst_vw", 
          transcripts = spatial_metab_tca,
          gene_name = "Voxel-wise Cortex k2")
```

## Associations: Blood metabolites
```{r message=F, warning=F, results='asis'}
summary(arsenal::tableby(group ~ citrate + succinate + kwt(fumarate, "Nmiss", "median", "q1q3", "range") + malate, data = pt_md_tca, total = F))
```

#### Associate GBM width with blood metabolites

```{r message=F, warning=F}
## Log GBM width, and group the two groups
metabo_sc(data = pt_md_tca, gene = "gbm_thick_artmean", 
          transcripts = blood_metab_tca,
          gene_name = "GBM width")
```

#### Associate global k2 with blood metabolites
```{r, warning=F}
metabo_sc(data = pt_md_tca, gene = "avg_c_k2", 
          transcripts = blood_metab_tca,
          gene_name = "Cortex k2")
```

#### Associate voxelwise k2 with blood metabolites
```{r, warning=F, message = F}
metabo_sc(data = pt_md_tca, gene = "avg_c_k2_wo_cyst_vw", 
          transcripts = blood_metab_tca,
          gene_name = "Voxel-wise Cortex k2")
```

#### Associate insulin sensitivity with blood metabolites
```{r, warning=F, message = F}
metabo_sc(data = pt_md_tca, gene = "p2_raw_m", 
          transcripts = blood_metab_tca,
          gene_name = "M-value")
```

# Correlations
## Spatial metabolomics and transcripts
```{r, warning=F}
source("/home/yejichoi/Documents/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/correlation_function.R")
for (i in 1:length(genes_subset)) {
  dict[1, genes_subset[i]] <- genes_subset[i]
}
correlation_table_minimal(data = pt_md_tca,
                   relevant_vars = c(spatial_metab_tca, genes_subset),
                   n_cols = length(spatial_metab_tca),
                   dict = dict)
```
## Blood metabolites and transcripts
```{r}
correlation_table_minimal(data = pt_md_tca,
                   relevant_vars = c(blood_metab_tca, genes_subset),
                   n_cols = length(blood_metab_tca),
                   dict = dict)
```
## Blood metabolites and spatial metabolomics
```{r}
correlation_table_minimal(data = pt_md_tca,
                   relevant_vars = c(blood_metab_tca, spatial_metab_tca),
                   n_cols = length(blood_metab_tca),
                   dict = dict)
```
## scRNA and clinical data
### T1D and LC
```{r}
correlation_table_minimal(data = pt_md_tca,
                   relevant_vars = c("gbm_thick_artmean",
                                     "avg_c_k2",
                                     "avg_c_k2_wo_cyst_vw",
                                     "p2_raw_m",
                                     "hba1c",
                                     genes_subset),
                   n_cols = 5,
                   dict = dict)
```
### T1D only
```{r}
correlation_table_minimal(data = subset(pt_md_tca, group == "Type 1 Diabetes"),
                   relevant_vars = c("gbm_thick_artmean",
                                     "avg_c_k2",
                                     "avg_c_k2_wo_cyst_vw",
                                     "p2_raw_m",
                                     "hba1c",
                                     genes_subset),
                   n_cols = 5,
                   dict = dict)
```

## Spatial metabolomics and clinical data
### T1D and LC
```{r}
correlation_table_minimal(data = pt_md_tca,
                   relevant_vars = c("gbm_thick_artmean",
                                     "avg_c_k2",
                                     "avg_c_k2_wo_cyst_vw",
                                     "p2_raw_m",
                                     "hba1c",
                                     spatial_metab_tca),
                   n_cols = 5,
                   dict = dict)
```
## T1D only
```{r}
correlation_table_minimal(data = subset(pt_md_tca, group == "Type 1 Diabetes"),
                   relevant_vars = c("gbm_thick_artmean",
                                     "avg_c_k2",
                                     "avg_c_k2_wo_cyst_vw",
                                     "p2_raw_m",
                                     "hba1c",
                                     spatial_metab_tca),
                   n_cols = 5,
                   dict = dict)
```
# Pathway activity scores
## Krebs cycle pathway activity score
```{r results='asis'}
gsva_result <- analyse_sc_clusters(so)
pathways_full <- gsva_result@results$Seurat$pathways 
pathways_tca <- pathways_full %>% filter(grepl("tca|kreb|citric acid", Name, ignore.case = T))
pathways_ir <- pathways_full %>% filter(grepl("insulin|mitochon|fatty acid ox", Name, ignore.case = T))

genesets <- msigdbr::msigdbr(subcategory = "CP:REACTOME") %>%
  filter(gs_exact_source %in% pathways_tca$Pathway)
pathway_list <- split(
  genesets$gene_symbol,
  genesets$gs_name
)

mapped_df <- pt_md %>% data.table::transpose(make.names = "michigan_id")

gene_means <- rowMeans(mapped_df)
mapped_df <- mapped_df %>%
  dplyr::mutate(gene_means) %>%
  arrange(desc(gene_means)) %>%
  dplyr::select(-gene_means) %>%
  as.matrix()
rownames(mapped_df) <- all.genes
gsva_results <- gsva(
  mapped_df,
  pathway_list,
  method = "ssgsea",
  verbose = F
) %>% t() %>% as.data.frame() %>%
  rownames_to_column(var = "record_id")

gsva_annotated <- gsva_results %>%
  left_join(dat)

summary(arsenal::tableby(group ~ REACTOME_CITRIC_ACID_CYCLE_TCA_CYCLE +
                   REACTOME_PYRUVATE_METABOLISM_AND_CITRIC_ACID_TCA_CYCLE +
                   REACTOME_THE_CITRIC_ACID_TCA_CYCLE_AND_RESPIRATORY_ELECTRON_TRANSPORT,
                 data = gsva_annotated, total = F))

## Insulin resistance
genesets_ir <- msigdbr::msigdbr(subcategory = "CP:REACTOME") %>%
  filter(gs_exact_source %in% pathways_ir$Pathway)
pathway_list_ir <- split(
  genesets_ir$gene_symbol,
  genesets_ir$gs_name
)

gsva_results <- gsva(
  mapped_df,
  pathway_list_ir,
  method = "ssgsea",
  verbose = F
) %>% t() %>% as.data.frame() %>%
  rownames_to_column(var = "record_id")

gsva_ir_annotated <- gsva_results %>%
  left_join(dat) %>%
  dplyr::select(group, starts_with("REACTOME"))

summary(arsenal::tableby(group ~ .,
                 data = gsva_ir_annotated, total = F))

## All pathways
genesets_full <- msigdbr::msigdbr(subcategory = "CP:REACTOME")
pathway_list_full <- split(
  genesets_full$gene_symbol,
  genesets_full$gs_name
)

gsva_results_full <- gsva(
  mapped_df,
  pathway_list_full,
  method = "ssgsea",
  verbose = F
) %>% t() %>% as.data.frame() %>%
  rownames_to_column(var = "record_id")

gsva_full_annotated <- gsva_results_full %>%
  left_join(dat) %>%
  dplyr::select(group, starts_with("REACTOME")) %>%
  dplyr::summarise(across(.cols = where(is.numeric),.fns = mean), .by = group) %>%
  t()
colnames(gsva_full_annotated) <- c("T1D", "HC")

gsva_full_annotated <- data.frame(gsva_full_annotated) %>%
  filter(T1D != "Type 1 Diabetes") %>%
  dplyr::mutate(delta = as.numeric(T1D) - as.numeric(HC),
         T1D = as.numeric(T1D),
         HC = as.numeric(HC)) 

gsva_full_annotated <- gsva_full_annotated[order(gsva_full_annotated$delta), , drop = F]
kable(head(gsva_full_annotated, n = 10), caption = "Top negative delta (Lower expression in T1D)")
gsva_full_annotated <- gsva_full_annotated[order(-gsva_full_annotated$delta), , drop = F]
kable(head(gsva_full_annotated, n = 10), caption = "Top positive delta (Higher expression in T1D)")
```