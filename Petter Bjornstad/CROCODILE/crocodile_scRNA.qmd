---
title: "CROCODILE scRNAseq"
author: "Laura Pyle, Tim Vigers & Ye Ji Choi"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r libraries}
#| include: false
library(Seurat)
library(future)
library(colorspace)
library(patchwork)
```

```{r scRNA data setup}
#| include: false
# Parallel processing
plan(multicore, workers = 16)
options(future.globals.maxSize=2e9)
# Import
so <- readRDS("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/scRNA/data_clean/seurat_data_no_computations.RDS")
# CROCODILE only
so <- so[, grepl("CRC", so$michigan_id)]
# Exclude control with IgA
so <- subset(so, T2D_HC_Phil != "HC_igA")
so$Group <- so$T2D_HC_Phil
# Normalize and scale
so <- NormalizeData(so)
so <- ScaleData(so)
# PCA
so <- RunPCA(so, features = VariableFeatures(object = so))
# Cluster cells
so <- FindNeighbors(so)
so <- FindClusters(so)
# Perform UMAP and tSNE
so <- RunUMAP(so, dims = 1:30)
# so = RunTSNE(so,dim.embed = 3)
# General cell types as identifiers
so$generaltype <- sub("_.*", "", so$LR_clusters)
Idents(so) <- so$LR_clusters
# Get genes of interest (TCA cycle)
genes <- c(
  "ACO1", "ACO2", "IDH1", "IDH2", "IDH3A", "IDH3B", "IDH3G", "OGDH", "OGDHL",
  "SUCLA2", "SUCLG1", "SUCLG2", "SDHA", "SDHB", "SDHC", "SDHD", "FH", "MDH1",
  "MDH2"
)
genes_subset <- c("ACO1", "IDH1", "SUCLG1")
```

# UMAP

## By group

```{r}
# Testing color combos
gb_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00203FFF','#ADEFD1FF'))
pp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#5F4B8BFF','#E69A8DFF'))
bp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00539CFF','#EEA47FFF'))
pg_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#6E6E6DFF','#FAD0C9FF'))
by_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00539CFF','#FFD662FF'))
gp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#80C4B7','#EDCBD2'))
# Remove title
umap = gp_umap + theme(plot.title = element_blank())
umap
# Save image
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/UMAP_Group_1200x900.jpeg",
       plot = umap,scale = 3,
       width = 1200,height = 900,units = "px")
```

## By cell type

```{r}
Idents(so) = so$generaltype
order = sort(as.character(unique(Idents(so))),decreasing = T)
order = c(order[-which(order=="PT")], order[which(order=="PT")])
p = DimPlot(so,
  reduction = "umap",
  order = order
) + scale_color_discrete_qualitative(palette = "Pastel 1")
p
# Save image
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/UMAP_Cell_Type_1200x900.jpeg",plot = p,scale = 3,
       width = 1200,height = 900,units = "px")
```

## By group and feature

```{r results='asis'}
invisible(lapply(genes, function(g) {
  cat("\n")
  cat("###", g)
  cat("\n")
  p = FeaturePlot(so,
    features = g, split.by = "Group", order = T,
    cols = RColorBrewer::brewer.pal(3, "YlGnBu")
  ) + theme(legend.position = "right")
  print(p)
  cat("\n")
  # Save
  ggsave(filename = paste0("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Gene specific/UMAPs/UMAP_",g,"_1600x900.jpeg"),plot = p,scale = 3,
       width = 1600,height = 900,units = "px")
}))
```

# Violin plots

## In PT cells

```{r}
invisible(lapply(genes, function(g) {
  cat("\n")
  cat("###", g)
  cat("\n")
  d = VlnPlot(so, features = g, group.by = "Group", idents = "PT") 
  d = d$data
  p = ggplot(d,aes(x=ident,y = !!sym(g),fill=ident))+geom_point()+geom_violin()+theme_bw()+theme(legend.title = element_blank(),axis.title.x = element_blank())+ ylab(paste0(g," in  PT Cells"))
  print(p)
  cat("\n")
  # Save
  ggsave(filename = paste0("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Gene specific/Violins/UMAP_",g,"_1200x900.jpeg"),plot = p,scale = 3,
       width = 1200,height = 900,units = "px")
}))
```

# Ridge plots

## In PT cells

```{r}
#| message: false
rp = RidgePlot(so, features = genes, group.by = "Group", idents = "PT")
rp
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Ridge_Group_1920x1080.jpeg",
       plot = rp,scale = 3,
       width = 1920,height = 1080,units = "px")
```

# Dot plots

## All cells

```{r}
dp = DotPlot(so,
  features = genes, scale = T,scale.by= "size",dot.scale = 10
)
dp
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Dot_All_1600x900.jpeg",
       plot = dp,scale = 3,
       width = 1600,height = 900,units = "px")
```

## PT cells only

```{r}
dp1 = DotPlot(so,
  features = genes[1:5],idents = "PT", group.by = "Group",
  scale = F,dot.scale = 20
)
dp2 = DotPlot(so,
  features = genes[6:10],idents = "PT", group.by = "Group",
  scale = F,dot.scale = 20
)
dp3 = DotPlot(so,
  features = genes[11:15],idents = "PT", group.by = "Group",
  scale = F,dot.scale = 20
)
dp4 = DotPlot(so,
  features = genes[16:19],idents = "PT", group.by = "Group",
  scale = F,dot.scale = 20
)
dp =(dp1 + dp2) / (dp3 + dp4)
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Dot_PT_cells_1920x1080.jpeg",
       plot = dp,scale = 3,
       width = 1920,height = 1080,units = "px")
```

# Differential expression

In the table below, HC are the reference group.

```{r}
m = FindMarkers(so,features = genes,group.by = "Group",ident.1 = "HC", 
                subset.ident = "PT",verbose = F,logfc.threshold=0)
m = m %>% select(avg_log2FC,pct.1,pct.2,p_val,p_val_adj) %>% arrange(p_val)
knitr::kable(m,digits = 3)
```
