---
title: "CROCODILE scRNAseq"
author: "Laura Pyle, Tim Vigers & Ye Ji Choi"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r libraries}
#| include: false
library(Seurat)
library(future)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggtree)
```

```{r scRNA data setup}
#| include: false
# Parallel processing
plan(multicore, workers = 16)
options(future.globals.maxSize=2e9)
# Import
so <- readRDS("/home/yejichoi/UCD/Petter Bjornstad/scRNA/data_clean/seurat_data_no_computations.RDS")
# CROCODILE only
so <- so[, grepl("CRC", so$michigan_id)]
# Exclude control with IgA
so <- subset(so, T2D_HC_Phil != "HC_igA")
so$Group <- so$T2D_HC_Phil
# Normalize and scale
so <- NormalizeData(so)
so <- ScaleData(so)
# PCA
so <- RunPCA(so, features = VariableFeatures(object = so))
# ElbowPlot(so)
# Cluster cells
so <- FindNeighbors(so)
so <- FindClusters(so)
# Perform UMAP and tSNE
so <- RunUMAP(so, dims = 1:30)
# so = RunTSNE(so,dim.embed = 3)
# General cell types as identifiers
so$generaltype <- sub("_.*", "", so$LR_clusters)
Idents(so) <- so$LR_clusters
# Get genes_subset of interest (TCA cycle)
genes <- c(
  "ACO1", "ACO2", "IDH1", "IDH2", "IDH3A", "IDH3B", "IDH3G", "OGDH", "OGDHL",
  "SUCLA2", "SUCLG1", "SUCLG2", "SDHA", "SDHB", "SDHC", "SDHD", "FH", "MDH1",
  "MDH2", "FAS", "CS"
)
genes = sort(genes)
all.genes = rownames(so)
```


# Differential expression

In the table below, HC are group 1 and T1D are group 2. Positive values indicate that the gene is more highly expressed in the first group (HC).

```{r}
m = FindMarkers(so,features = genes,group.by = "Group",ident.1 = "HC", 
                ident.2 = "T1D",subset.ident = "PT",verbose = F,logfc.threshold=0)
m$p_val_adj = p.adjust(m$p_val,method = "bonferroni")
m = m %>% select(avg_log2FC,pct.1,pct.2,p_val,p_val_adj) %>% arrange(p_val)
knitr::kable(m,digits = 3)
# Plots for significant genes
genes_subset = rownames(m)[m$p_val_adj <=0.05]
```

# UMAP

## By group

```{r}
# Testing color combos
gb_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00203FFF','#ADEFD1FF'))
pp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#5F4B8BFF','#E69A8DFF'))
bp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00539CFF','#EEA47FFF'))
pg_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#6E6E6DFF','#FAD0C9FF'))
by_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#00539CFF','#FFD662FF'))
gp_umap = DimPlot(so, reduction = "umap",group.by = "Group") + 
  scale_color_manual(values = c('#80C4B7','#EDCBD2'))
# Remove title
umap = gp_umap + theme(plot.title = element_blank())
umap
# Save image
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/UMAP_Group_1200x900.jpeg",
       plot = umap,scale = 3,width = 1200,height = 900,units = "px")
```

## By cell type (general)

```{r}
Idents(so) = so$generaltype
order = sort(as.character(unique(Idents(so))),decreasing = T)
order = c(order[-which(order=="PT")], order[which(order=="PT")])
p = DimPlot(so,
  reduction = "umap",
  order = order
) + scale_color_discrete_qualitative(palette = "Pastel 1")
p
# Save image
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/UMAP_Cell_Type_1200x900.jpeg",
       plot = p,scale = 3,width = 1200,height = 900,units = "px")
```
## By cell type

```{r}
Idents(so) = so$celltype
order = sort(as.character(unique(Idents(so))),decreasing = T)
order = c(order[-which(order=="PT")], order[which(order=="PT")])
p = DimPlot(so,
  reduction = "umap",
  order = order,
  label = T
) + scale_color_discrete_qualitative(palette = "Pastel 1")
p
# Save image
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/UMAP_Cell_Type_1200x900.jpeg",
       plot = p,scale = 3,width = 1200,height = 900,units = "px")
```
## By group and feature

```{r results='asis'}
invisible(lapply(genes, function(g) {
  cat("\n")
  cat("###", g)
  cat("\n")
  p = FeaturePlot(so,
    features = g, split.by = "Group", order = T,
    cols = RColorBrewer::brewer.pal(3, "YlGnBu")
  ) + theme(legend.position = "right")
  print(p)
  cat("\n")
  # Save
  ggsave(filename = paste0("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Gene specific/UMAPs/UMAP_",g,"_1600x900.jpeg"),plot = p,scale = 3,
       width = 1600,height = 900,units = "px")
}))
```

# Violin plots

## Split violin plot function
```{r}
GeomSplitViolin <- ggproto(
  "GeomSplitViolin", 
  GeomViolin, 
  draw_group = function(self, data, ..., draw_quantiles = NULL) {
    data <- transform(data, 
                      xminv = x - violinwidth * (x - xmin), 
                      xmaxv = x + violinwidth * (xmax - x))
    grp <- data[1,'group']
    newdata <- plyr::arrange(
      transform(data, x = if(grp%%2==1) xminv else xmaxv), 
      if(grp%%2==1) y else -y
    )
    newdata <- rbind(newdata[1, ], newdata, newdata[nrow(newdata), ], newdata[1, ])
    newdata[c(1,nrow(newdata)-1,nrow(newdata)), 'x'] <- round(newdata[1, 'x']) 
    if (length(draw_quantiles) > 0 & !scales::zero_range(range(data$y))) {
      stopifnot(all(draw_quantiles >= 0), all(draw_quantiles <= 1))
      quantiles <- ggplot2:::create_quantile_segment_frame(data, draw_quantiles)
      aesthetics <- data[rep(1, nrow(quantiles)), setdiff(names(data), c("x", "y")), drop = FALSE]
      aesthetics$alpha <- rep(1, nrow(quantiles))
      both <- cbind(quantiles, aesthetics)
      quantile_grob <- GeomPath$draw_panel(both, ...)
      ggplot2:::ggname("geom_split_violin", 
                       grid::grobTree(GeomPolygon$draw_panel(newdata, ...), quantile_grob))
    } else {
      ggplot2:::ggname("geom_split_violin", GeomPolygon$draw_panel(newdata, ...))
    }
  }
)

geom_split_violin <- function (mapping = NULL, 
                               data = NULL, 
                               stat = "ydensity", 
                               position = "identity", ..., 
                               draw_quantiles = NULL, 
                               trim = TRUE, 
                               scale = "area", 
                               na.rm = FALSE, 
                               show.legend = NA, 
                               inherit.aes = TRUE) {
  layer(data = data, 
        mapping = mapping, 
        stat = stat, 
        geom = GeomSplitViolin, 
        position = position, 
        show.legend = show.legend, 
        inherit.aes = inherit.aes, 
        params = list(trim = trim, 
                      scale = scale, 
                      draw_quantiles = draw_quantiles, 
                      na.rm = na.rm, ...)
  )
}
```

## In PT cells

```{r}
invisible(lapply(genes_subset, function(g) {
  cat("\n")
  cat("###", g)
  cat("\n")
  d = VlnPlot(so, features = g, split.by = "Group", idents = "PT", split.plot = T, pt.size = 0) 
  d = d$data
  p = ggplot(d,aes(x=ident,y = !!sym(g),fill=split))+
    geom_jitter(position = position_jitterdodge(jitter.width = 0.5, dodge.width = 0.9), size = 0.2, alpha = 0.3, show.legend = T, aes(color = split))+
    geom_split_violin(trim = T) +theme_bw()+theme(legend.title = element_blank(),axis.title.x = element_blank(), axis.text.x=element_blank())+ ylab(paste0(g," in  PT Cells")) +
    scale_fill_manual(values=c("#6B9080", "#fcbf49")) + scale_color_manual(values=c("#6B9080", "#fcbf49"))
  print(p)
  cat("\n")
  # Save
  ggsave(filename = paste0("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Gene specific/Violins/Violin_",g,"_1200x900.jpeg"),plot = p,scale = 3,
       width = 1200,height = 900,units = "px")
}))
```

# Ridge plots

## In PT cells

```{r}
#| message: false
rp = RidgePlot(so, features = genes_subset, group.by = "Group", idents = "PT")
rp
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Ridge_Group_1920x1080.jpeg",
       plot = rp,scale = 3,
       width = 1920,height = 1080,units = "px")
```

# Dot plots

## All cells

```{r}
dp = DotPlot(so,
  features = genes_subset, scale = T,scale.by= "size",dot.scale = 10
)
dp
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Dot_All_1600x900.jpeg",
       plot = dp,scale = 3,
       width = 1600,height = 900,units = "px")
```

## PT cells only

```{r}
dp2 = DotPlot(so,
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F,dot.scale = 20, cols = "RdYlBu"
)
dp =dp1 / dp2
ggsave(filename = "/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/Dot_PT_cells_1920x1080.jpeg",
       plot = dp,scale = 3,
       width = 1920,height = 1080,units = "px")
```
# Dot plot of PT subtypes combined
```{r}
pt.combined <- DotPlot(so,
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data 
pt.1 <- DotPlot(subset(so, celltype == "PT-1"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% mutate(pt.celltype = paste0("PT-1:",id))
pt.2 <- DotPlot(subset(so, celltype == "PT-2"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% mutate(pt.celltype = paste0("PT-2:",id))
pt.3 <- DotPlot(subset(so, celltype == "PT-3"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% mutate(pt.celltype = paste0("PT-3:",id))
pt.4 <- DotPlot(subset(so, celltype == "PT-4"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% mutate(pt.celltype = paste0("PT-4:",id))
pt.5 <- DotPlot(subset(so, celltype == "PT-5"),
  features = genes_subset,idents = "PT", group.by = "Group",
  scale = F, cols = "RdYlBu"
)$data %>% mutate(pt.celltype = paste0("PT-5:",id))

pt_dot <-rbind(pt.1, pt.2, pt.3, pt.4, pt.5)
pt_dot_123 <- rbind(pt.1, pt.2, pt.3)
pt_dot_45 <- rbind(pt.4, pt.5)

pt_dot %>% 
  ggplot(aes(x=features.plot, y = pt.celltype, color = avg.exp.scaled, size = pct.exp)) + 
  geom_point() +
  theme_bw() +
  scale_color_gradient2(low = "#8ecae6", mid = "#fcbf49", high = "#d90429", midpoint = 2) +
  scale_size(range = c(0,10)) +
  theme(panel.grid = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  labs(color = "Count (Log-scaled)",
       size = "Expression (%)") +
  geom_hline(yintercept = 2.5, size = .3, color = "gray") +
  geom_hline(yintercept = 4.5, size = .3, color = "gray") +
  geom_hline(yintercept = 6.5, size = .3, color = "gray") +
  geom_hline(yintercept = 8.5, size = .3, color = "gray")

pt.combined %>% 
  ggplot(aes(x=features.plot, y = id, color = avg.exp.scaled, size = pct.exp)) + 
  geom_point() +
  theme_bw() +
  scale_color_gradient2(low = "#8ecae6", mid = "#fcbf49", high = "#d90429", midpoint = 2) +
  scale_size(range = c(0,20)) +
  theme(panel.grid = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  labs(color = "Count (Log-scaled)",
       size = "Expression (%)")

pt_dot_123 %>% 
  ggplot(aes(x=features.plot, y = pt.celltype, color = avg.exp.scaled, size = pct.exp)) + 
  geom_point() +
  theme_bw() +
  scale_color_gradient2(low = "#8ecae6", mid = "#fcbf49", high = "#d90429", midpoint = 2) +
  scale_size(range = c(0,10)) +
  theme(panel.grid = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  labs(color = "Count (Log-scaled)",
       size = "Expression (%)")

pt_dot_45 %>% 
  ggplot(aes(x=features.plot, y = pt.celltype, color = avg.exp.scaled, size = pct.exp)) + 
  geom_point() +
  theme_bw() +
  scale_color_gradient2(low = "#8ecae6", mid = "#fcbf49", high = "#d90429", midpoint = 2) +
  scale_size(range = c(0,10)) +
  theme(panel.grid = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  labs(color = "Count (Log-scaled)",
       size = "Expression (%)")
```
