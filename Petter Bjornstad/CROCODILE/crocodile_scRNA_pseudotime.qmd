---
title: "CROCODILE Pseudotime"
author: "Ye Ji Choi"
date: "today"
date-format: long
execute: 
  echo: false
  warning: false
  messages: false
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r libraries}
#| include: false
library(Seurat)
library(future)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(table1)
library(GSVA)
library(Biobase)
library(ReactomeGSA)
library(GSEABase)
library(GSVAdata)
library(msigdbr)
library(kableExtra)
library(knitr)
library(slingshot); library(SingleCellExperiment)
library(RColorBrewer); library(scales)
library(viridis); library(UpSetR)
library(pheatmap)
library(fgsea); library(tradeSeq)
library(DescTools)
```

```{r data-setup, echo = F, message=F}
# Parallel processing
plan(multicore, workers = 16)
options(future.globals.maxSize=2e9)
so <- readRDS("/run/user/1023/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/scRNA/data_clean/seurat_data_CRC.RDS")
source("/home/yejichoi2/Documents/CHCO-Code/Petter Bjornstad/CROCODILE/crocodile_functions.R")
load("/run/user/1023/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/croc_data.RData")
dict <- read.csv("/run/user/1023/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Data Harmonization/data_dictionary_master.csv")
source("/home/yejichoi2/Documents/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/label_harmonized_function.R")

## Incorporate some clinical variables to SO
so_meta <- so@meta.data
dat <- dat %>% dplyr::rename("michigan_id" = record_id) %>%
  dplyr::mutate(gbm_thick_quartile = ntile(gbm_thick_artmean, 4),
                gbm_thick_quartile = case_when(!is.na(gbm_thick_quartile) ~ paste0("q", gbm_thick_quartile)),
                bmi_quartile = ntile(bmi, 4),
                bmi_quartile = case_when(!is.na(bmi_quartile) ~ paste0("q", bmi_quartile)),
                diabetes_duration_quartile = ntile(diabetes_duration, 4),
                diabetes_duration_quartile = case_when(!is.na(diabetes_duration_quartile) ~ paste0("q", diabetes_duration_quartile)),
                age_quartile = ntile(age, 4),
                age_quartile = case_when(!is.na(age_quartile) ~ paste0("q", age_quartile)),
                raw_m_quartile = ntile(p2_raw_m, 4),
                raw_m_quartile = case_when(!is.na(raw_m_quartile) ~ paste0("q", raw_m_quartile)),
                diabetes_duration_manual_cat = case_when(diabetes_duration < 5 ~ "<5",
                                                         diabetes_duration < 10 ~ "5-10",
                                                         diabetes_duration < 15 ~ "10-15",
                                                         diabetes_duration < 20 ~ "15-20",
                                                         diabetes_duration >= 20 ~ "20+",
                                                         T ~ "NA"),
                bmi_manual_cat = case_when(bmi < 20 ~ "<20",
                                           bmi < 25 ~ "20-25",
                                           bmi < 27 ~ "25-27",
                                           bmi >= 27 ~ "27+", 
                                           T ~ "NA")) 
dat$diabetes_duration_manual_cat <- factor(dat$diabetes_duration_manual_cat, 
                                           levels = c("<5", "5-10", "10-15", "15-20", "20+", "NA"))
dat$bmi_manual_cat <- factor(dat$bmi_manual_cat,
                             levels = c("<20", "20-25", "25-27", "27+", "NA"), 
                             exclude = NULL)

dat_subset <- dat %>%
  dplyr::select(michigan_id, gbm_thick_artmean, diabetes_duration, p2_raw_m, ends_with("quartile"), ends_with("manual_cat"))

so_meta <- left_join(so_meta, dat_subset)
so$gbm_thick_art_mean <- so_meta$gbm_thick_artmean
so$age <- so_meta$age
so$diabetes_duration <- so_meta$diabetes_duration
so$p2_raw_m <- so_meta$p2_raw_m
so$gbm_thick_quartile <- so_meta$gbm_thick_quartile
so$diabetes_duration <- so_meta$diabetes_duration
so$bmi_quartile <- so_meta$bmi_quartile
so$diabetes_duration_quartile <- so_meta$diabetes_duration_quartile
so$age_quartile <- so_meta$age_quartile
so$raw_m_quartile <- so_meta$raw_m_quartile
so$diabetes_duration_manual_cat <- so_meta$diabetes_duration_manual_cat
so$bmi_manual_cat <- so_meta$bmi_manual_cat

## Make SO into SCE object for pseudotime analysis
sce <- as.SingleCellExperiment(so, assay = "RNA")
```

```{r}
# function for de.markers
de.markers <- function(seurat_object, genes, group.by, id1, id2, celltype, extension){
  m = FindMarkers(seurat_object, features = genes,group.by = group.by,ident.1 = id1, 
                  ident.2 = id2, subset.ident = celltype,verbose = F, logfc.threshold=0.001,
                  min.pct = 0.001)
  m$p_val_adj = p.adjust(m$p_val,method = "bonferroni")
  m <- m %>% 
    rownames_to_column('gene') %>%
    arrange(p_val) %>%
    column_to_rownames('gene') %>%
    dplyr::select(avg_log2FC,pct.1,pct.2,p_val,p_val_adj) %>%
    filter(!is.na(p_val))
  
  genes_subset <- rownames(m)[m$p_val <= 0.05]

  if (length(genes_subset) > 0){
    assign(paste0("genes_subset", extension), genes_subset, envir = .GlobalEnv)
  }
  assign(paste0("m", extension), m, envir = .GlobalEnv)
  return(knitr::kable(m, digits = 3
                      ))
}

## Top 2000 genes
de.markers(so, NULL, "Group", id1 = "T1D", id2 = "HC", "PT", "_top")
m_top <- m_top %>% head(2000)
```

```{r echo = F}
n_HC <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & Group == "HC"))
n_T1D <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & Group == "T1D"))

# By PT subtypes (by celltype)
cellcount<- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  dplyr::group_by(Group, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(Group == "HC" ~ n_HC, Group == "T1D" ~ n_T1D),
         ratio = count / n) %>% ungroup() %>%
  group_by(celltype) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, Group, celltype) %>%
  ggplot(aes(x= celltype, y= proportion, fill = Group)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Group") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))

cellcount
```

# PT cells (PT-1 thru -5)

Removed outlier clusters that slingshot was overfitting.

```{r, echo = F}
so_PT <- subset(so, generaltype == "PT" & celltype != "PT_lowQuality")
so_PT <- NormalizeData(so_PT)
so_PT <- ScaleData(so_PT)
# ElbowPlot(so_PT)
so_PT <- RunPCA(so_PT, ncomponents = 10, features = VariableFeatures(object = so_PT))
so_PT <- FindNeighbors(so_PT)
so_PT <- FindClusters(so_PT)
so_PT <- RunUMAP(so_PT, dims = 1:30)
so_PT <- RunTSNE(so_PT, dimred = "UMAP")

DimPlot(object = so_PT, reduction = "umap")
DimPlot(object = so_PT, reduction = "umap", group.by = "Group")
DimPlot(object = so_PT, reduction = "umap", group.by = "celltype")
umap_keep <- rownames(as.data.frame(so_PT@reductions$umap@cell.embeddings) %>%
  filter(umap_1 < 5 | umap_2 > 0))

so_PT <- so_PT[, umap_keep]
DimPlot(object = so_PT, reduction = "umap")
DimPlot(object = so_PT, reduction = "umap", group.by = "Group")
DimPlot(object = so_PT, reduction = "umap", group.by = "celltype")
```

After visualizing UMAP by cell type clusters, we fit slingshot two ways: 
  i) setting start cluster as PT-3, ending cluster as PT-4 (PT-3 having the most "healthy" cells, PT-4 having the most "diseased" cells),
  ii) unsupervised.
  
The first method resulted in two trajectories (lineage 1: PT-3  PT-2  PT-5  PT-4; lineage 2: PT-3  PT-2  PT-1), and the second method also resulted in two trajectories (lineage 1: PT-4  PT-5  PT-2  PT-3; lineage 2: PT-4  PT-5  PT-2  PT-1).

Lineage 1 of the unsupervised method was the exact inverse of lineage 1 of the supervised method. Therefore, we moved forward with the initial method.

```{r echo = F}
# PT-3 to PT-4
sce_PT <- as.SingleCellExperiment(so_PT)
sce_PT <- slingshot(sce_PT, reducedDim = 'UMAP', clusterLabels = colData(sce_PT)$celltype,
                                   start.clus = 'PT-3', end.clus = 'PT-4')
shuffle <- sample(ncol(sce_PT))
plot(reducedDims(sce_PT)$UMAP[shuffle, ], asp = 1, pch = 16,
     xlab = "UMAP-1", ylab = "UMAP-2",
     col = hcl.colors(100, alpha = .5, palette = "PinkYl")[cut(sce_PT$slingPseudotime_1, breaks = 100)][shuffle])
lines(SlingshotDataSet(sce_PT), type = "lineages")
lines(SlingshotDataSet(sce_PT))
SlingshotDataSet(sce_PT)

sce_PT_unsupervised <- as.SingleCellExperiment(so_PT)
sce_PT_unsupervised <- slingshot(sce_PT, reducedDim = 'UMAP', clusterLabels = colData(sce_PT)$celltype)
shuffle <- sample(ncol(sce_PT_unsupervised))
plot(reducedDims(sce_PT_unsupervised)$UMAP[shuffle, ], asp = 1, pch = 16,
     xlab = "UMAP-1", ylab = "UMAP-2",
     col = hcl.colors(100, alpha = 0.5, palette = "PinkYl")[cut(sce_PT_unsupervised$slingPseudotime_1, breaks = 100)][shuffle])
lines(SlingshotDataSet(sce_PT_unsupervised), type = "lineages")
lines(SlingshotDataSet(sce_PT_unsupervised))
SlingshotDataSet(sce_PT_unsupervised)

plot_df <- as.data.frame(slingPseudotime(sce_PT)) %>%
  dplyr::mutate(Group = colData(sce_PT)$Group,
                gbm_thick_quartile = colData(sce_PT)$gbm_thick_quartile,
                bmi_quartile = colData(sce_PT)$bmi_quartile,
                bmi_manual_cat = colData(sce_PT)$bmi_manual_cat,
                diabetes_duration_quartile = colData(sce_PT)$diabetes_duration_quartile,
                diabetes_duration_manual_cat = colData(sce_PT)$diabetes_duration_manual_cat,
                age_quartile = colData(sce_PT)$age_quartile,
                raw_m_quartile = colData(sce_PT)$raw_m_quartile)
#lines(SlingshotDataSet(sce_PT))

# plot(reducedDims(sce_PT)$UMAP[shuffle, ], asp = 1, pch = 16,
#      xlab = "UMAP-1", ylab = "UMAP-2",
#      col = sce_PT$Group)
# 
# lines(SlingshotDataSet(sce_PT), type = "lineages")
# legend("topright", pch = 16, col = alpha(c("HC" = "#ffcb77", "T1D" = "#fe6d73"), 0.4), bty = "n", 
#        legend = levels(factor(colData(sce)$Group)))
# 
# plotUMAP(sce_PT, colour_by="pseudotime", point_alpha=0.3) +
#     geom_segment(data=grid.df, 
#         mapping=aes(x=start.1, y=start.2, xend=end.1, yend=end.2), 
#         arrow=arrow(length=unit(0.05, "inches"), type="closed"))
```

```{r echo = F}
# Function to plot all smooth after fitGAM
plot_smooth <- function(sce, gene, title = gene) {
  non_missing_cells <- (colData(sce)$tradeSeq$conditions != "NA")
  non_missing_cells <- as.data.frame(non_missing_cells) %>% 
    dplyr::mutate(non_missing_cells = case_when(non_missing_cells == T ~ 1))
  cnt <- assays(sce)$counts[gene, , drop=F]
  cnt <- as.data.frame(t(cnt))
  cnt <- cnt*non_missing_cells
  colnames(cnt) <- "exp"
  cnt <- cnt %>% filter(!is.na(exp))
  pseudotime <- (colData(sce)$crv$pseudotime.Lineage1 * non_missing_cells %>%
    filter(!is.na(non_missing_cells)))$non_missing_cells
  condition <- colData(sce)$tradeSeq$conditions
  
  if ("NA" %in% condition){
    condition <- condition[condition != "NA"]
  }
  
  ncondition <- length(unique(condition))
  
  if (ncondition == 2){
    colors = c("#007e5d",  "#ff8989")
  }
  if (ncondition == 3){
    colors = c("#ef767a", "#456990", "#49beaa")
  }
  if(ncondition == 4){
    colors = c("#003049", "#d62828", "#f77f00", "#fcbf49")
  }
  if(ncondition == 5){
    colors = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51")
  }
  
  cnt_smooth <- predictSmooth(sce, gene, nPoints=100) %>%
    filter(lineage == 1) %>% dplyr::select(-lineage)
  cnt_smooth <- cnt_smooth[, c("yhat", "time", "condition")]
  colnames(cnt_smooth) <- c("exp", "pseudotime", "condition")
  cnt_smooth <- cnt_smooth %>% filter(condition!="NA")
  
  p <- ggplot(NULL, aes(x=pseudotime, y=log1p(exp), color=condition)) + 
    geom_point(data=cnt, size=1, alpha = 0.3) +
    geom_line(data=cnt_smooth, linewidth=1.5) +
    labs(x = "Pseudotime",
         y = "Log(expression + 1)", 
         title = title,
         color = "Group") +
    theme_minimal() +
    theme(panel.border = element_blank(), panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
    scale_color_manual(values = colors)
  return(p)
}
```

## Trajectory inference
### By group
#### Differential progression (shown by density plot)

The density plots on the trajectory of both lineage 1 and 2 show later pseudotime values in the T1D group. The Kolmogorov-Smirnov test was used to assess whether the two groups of pseudotime values were derived from the same distribution. Both lineages resulted in highly significant tests, concluding that there are differences between the distrbutions of HC and T1D in both lineages.

```{r echo = F, warning = F, message=F}
DimPlot(object = so_PT, reduction = "umap", group.by = "Group")

# Lineage 1 density plot
ggdensity(plot_df, x = "Lineage1", fill = "Group",
          color = "Group", palette = c("#f08080", "#1282a2")) +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$Group == "T1D", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$Group == "HC", 1])

# Lineage 2 density plot
ggdensity(plot_df, x = "Lineage2", fill = "Group",
          color = "Group", palette = c("#f08080", "#1282a2")) +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$Group == "T1D", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$Group == "HC", 2])
```


#### Differential expression
##### FitGAM
```{r echo = F}
genes = unique(c(genes, oxy_phos_genes))
tca_genes_top <- genes[genes %in% row.names(m_top)]

sce_PT <- fitGAM(sce_PT, 
                 conditions = factor(colData(sce_PT)$Group), 
                 nknots = 5, 
                 genes = unique(c(rownames(m_top), genes)))
```

##### Association test

The association test was done to assess significant changes in gene expression as a function of pseudotime within each lineage. The null hypothesis of this test is that gene expression is not a function of time (i.e., testing whether the estimated smoothers are significantly varying as a function of pseudotime within each lineage). 


The top 2000 genes that were most differentially expressed between HC and T1D were included in the analysis. Genes involved in the TCA cycle and oxphos were also included regardless of DE. 

###### Lineage 1
```{r echo = F, results='asis'}
at <- associationTest(sce_PT, lineages = T)

# TCA/oxphos HC lineage 1 genes
at_hc_tca1 <- subset(at, rownames(at) %in% genes)
at_hc_tca1 <- rownames(at_hc_tca1)[at_hc_tca1$pvalue_lineage1_conditionHC <= 0.05]
at_hc_tca1 <- at_hc_tca1[!is.na(at_hc_tca1)]
length(at_hc_tca1)
kable(head(arrange(at, by = pvalue_lineage1_conditionHC), n = 10))

# TCA/oxphos T1D lineage 1 genes
at_t1d_tca1 <- subset(at, rownames(at) %in% genes)
at_t1d_tca1 <- rownames(at_t1d_tca1)[at_t1d_tca1$pvalue_lineage1_conditionT1D <= 0.05]
at_t1d_tca1 <- at_t1d_tca1[!is.na(at_t1d_tca1)]
length(at_t1d_tca1)
kable(head(arrange(at, by = pvalue_lineage1_conditionT1D), n = 10))
UpSetR::upset(fromList(list(HC_1 = at_hc_tca1, T1D_1 = at_t1d_tca1)))

# significant HC lineage 1 genes
at_hc1 <- rownames(at)[at$pvalue_lineage1_conditionHC <= 0.05]
at_hc1 <- at_hc1[!is.na(at_hc1)]
length(at_hc1)
kable(head(arrange(at, by = pvalue_lineage1_conditionHC), n = 10))

# significant T1D lineage 1 genes
at_t1d1 <- rownames(at)[at$pvalue_lineage1_conditionT1D <= 0.05]
at_t1d1 <- at_t1d1[!is.na(at_t1d1)]
length(at_t1d1)
kable(head(arrange(at, by = pvalue_lineage1_conditionT1D), n = 10))
UpSetR::upset(fromList(list(HC_1 = at_hc1, T1D_1 = at_t1d1)))
```

###### Lineage 2
```{r echo = F, results='asis'}
# TCA/oxphos HC lineage 2 genes
at_hc_tca2 <- subset(at, rownames(at) %in% genes)
at_hc_tca2 <- rownames(at_hc_tca2)[at_hc_tca2$pvalue_lineage2_conditionHC <= 0.05]
at_hc_tca2 <- at_hc_tca2[!is.na(at_hc_tca2)]
length(at_hc_tca2)
at_hc_tca2

# TCA/oxphos T1D lineage 2 genes
at_t1d_tca2 <- subset(at, rownames(at) %in% genes)
at_t1d_tca2 <- rownames(at_t1d_tca2)[at_t1d_tca2$pvalue_lineage2_conditionT1D <= 0.05]
at_t1d_tca2 <- at_t1d_tca2[!is.na(at_t1d_tca2)]
length(at_t1d_tca2)
at_t1d_tca2
UpSetR::upset(fromList(list(HC_2 = at_hc_tca2, T1D_2 = at_t1d_tca2)))

# significant HC lineage 2 genes
at_hc2 <- rownames(at)[at$pvalue_lineage2_conditionHC <= 0.05]
at_hc2 <- at_hc2[!is.na(at_hc2)]
length(at_hc2)
at_hc2

# significant T2D lineage 2 genes
at_t1d2 <- rownames(at)[at$pvalue_lineage2_conditionT1D <= 0.05]
at_t1d2 <- at_t1d2[!is.na(at_t1d2)]
length(at_t1d2)
at_t1d2
UpSetR::upset(fromList(list(HC_2 = at_hc2, T1D_2 = at_t1d2)))
```

##### Condition test

```{r echo = F}
# Conditioned by group; plots for each transcript
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT, genes[i])
  gene_expression <- plotGeneCount(sce_PT, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

```{r echo = F}
# conditions test
ct <- conditionTest(sce_PT, pairwise = T, lineages = T)
```

###### Lineage 1

```{r echo = F}
subset(ct, rownames(ct) %in% genes)
sum(ct$pvalue_lineage1 <= 0.05, na.rm = TRUE)
conditionGenes1 <- rownames(ct)[ct$pvalue_lineage1 <= 0.05]
conditionGenes1 <- conditionGenes1[!is.na(conditionGenes1)]
length(conditionGenes1)
conditionGenes1
```

*Top 20 highly DE genes*

```{r echo = F}
de_genes1 <- rownames(head(arrange(ct, by = pvalue_lineage1), n = 20))

for (i in 1:length(de_genes1)){
  plot <- plot_smooth(sce_PT, de_genes1[i])
  gene_expression <- plotGeneCount(sce_PT, counts, gene = de_genes1[i],
                        title = de_genes1[i])
  print(plot + gene_expression)
}
```

```{r echo = F}
smooth <- predictSmooth(sce_PT, conditionGenes1, tidy = F, nPoints = 100)
smooth_scaled <- t(scale(t(smooth)))
breaksList = seq(-1.1, 2.5, by = 0.01)

# Lineage 1
## HC
heat_hc <- pheatmap(smooth_scaled[conditionGenes1, 1:100],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = F, show_colnames = FALSE, main = "HC", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

## T1D
heat_t1d <- pheatmap(smooth_scaled[conditionGenes1, 201:300],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = F, show_colnames = FALSE, main = "T1D", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

ggarrange(heat_hc[[4]], heat_t1d[[4]])
```

```{r echo = F}
conditionGenes1 <- genes[genes %in% conditionGenes1]
smooth <- predictSmooth(sce_PT, conditionGenes1, tidy = F, nPoints = 100)
smooth_scaled <- t(scale(t(smooth)))
breaksList = seq(-1.1, 2.5, by = 0.01)

# Lineage 1
## HC
heat_hc <- pheatmap(smooth_scaled[conditionGenes1, 1:100],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = TRUE, show_colnames = FALSE, main = "HC", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

## T1D
heat_t1d <- pheatmap(smooth_scaled[conditionGenes1, 201:300],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = TRUE, show_colnames = FALSE, main = "T1D", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

ggarrange(heat_hc[[4]], heat_t1d[[4]])
```

###### Lineage 2
```{r echo = F}
sum(ct$pvalue_lineage2 <= 0.05, na.rm = TRUE)
conditionGenes2 <- rownames(ct)[ct$pvalue_lineage2 <= 0.05]
conditionGenes2 <- conditionGenes2[!is.na(conditionGenes2)]
conditionGenes2
#conditionGenes2 <- genes[genes %in% conditionGenes2]
```

```{r echo = F}
smooth <- predictSmooth(sce_PT, conditionGenes2, tidy = F, nPoints = 100)
smooth_scaled <- t(scale(t(smooth)))
breaksList = seq(-1.1, 5, by = 0.01)

# Lineage 2
## Pooled

## HC
heat_hc2 <- pheatmap(smooth_scaled[conditionGenes2, 101:200],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = TRUE, show_colnames = FALSE, main = "HC", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

## T1D
heat_t1d2 <- pheatmap(smooth_scaled[conditionGenes2, 301:400],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = TRUE, show_colnames = FALSE, main = "T1D", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

ggarrange(heat_hc2[[4]], heat_t1d2[[4]])
```

#### Gene set enrichment analysis
```{r echo = F, results='asis'}
## C2 category is according to canonical pathways: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4707969/pdf/nihms-743907.pdf
geneSets <- msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP:KEGG")
### filter background to only include genes that we assessed
geneSets$gene_symbol <- toupper(geneSets$gene_symbol)
geneSets <- geneSets[geneSets$gene_symbol %in% names(sce_PT),]
m_list <- geneSets %>% split(x = .$gene_symbol, f = .$gs_name)
stats <- at$pvalue_lineage1_conditionT1D
names(stats) <- rownames(at)
eaRes <- fgsea(pathways = m_list, stats = na.omit(stats))
ooEA <- order(eaRes$pval, decreasing = FALSE)
kable(head(eaRes[ooEA, 1:3], n = 20))

statsCond <- ct$pvalue_lineage1
names(statsCond) <- rownames(ct)
eaRes <- fgsea(pathways = m_list, stats = na.omit(statsCond))
ooEA <- order(eaRes$pval, decreasing = FALSE)
kable(head(eaRes[ooEA, 1:3], n = 20))
```


##### Correlations with Pseudotime

```{r label-setup, echo = F}
source("/home/yejichoi/Documents/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/correlation_function.R")
for (gene_value in genes) {
  dict[[gene_value]] <- gene_value
}
```

```{r warning=F, message=F}
# transform to df to plot and calculate weighted means of pseudotime
sce_PT_df <- as.data.frame(cbind(colData(sce_PT)[1:42], sce_PT$slingPseudotime_1))
sce_PT_df_weight <- sce_PT_df %>%
  dplyr::summarise(weight = n(), .by = c(michigan_id, celltype))
sce_PT_df_mean_weighted <- sce_PT_df %>%
  dplyr::summarise(mean.pseudotime = mean(sce_PT.slingPseudotime_1, na.rm = T), .by = c(michigan_id, celltype)) %>%
  left_join(sce_PT_df_weight) %>%
  dplyr::group_by(michigan_id) %>%
  dplyr::summarise(weighted_mean = sum(weight * mean.pseudotime, na.rm = T) / sum(weight, na.rm = T)) %>%
  ungroup() 
sce_PT_df_mean <- sce_PT_df %>%
  dplyr::summarise(mean.pseudotime = mean(sce_PT.slingPseudotime_1, na.rm = T), .by = c(michigan_id)) 

dat_mean_pseudotime <- dat %>%
  left_join(sce_PT_df_mean_weighted) %>%
  left_join(sce_PT_df_mean)

sce_PT_df_scaled <- scale(as.numeric(sce_PT_df$sce_PT.slingPseudotime_1)) 
sce_PT_df_scaled <- data.frame(pseudotime_scaled = sce_PT_df_scaled)
sce_PT_df <- cbind(sce_PT_df, sce_PT_df_scaled)
```

###### Pseudo-R^2
```{r echo = F}
library(lme4)
# GBM width
gbm_mod <- lmer(gbm_thick_art_mean ~ pseudotime_scaled + (1 | michigan_id), data = subset(sce_PT_df, Group == "T1D")) 

summary(gbm_mod)
PseudoR2(gbm_mod)


# Diabetes duration
dibetes_duration_mod <- glm(diabetes_duration ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(dibetes_duration_mod)
PseudoR2(dibetes_duration_mod)

# Age
age_mod <- glm(age ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(age_mod)
PseudoR2(age_mod)

# HbA1C
age_mod <- glm(hba1c ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(age_mod)
PseudoR2(age_mod)

# M-value
m_mod <- glm(p2_raw_m ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(m_mod)
PseudoR2(m_mod)

# BMI
bmi_mod <- glm(bmi ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(bmi_mod)
PseudoR2(bmi_mod)
```

###### Weighted means
```{r echo = F, warning = F, message = F}
# GBM width
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = log(gbm_thick_artmean), color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "GBM thickness",
       x = "Weighted-average pseudotime",
       y = "Log(GBM thickness)",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Diabetes duration
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = diabetes_duration, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Diabetes duration",
       x = "Weighted-average pseudotime",
       y = "Diabetes duration",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Age
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = age, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Age",
       x = "Weighted-average pseudotime",
       y = "Age",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# HbA1C
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = hba1c, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "HbA1c",
       x = "Weighted-average pseudotime",
       y = "HbA1c",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# M-value
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = p2_raw_m, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "M-value",
       x = "Weighted-average pseudotime",
       y = "M-value",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# BMI
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = bmi, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "BMI",
       x = "Weighted-average pseudotime",
       y = "BMI",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# k2
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = avg_c_k2, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Avg cortical k2",
       x = "Weighted-average pseudotime",
       y = "Avg cortical k2",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Pglo
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = glomerular_pressure, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "PGLO",
       x = "Weighted-average pseudotime",
       y = "PGLO",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))
```

```{r pseudotime-correlations-weighted-means, echo = F}
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Lean Control"),
                   relevant_vars = c("weighted_mean", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Type 1 Diabetes"),
                   relevant_vars = c("weighted_mean", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
correlation_table_minimal(data = dat_mean_pseudotime,
                   relevant_vars = c("weighted_mean", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
```

###### Raw (T1D only)
```{r echo = F, warning = F, message = F}
# GBM width
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = log(gbm_thick_art_mean), color = Group)) +
  geom_point(alpha = 0.1) +
  geom_smooth(se = T, method = "gam") +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "GBM thickness",
       x = "Pseudotime",
       y = "Log(GBM thickness)",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Diabetes duration
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = diabetes_duration, color = Group)) +
  geom_point(alpha = 0.1) +
  geom_smooth(se = T, method = "gam") +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Diabetes duration",
       x = "Pseudotime",
       y = "Diabetes duration",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Age
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = age, color = Group)) +
  geom_point(alpha = 0.1) +
  geom_smooth(se = T, method = "gam") +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Age",
       x = "Pseudotime",
       y = "Age",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# HbA1C
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = hba1c, color = Group)) +
  geom_point(alpha = 0.1) +
  geom_smooth(se = T, method = "gam") +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") + 
  labs(title = "HbA1c",
       x = "Pseudotime",
       y = "HbA1c",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# M-value
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = p2_raw_m, color = Group)) +
  geom_point(alpha = 0.1) +
  geom_smooth(se = T, method = "gam") +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "M-value",
       x = "Pseudotime",
       y = "M-value",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# BMI
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = bmi, color = Group)) +
  geom_point(alpha = 0.1) +
  geom_smooth(se = T, method = "gam") +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "BMI",
       x = "Pseudotime",
       y = "BMI",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

```

```{r pseudotime-correlations, echo = F}
correlation_table_minimal(data = subset(sce_PT_df, Group == "HC"),
                   relevant_vars = c("sce_PT.slingPseudotime_1", "gbm_thick_art_mean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi"),
                   n_cols = 1,
                   cor_method = "spearman")
correlation_table_minimal(data = subset(sce_PT_df, Group == "T1D"),
                   relevant_vars = c("sce_PT.slingPseudotime_1", "gbm_thick_art_mean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi"),
                   n_cols = 1,
                   cor_method = "spearman")
correlation_table_minimal(data = sce_PT_df,
                   relevant_vars = c("sce_PT.slingPseudotime_1", "gbm_thick_art_mean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi"),
                   n_cols = 1,
                   cor_method = "spearman")
```


###### Raw (colored by PT subtypes)
```{r echo = F, warning=F, message = F}
# GBM width
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = log(gbm_thick_art_mean), color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "GBM thickness",
       x = "Pseudotime",
       y = "Log(GBM thickness)",
       color = "Cell type") +
  theme_minimal() 

# Diabetes duration
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = diabetes_duration, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Diabetes duration",
       x = "Pseudotime",
       y = "Diabetes duration",
       color = "Cell type") +
  theme_minimal() 

# Age
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = age, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Age",
       x = "Pseudotime",
       y = "Age",
       color = "Cell type") +
  theme_minimal() 

# HbA1C
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = hba1c, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "HbA1c",
       x = "Pseudotime",
       y = "HbA1c",
       color = "Cell type") +
  theme_minimal() 

# M-value
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = p2_raw_m, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "M-value",
       x = "Pseudotime",
       y = "M-value",
       color = "Cell type") +
  theme_minimal() 

# BMI
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = bmi, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "BMI",
       x = "Pseudotime",
       y = "BMI",
       color = "Cell type") +
  theme_minimal() 
```


###### Mixed models
```{r}
library(lme4)
library(MuMIn)
# GBM width
gbm_mod <- lmer(gbm_thick_art_mean ~ sce_PT.slingPseudotime_1 + (1|michigan_id), data = sce_PT_df)
summary(gbm_mod)
r.squaredGLMM(gbm_mod)

# Diabetes duration
diabetes_duration_mod <- lmer(diabetes_duration ~ sce_PT.slingPseudotime_1 + 
                                (1|michigan_id), data = sce_PT_df)
summary(diabetes_duration_mod)
r.squaredGLMM(diabetes_duration_mod)

# Age
age_mod <- lmer(age ~ sce_PT.slingPseudotime_1 + 
                  (1|michigan_id), data = sce_PT_df)
summary(age_mod)
r.squaredGLMM(age_mod)

# HbA1C
hba1c_mod <- lmer(hba1c ~ sce_PT.slingPseudotime_1 + 
                    (1|michigan_id), data = sce_PT_df)
summary(hba1c_mod)
r.squaredGLMM(hba1c_mod)

# M-value
mvalue_mod <- lmer(p2_raw_m ~ sce_PT.slingPseudotime_1 + 
                     (1|michigan_id), data = sce_PT_df)
summary(mvalue_mod)
r.squaredGLMM(mvalue_mod)

# BMI
bmi_mod <- lmer(bmi ~ sce_PT.slingPseudotime_1 + 
                  (1|michigan_id), data = sce_PT_df)
summary(bmi_mod)
r.squaredGLMM(bmi_mod)

```

### By GBM width (quartiles)
```{r echo = F, warning = F, message=F}
sce_PT$gbm_thick_quartile[is.na(sce_PT$gbm_thick_quartile)] <- "NA"
sce_PT_gbm_thick_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$gbm_thick_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, gbm_thick_quartile!= "NA"), x = "Lineage1", fill = "gbm_thick_quartile",
          color = "gbm_thick_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, gbm_thick_quartile!= "NA"), x = "Lineage2", fill = "gbm_thick_quartile",
          color = "gbm_thick_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "gbm_thick_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_gbm_thick_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_gbm_thick_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By BMI (quartiles)
```{r echo = F, warning = F, message=F}
sce_PT$bmi_quartile[is.na(sce_PT$bmi_quartile)] <- "NA"
sce_PT_bmi_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$bmi_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, bmi_quartile!= "NA"), x = "Lineage1", fill = "bmi_quartile",
          color = "bmi_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, bmi_quartile!= "NA"), x = "Lineage2", fill = "bmi_quartile",
          color = "bmi_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "bmi_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_bmi_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_bmi_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By BMI (manual)
```{r echo = F, warning = F, message=F}
sce_PT$bmi_manual_cat[is.na(sce_PT$bmi_manual_cat)] <- "NA"
sce_PT_bmi_manual_cat <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$bmi_manual_cat), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, bmi_manual_cat!= "NA"), x = "Lineage1", fill = "bmi_manual_cat",
          color = "bmi_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, bmi_manual_cat!= "NA"), x = "Lineage2", fill = "bmi_manual_cat",
          color = "bmi_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "bmi_manual_cat")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_bmi_manual_cat, genes[i])
  gene_expression <- plotGeneCount(sce_PT_bmi_manual_cat, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By diabetes duration (quartile)
```{r echo = F, warning = F, message=F}
sce_PT$diabetes_duration_quartile[is.na(sce_PT$diabetes_duration_quartile)] <- "NA"
sce_PT_diabetes_duration_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$diabetes_duration_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, diabetes_duration_quartile!= "NA"), x = "Lineage1", fill = "diabetes_duration_quartile",
          color = "diabetes_duration_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, diabetes_duration_quartile!= "NA"), x = "Lineage2", fill = "diabetes_duration_quartile",
          color = "diabetes_duration_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "diabetes_duration_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_diabetes_duration_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_diabetes_duration_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By diabetes duration (manual)
```{r echo = F, warning = F, message=F}
sce_PT_diabetes_duration_manual_cat <- 
  fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$diabetes_duration_manual_cat), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, diabetes_duration_manual_cat!= "NA"), x = "Lineage1", fill = "diabetes_duration_manual_cat",
          color = "diabetes_duration_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, diabetes_duration_manual_cat!= "NA"), x = "Lineage2", fill = "diabetes_duration_manual_cat",
          color = "diabetes_duration_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "diabetes_duration_manual_cat")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_diabetes_duration_manual_cat, genes[i])
  gene_expression <- plotGeneCount(sce_PT_diabetes_duration_manual_cat, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By age (quartile)
```{r echo = F, warning = F, message=F}
sce_PT <- as.SingleCellExperiment(so_PT)
sce_PT <- slingshot(sce_PT, reducedDim = 'UMAP', clusterLabels = colData(sce_PT)$celltype,
                                   start.clus = 'PT-3', end.clus = 'PT-4')
sce_PT_age_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$age_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, age_quartile!= "NA"), x = "Lineage1", fill = "age_quartile",
          color = "age_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, age_quartile!= "NA"), x = "Lineage2", fill = "age_quartile",
          color = "age_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "age_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_age_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_age_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By M-value (quartile)
```{r echo = F, warning = F, message=F}
sce_PT$raw_m_quartile[is.na(sce_PT$raw_m_quartile)] <- "NA"
sce_PT_raw_m_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$raw_m_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, raw_m_quartile!= "NA"), x = "Lineage1", fill = "raw_m_quartile",
          color = "raw_m_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, raw_m_quartile!= "NA"), x = "Lineage2", fill = "raw_m_quartile",
          color = "raw_m_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "raw_m_quartile")

for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_raw_m_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_raw_m_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

# Pseudotime trajectory
(Muted output for now)
```{r subset-by-celltype, echo = F, eval = F}
# Get unique values of LR_clusters
unique_LR_clusters <- unique(so$LR_clusters)
unique_LR_clusters <- unique_LR_clusters[!(unique_LR_clusters %in% c("TAL_highUMI", "PT_lowQuality", "IC-A_lowQuality", "B"))]

# Initialize an empty list to store UMAP plots
umap_plots <- list()

# Loop through each unique value of LR_clusters and create UMAP for each cell type
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("so_", cluster_value)
  print(subset_name)
  assign(subset_name, subset(so, LR_clusters == cluster_value))
  assign(subset_name, NormalizeData(get(subset_name)))
  assign(subset_name, ScaleData(get(subset_name)))
  assign(subset_name, RunPCA(get(subset_name), features = VariableFeatures(object = get(subset_name))))
  assign(subset_name, FindNeighbors(get(subset_name)))
  assign(subset_name, FindClusters(get(subset_name)))
  if (dim(get(subset_name))[2] > 5000) {
    assign(subset_name, RunUMAP(get(subset_name), dims = 1:30))
    umap_plot <- DimPlot(object = get(subset_name), reduction = "umap")
    umap_plots[[length(umap_plots) + 1]] <- umap_plot
  }
  if (dim(get(subset_name))[2] <= 5000 && dim(get(subset_name))[2] > 1000) {
    assign(subset_name, RunUMAP(get(subset_name), dims = 1:4))
    umap_plot <- DimPlot(object = get(subset_name), reduction = "umap")
    umap_plots[[length(umap_plots) + 1]] <- umap_plot
  }
  if (dim(get(subset_name))[2] <= 1000 && dim(get(subset_name))[2] > 500) {
    assign(subset_name, RunUMAP(get(subset_name), dims = 1:5))
    umap_plot <- DimPlot(object = get(subset_name), reduction = "umap")
    umap_plots[[length(umap_plots) + 1]] <- umap_plot
  }
}

wrap_plots(umap_plots[1:4], nrow = 2)
wrap_plots(umap_plots[5:8], nrow = 2)
wrap_plots(umap_plots[9:12], nrow = 2)
wrap_plots(umap_plots[13:16], nrow = 2)
```

## By group
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_grp <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), slingshot(get(subset_name), reducedDim = 'UMAP', clusterLabels = colData(get(subset_name))$Group,
                                   start.clus = 'HC', end.clus = 'T1D'))
    results_grp[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_grp[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("HC" = "#ffcb77", "T1D" = "#fe6d73"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("HC" = "#ffcb77", "T1D" = "#fe6d73"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$Group)))

    results_grp[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$Group ==  "HC"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$Group ==  "T1D"]),
                     group = c(rep("HC", sum(colData(get(subset_name))$Group ==  "HC")),
                               rep("T1D", sum(colData(get(subset_name))$Group ==  "T1D")))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = group)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Group", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_grp[[subset_name]]$density_plot <- density_plot
      
    # Perform Kolmogorov-Smirnov test
    ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$Group == "HC"],
                         get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$Group == "T1D"])
    results_grp[[subset_name]]$ks_test <- ks_result
    
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_grp <- list()
pseudotime_list_grp <- list()

for (cluster_value in gsub("sce_","", names(results_grp))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_grp[[cluster_value]] <- results_grp[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_grp[[cluster_value]])
    pseudotime_list_grp[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_grp <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By GBM width (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_gbm_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$gbm_thick_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_gbm_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_gbm_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$gbm_thick_quartile)))
    results_gbm_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q4"]),
                     gbm_thick_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = gbm_thick_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "GBM thickness (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_gbm_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile == "q2"])
    # results_gbm_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_gbm_quartile <- list()
pseudotime_list_gbm_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_gbm_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_gbm_quartile[[cluster_value]] <- results_gbm_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_gbm_quartile[[cluster_value]])
    pseudotime_list_gbm_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_gbm_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By BMI (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_bmi_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$bmi_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_bmi_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_bmi_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$bmi_quartile)))
    results_bmi_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q4"]),
                     bmi_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = bmi_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "BMI (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_bmi_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_quartile == "q2"])
    # results_bmi_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_bmi_quartile <- list()
pseudotime_list_bmi_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_bmi_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_bmi_quartile[[cluster_value]] <- results_bmi_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_bmi_quartile[[cluster_value]])
    pseudotime_list_bmi_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_bmi_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By BMI (manually categorized)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_bmi_manual_cat <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$bmi_manual_cat,
                     start.clus = '<20', end.clus = '27+'))
    results_bmi_manual_cat[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_bmi_manual_cat[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("<20" = "#ffcb77", "20-25" = "#fe6d73",
                                            "25-27" = "skyblue" , "27+" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("<20" = "#ffcb77", "20-25" = "#fe6d73",
                                            "25-27" = "skyblue" , "27+" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$bmi_manual_cat)))
    results_bmi_manual_cat[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "<20"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "20-25"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "25-27"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "27+"]),
                     bmi_manual_cat = c(rep("<20", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "<20"])),
                                                      rep("20-25", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "20-25"])),
                                                      rep("25-27", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "25-27"])),
                                                      rep("27+", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "27+"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = bmi_manual_cat)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "BMI (manual)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_bmi_manual_cat[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat == "q2"])
    # results_diabetes_duration_manual_cat[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_bmi_manual_cat <- list()
pseudotime_list_bmi_manual_cat <- list()

for (cluster_value in gsub("sce_","", names(results_bmi_manual_cat))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_bmi_manual_cat[[cluster_value]] <- results_bmi_manual_cat[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_bmi_manual_cat[[cluster_value]])
    pseudotime_list_bmi_manual_cat[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_bmi_manual_cat <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By diabetes duration (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_diabetes_duration_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$diabetes_duration_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_diabetes_duration_quartile[[subset_name]]$sce <- get(subset_name)

    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_diabetes_duration_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$diabetes_duration_quartile)))
    results_diabetes_duration_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q4"]),
                     diabetes_duration_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = diabetes_duration_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Diabetes duration (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_diabetes_duration_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile == "q2"])
    # results_diabetes_duration_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_diabetes_duration_quartile <- list()
pseudotime_list_diabetes_duration_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_diabetes_duration_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_diabetes_duration_quartile[[cluster_value]] <- results_diabetes_duration_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_diabetes_duration_quartile[[cluster_value]])
    pseudotime_list_diabetes_duration_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_diabetes_duration_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By diabetes duration (manually categorized)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_diabetes_duration_manual_cat <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$diabetes_duration_manual_cat,
                     start.clus = '<5', end.clus = '20+'))
    results_diabetes_duration_manual_cat[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_diabetes_duration_manual_cat[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("<5" = "#ffcb77", "q2" = "5-10",
                                            "10-15" = "skyblue" , "15-20" = "pink",
                                            "20+" = "purple"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("<5" = "#ffcb77", "q2" = "5-10",
                                            "10-15" = "skyblue" , "15-20" = "pink",
                                            "20+" = "purple"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$diabetes_duration_manual_cat)))
    results_diabetes_duration_manual_cat[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "<5"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "5-10"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "10-15"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "15-20"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "20+"]),
                     diabetes_duration_manual_cat = c(rep("<5", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "<5"])),
                                                      rep("5-10", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "5-10"])),
                                                      rep("10-15", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "10-15"])),
                                                      rep("15-20", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "15-20"])),
                                                      rep("20+", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "20+"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = diabetes_duration_manual_cat)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Diabetes duration (manual)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_diabetes_duration_manual_cat[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat == "q2"])
    # results_diabetes_duration_manual_cat[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_diabetes_duration_manual_cat <- list()
pseudotime_list_diabetes_duration_manual_cat <- list()

for (cluster_value in gsub("sce_","", names(results_diabetes_duration_manual_cat))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_diabetes_duration_manual_cat[[cluster_value]] <- results_diabetes_duration_manual_cat[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_diabetes_duration_manual_cat[[cluster_value]])
    pseudotime_list_diabetes_duration_manual_cat[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_diabetes_duration_manual_cat <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By age (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_age_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$age_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_age_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_age_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$age_quartile)))
    results_age_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q4"]),
                     age_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = age_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Age (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_age_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$age_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$age_quartile == "q2"])
    # results_age_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_age_quartile <- list()
pseudotime_list_age_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_age_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_age_quartile[[cluster_value]] <- results_age_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_age_quartile[[cluster_value]])
    pseudotime_list_age_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_age_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By M-value (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_raw_m_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$raw_m_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_raw_m_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_raw_m_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$raw_m_quartile)))
    results_raw_m_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q4"]),
                     raw_m_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = raw_m_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "M-value (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_raw_m_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile == "q2"])
    # results_raw_m_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_raw_m_quartile <- list()
pseudotime_list_raw_m_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_raw_m_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_raw_m_quartile[[cluster_value]] <- results_raw_m_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_raw_m_quartile[[cluster_value]])
    pseudotime_list_raw_m_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_raw_m_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```




# Differential expression
## Trajectory by group (HC -> T1D)
```{r fit-gam-grp, echo = F, eval=F}
# plotGeneCount(sce_PT, counts, gene = genes[[1]])

for (i in 1:length(results_grp)) {
  grp_celltypes <- gsub("sce_", "", names(results_grp))
  sce_object <- results_grp[[i]]$sce
  assign(paste0("results_grp$sce_", grp_celltypes[i], "$sce"), 
         fitGAM(sce_object, 
                          conditions = factor(colData(sce_object)$Group), 
                          nknots = 5, 
                          genes = c(genes, oxy_phos_genes)))
}

plotSmoothers(results_grp$sce_EC$sce, assays(results_grp$sce_EC$sce)$counts, gene = "ACO1", alpha = 1, border = TRUE) + ggtitle("ACO1")
plotSmoothers(results_grp$sce_PC$sce, assays(results_grp$sce_PC$sce)$counts, gene = "ACO2", alpha = 1, border = TRUE) + ggtitle("ACO2")
plotSmoothers(results_grp$sce_DCT$sce, assays(results_grp$sce_DCT$sce)$counts, gene = "CS", alpha = 1, border = TRUE) + ggtitle("CS")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "FH", alpha = 1, border = TRUE) + ggtitle("FH")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH1", alpha = 1, border = TRUE) + ggtitle("IDH1")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH2", alpha = 1, border = TRUE) + ggtitle("IDH2")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH3A", alpha = 1, border = TRUE) + ggtitle("IDH3A")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH3B", alpha = 1, border = TRUE) + ggtitle("IDH3B")
```

## Trajectory by GBM width quartiles (q1 -> q4)
```{r, eval=F}
results_gbm_quartile$sce_PT$sce <- fitGAM(counts = results_gbm_quartile$sce_PT$sce,
              conditions = factor(colData(results_gbm_quartile$sce_PT$sce)$gbm_thick_quartile),
              nknots = 5,
              genes = c(genes, oxy_phos_genes))
```
## Trajectory by BMI quartiles (q1 -> q4)


## Trajectory by BMI manual (<20 -> 27+)


## Trajectory by diabetes duration quartiles (q1 -> q4)

## Trajectory by diabetes duration manual (<5 -> 20+)

## Trajectory by age quartiles (q1 -> q4)

## Trajectory by M-value quartiles (q1 -> q4)
