---
title: "CROCODILE Pseudotime"
author: "Ye Ji Choi"
date: "today"
date-format: long
execute: 
  echo: false
  warning: false
  messages: false
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r libraries, message = F}
#| include: false
library(hexbin)
library(Seurat)
library(future)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(table1)
library(Biobase)
library(ReactomeGSA)
library(GSEABase)
library(msigdbr)
library(kableExtra)
library(knitr)
library(slingshot); library(SingleCellExperiment)
library(RColorBrewer); library(scales)
library(viridis); library(UpSetR)
library(pheatmap)
library(fgsea); library(tradeSeq)
library(DescTools)
library(Totem)
library(dyndimred)
library(pushoverr)
set_pushover_user(user = "uv4fkwcjfp88sprou64rboojje4xvm")
set_pushover_app(token = "avi88qsjeunh4xmvz3mbgp2fzpmkey")
```

```{r data-setup, echo = F, message=F}
# Parallel processing
plan(multicore, workers = 16)
options(future.globals.maxSize=2e9)
so <- readRDS("/home/yejichoi2/Documents/Local data/seurat_data_CRC.RDS")
source("/home/yejichoi2/Documents/CHCO-Code/Petter Bjornstad/CROCODILE/crocodile_functions.R")
load("/run/user/1023/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/croc_data.RData")
dict <- read.csv("/run/user/1023/gvfs/smb-share:server=ucdenver.pvt,share=som/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Data Harmonization/data_dictionary_master.csv") %>%
  dplyr::select(variable_name, label)

dict <- setNames(data.frame(t(dict[ , - 1])), dict[ , 1])
dict <- dict %>%
  mutate(sce_PT.slingPseudotime_1 = "Pseudotime",
         gbm_thick_art_mean = "GBM thickness",
         p2_raw_m = "M-value",
         avg_c_k2 = "Cortical K2",
         bmi = "BMI",
         diabetes_duration = "Diabetes duration", 
         hba1c = "HbA1c")


source("/home/yejichoi2/Documents/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/label_harmonized_function.R")

## Incorporate some clinical variables to SO
so_meta <- so@meta.data
dat <- dat %>% dplyr::rename("michigan_id" = record_id) %>%
  dplyr::mutate(gbm_thick_quartile = ntile(gbm_thick_artmean, 4),
                gbm_thick_quartile = case_when(!is.na(gbm_thick_quartile) ~ paste0("q", gbm_thick_quartile)),
                bmi_quartile = ntile(bmi, 4),
                bmi_quartile = case_when(!is.na(bmi_quartile) ~ paste0("q", bmi_quartile)),
                diabetes_duration_quartile = ntile(diabetes_duration, 4),
                diabetes_duration_quartile = case_when(!is.na(diabetes_duration_quartile) ~ paste0("q", diabetes_duration_quartile)),
                age_quartile = ntile(age, 4),
                age_quartile = case_when(!is.na(age_quartile) ~ paste0("q", age_quartile)),
                raw_m_quartile = ntile(p2_raw_m, 4),
                raw_m_quartile = case_when(!is.na(raw_m_quartile) ~ paste0("q", raw_m_quartile)),
                diabetes_duration_manual_cat = case_when(diabetes_duration < 5 ~ "<5",
                                                         diabetes_duration < 10 ~ "5-10",
                                                         diabetes_duration < 15 ~ "10-15",
                                                         diabetes_duration < 20 ~ "15-20",
                                                         diabetes_duration >= 20 ~ "20+",
                                                         T ~ "NA"),
                bmi_manual_cat = case_when(bmi < 20 ~ "<20",
                                           bmi < 25 ~ "20-25",
                                           bmi < 27 ~ "25-27",
                                           bmi >= 27 ~ "27+", 
                                           T ~ "NA"),
                bmi_manual_cat2 = case_when(bmi < 18.5 ~ "<18.5",
                                           bmi < 25 ~ "18.5-24.9",
                                           bmi < 27.5 ~ "25-27.4",
                                           bmi >= 27.5 ~ "27.5+",
                                           T ~ "NA"),
                hba1c_manual_cat = case_when(hba1c < 7 ~ "<7%",
                                             hba1c < 8.5 ~ "7-8.5%",
                                             hba1c >=8.5 ~ "8.5%+"), 
                gbm_thick_tertile = ntile(gbm_thick_artmean, 3),
                gbm_thick_tertile = case_when(!is.na(gbm_thick_tertile) ~ paste0("t", gbm_thick_tertile)),
                bmi_tertile = ntile(bmi, 3),
                bmi_tertile = case_when(!is.na(bmi_tertile) ~ paste0("t", bmi_tertile)),
                diabetes_duration_tertile = ntile(diabetes_duration, 3),
                diabetes_duration_tertile = case_when(!is.na(diabetes_duration_tertile) ~ paste0("t", diabetes_duration_tertile)),
                age_tertile = ntile(age, 3),
                age_tertile = case_when(!is.na(age_tertile) ~ paste0("t", age_tertile)),
                raw_m_tertile = ntile(p2_raw_m, 3),
                raw_m_tertile = case_when(!is.na(raw_m_tertile) ~ paste0("t", raw_m_tertile)),
                lean_m_tertile = ntile(p2_raw_leanm, 3),
                lean_m_tertile = case_when(!is.na(lean_m_tertile) ~ paste0("t", lean_m_tertile)),
                hba1c_tertile = ntile(hba1c, 3),
                hba1c_tertile = case_when(!is.na(hba1c_tertile) ~ paste0("t", hba1c_tertile)),
                avg_c_k2_tertile = ntile(avg_c_k2, 3),
                avg_c_k2_tertile = case_when(!is.na(avg_c_k2_tertile) ~ paste0("t", avg_c_k2_tertile)))

dat$diabetes_duration_manual_cat <- factor(dat$diabetes_duration_manual_cat, 
                                           levels = c("<5", "5-10", "10-15", "15-20", "20+", "NA"))
dat$bmi_manual_cat <- factor(dat$bmi_manual_cat,
                             levels = c("<20", "20-25", "25-27", "27+", "NA"), 
                             exclude = NULL)
dat$bmi_manual_cat2 <- factor(dat$bmi_manual_cat2,
                             levels = c("<18.5","18.5-24.9","25-27.4",
                                        "27.5+", "NA"), 
                             exclude = NULL)
dat$hba1c_manual_cat <- factor(dat$hba1c_manual_cat,
                             levels = c("<7%", "7-8.5%", "8.5%+", "NA"), 
                             exclude = NULL)

dat_subset <- dat %>%
  dplyr::select(michigan_id, avg_c_k2, gbm_thick_artmean, diabetes_duration, p2_raw_m, ends_with("quartile"), ends_with("tertile"), ends_with("manual_cat"), bmi_manual_cat2,
                starts_with("pt_"), starts_with("cortex_"), starts_with("fractional_pt_"))

so_meta <- left_join(so_meta, dat_subset)

so$gbm_thick_art_mean <- so_meta$gbm_thick_artmean
so$age <- so_meta$age
so$p2_raw_m <- so_meta$p2_raw_m
so$pt_nuc_density_area_cortex <- so_meta$pt_nuc_density_area_cortex
so$pt_nuc_density_number_cortex <- so_meta$pt_nuc_density_number_cortex
so$pt_nuc_area <- so_meta$pt_nuc_area
so$pt_nuc_density_number_tubule <- so_meta$pt_nuc_density_number_tubule
so$fractional_pt_lumen_area <- so_meta$fractional_pt_lumen_area
so$fractional_pt_epithelium_area <- so_meta$fractional_pt_epithelium_area
so$fractional_pt_total_area <- so_meta$fractional_pt_total_area
so$pt_lumen_avg_area <- so_meta$pt_lumen_avg_area
so$pt_epithelium_avg_area <- so_meta$pt_epithelium_avg_area
so$pt_avg_area <- so_meta$pt_avg_area
so$pt_density <- so_meta$pt_density
so$pt_total_nuc_area <- so_meta$pt_total_nuc_area
so$pt_nuclear_count <- so_meta$pt_nuclear_count
so$pt_lumen_area <- so_meta$pt_lumen_area
so$pt_epithelium_area <- so_meta$pt_epithelium_area
so$pt_total_area <- so_meta$pt_total_area
so$pt_total_number <- so_meta$pt_total_number
so$cortex_percentage <- so_meta$cortex_percentage
so$cortex_analyzed_area <- so_meta$cortex_analyzed_area
so$cortex_total_area <- so_meta$cortex_total_area
so$gbm_thick_quartile <- so_meta$gbm_thick_quartile
so$diabetes_duration <- so_meta$diabetes_duration
so$bmi_quartile <- so_meta$bmi_quartile
so$diabetes_duration_quartile <- so_meta$diabetes_duration_quartile
so$age_quartile <- so_meta$age_quartile
so$raw_m_quartile <- so_meta$raw_m_quartile
so$diabetes_duration_manual_cat <- so_meta$diabetes_duration_manual_cat
so$bmi_manual_cat <- so_meta$bmi_manual_cat
so$gbm_thick_tertile <- so_meta$gbm_thick_tertile
so$bmi_tertile <- so_meta$bmi_tertile
so$diabetes_duration_tertile <- so_meta$diabetes_duration_tertile
so$age_tertile <- so_meta$age_tertile
so$raw_m_tertile <- so_meta$raw_m_tertile
so$lean_m_tertile <- so_meta$lean_m_tertile
so$hba1c_tertile <- so_meta$hba1c_tertile
so$avg_c_k2_tertile <- so_meta$avg_c_k2_tertile
so$avg_c_k2 <- so_meta$avg_c_k2
so$hba1c_manual_cat <- so_meta$hba1c_manual_cat
so$bmi_manual_cat2 <- so_meta$bmi_manual_cat2
```

```{r echo =F, include = F}
# function for de.markers
de.markers <- function(seurat_object, genes, group.by, id1, id2, celltype, extension){
  m = FindMarkers(seurat_object, features = genes,group.by = group.by,ident.1 = id1, 
                  ident.2 = id2, subset.ident = celltype,verbose = F, logfc.threshold=0.001,
                  min.pct = 0.001)
  m$p_val_adj = p.adjust(m$p_val,method = "bonferroni")
  m <- m %>% 
    rownames_to_column('gene') %>%
    arrange(p_val) %>%
    column_to_rownames('gene') %>%
    dplyr::select(avg_log2FC,pct.1,pct.2,p_val,p_val_adj) %>%
    filter(!is.na(p_val))
  
  genes_subset <- rownames(m)[m$p_val <= 0.05]

  if (length(genes_subset) > 0){
    assign(paste0("genes_subset", extension), genes_subset, envir = .GlobalEnv)
  }
  assign(paste0("m", extension), m, envir = .GlobalEnv)
  return(knitr::kable(m, digits = 3
                      ))
}

## Top 2000 genes
de.markers(so, NULL, "Group", id1 = "T1D", id2 = "HC", "PT", "_top")
m_top <- m_top %>% head(2000)
```

```{r include = F}
## Make SO into SCE object for pseudotime analysis
sce_PT <- as.SingleCellExperiment(subset(so, generaltype == "PT" & celltype != "PT_lowQuality"), assay = "RNA")

# # Totem clustering for trajectory analysis
# gc()
# sce_PT <- PrepareTotem(sce_PT)
# sce_PT <- RunDimRed(object = sce_PT,
#                     dim.red.method = "pca",
#                     dim.red.features = row.names(m_top),
#                     dim.reduction.par.list = list(ndim=5))
# 
# ## where so@assays$RNA@counts is the normalized expression count
# # gc()
# # dim_red <- dimred_pca(t(subset(so, generaltype == "PT" & celltype != "PT_lowQuality")@assays$RNA@counts), ndim=2)
# dim_red <- reducedDim(sce_PT, type = "pca") 
# 
# sce_PT <- RunClustering(sce_PT,
#                         k.range = 3:20,
#                         min.cluster.size = 5,
#                         N.clusterings=10000)
# gc()
# viz_cell <- VizCellConnectivity(sce_PT,viz.dim.red = dim_red)
# 
# pushover(message = "done w/ VizCellConnectivity")
# 
# sce_PT <- SelectClusterings(sce_PT,selection.method = 1,
#                        selection.N.models = 10,
#                        selection.stratified=FALSE,
#                        prior.clustering = NULL)
# VizMST(sce_PT,clustering.names = ReturnTrajNames(sce_PT),viz.dim.red = dim_red)
```

```{r echo = F}
# VizMST(sce_PT, clustering.names = sce_PT$Group, viz.dim.red = dim_red)
```

```{r echo = F}
n_HC <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & Group == "HC"))
n_T1D <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & Group == "T1D"))

# By PT subtypes (by celltype)
cellcount<- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  dplyr::group_by(Group, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(Group == "HC" ~ n_HC, Group == "T1D" ~ n_T1D),
         ratio = count / n) %>% ungroup() %>%
  group_by(celltype) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, Group, celltype) %>%
  ggplot(aes(x= celltype, y= proportion, fill = Group)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Group") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))

cellcount
```

```{r echo = F}
n_pt1 <- nrow(so@meta.data %>% filter(celltype == "PT-1"))
n_pt2 <- nrow(so@meta.data %>% filter(celltype == "PT-2"))
n_pt3 <- nrow(so@meta.data %>% filter(celltype == "PT-3"))
n_pt4 <- nrow(so@meta.data %>% filter(celltype == "PT-4"))
n_pt5 <- nrow(so@meta.data %>% filter(celltype == "PT-5"))

# By PT subtypes (by celltype)
cellcount_gbm_thick_tertile <- so@meta.data %>% 
  filter(!is.na(gbm_thick_art_mean)) %>%
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  dplyr::group_by(gbm_thick_tertile, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(gbm_thick_tertile) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, gbm_thick_tertile, celltype) %>%
  ggplot(aes(x= gbm_thick_tertile, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
        legend.position = "none") +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("GBM thickness") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_gbm_thick_tertile
```

```{r echo = F}
n_q1 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & bmi_tertile == "q1"))
n_q2 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & bmi_tertile == "q2"))
n_q3 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & bmi_tertile == "q3"))
n_q4 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & bmi_tertile == "q4"))

# By PT subtypes (by celltype)
cellcount_bmi_tertile <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  dplyr::group_by(bmi_tertile, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(bmi_tertile) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, bmi_tertile, celltype) %>%
  ggplot(aes(x= bmi_tertile, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("BMI") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_bmi_tertile
```

```{r echo = F}
# By PT subtypes (by celltype)
cellcount_bmi_manual_cat <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  dplyr::group_by(bmi_manual_cat, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(bmi_manual_cat) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, bmi_manual_cat, celltype) %>%
  ggplot(aes(x= bmi_manual_cat, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("BMI") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_bmi_manual_cat
```

```{r echo = F}
# By PT subtypes (by celltype)
cellcount_bmi_manual_cat2 <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  dplyr::group_by(bmi_manual_cat2, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(bmi_manual_cat2) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, bmi_manual_cat2, celltype) %>%
  ggplot(aes(x= bmi_manual_cat2, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("BMI") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_bmi_manual_cat2
```

```{r echo = F}
n_q1 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_tertile == "q1"))
n_q2 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_tertile == "q2"))
n_q3 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_tertile == "q3"))
n_q4 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_tertile == "q4"))

# By PT subtypes (by celltype)
cellcount_diabetes_duration_tertile <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality", Group == "T1D") %>%
  dplyr::group_by(diabetes_duration_tertile, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(diabetes_duration_tertile) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, diabetes_duration_tertile, celltype) %>%
  ggplot(aes(x= diabetes_duration_tertile, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("Diabetes duration") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_diabetes_duration_tertile
```

```{r echo = F}
n_q1 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_manual_cat == "5-10"))
n_q2 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_manual_cat == "10-15"))
n_q3 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_manual_cat == "15-20"))
n_q4 <- nrow(so@meta.data %>% filter(generaltype == "PT" & celltype != "PT_lowQuality" & diabetes_duration_manual_cat == "20+"))

# By PT subtypes (by celltype)
cellcount_diabetes_duration_manual_cat <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  filter(diabetes_duration_manual_cat != "NA") %>%
  dplyr::group_by(diabetes_duration_manual_cat, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(diabetes_duration_manual_cat) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, diabetes_duration_manual_cat, celltype) %>%
  ggplot(aes(x= diabetes_duration_manual_cat, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("Diabetes duration") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_diabetes_duration_manual_cat
```

```{r echo = F}
# By PT subtypes (by celltype)
cellcount_hba1c_tertile <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  filter(hba1c_tertile != "NA") %>%
  dplyr::group_by(hba1c_tertile, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(hba1c_tertile) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, hba1c_tertile, celltype) %>%
  ggplot(aes(x= hba1c_tertile, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("HbA1c") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_hba1c_tertile
```

```{r echo = F}
# By PT subtypes (by celltype)
cellcount_hba1c_manual_cat <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  filter(hba1c_manual_cat != "NA") %>%
  dplyr::group_by(hba1c_manual_cat, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(hba1c_manual_cat) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, hba1c_manual_cat, celltype) %>%
  ggplot(aes(x= hba1c_manual_cat, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("HbA1c") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_hba1c_manual_cat
```

```{r echo = F}
# By PT subtypes (by celltype)
cellcount_raw_m_tertile <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  filter(raw_m_tertile != "NA") %>%
  dplyr::group_by(raw_m_tertile, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(raw_m_tertile) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, raw_m_tertile, celltype) %>%
  ggplot(aes(x= raw_m_tertile, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
        legend.position = "none") +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("M-value") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_raw_m_tertile
```

```{r echo = F}
# By PT subtypes (by celltype)
cellcount_lean_m_tertile <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  filter(lean_m_tertile != "NA") %>%
  dplyr::group_by(lean_m_tertile, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(lean_m_tertile) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, lean_m_tertile, celltype) %>%
  ggplot(aes(x= lean_m_tertile, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("M-value (Lean)") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_lean_m_tertile
```


```{r echo = F}
# By PT subtypes (by celltype)
cellcount_avg_c_k2_tertile <- so@meta.data %>% 
  filter(generaltype == "PT" & celltype != "PT_lowQuality") %>%
  filter(avg_c_k2_tertile != "NA") %>%
  dplyr::group_by(avg_c_k2_tertile, celltype) %>%
  dplyr::summarise(count = n()) %>%
  dplyr::mutate(n = case_when(celltype == "PT-1" ~ n_pt1, 
                              celltype == "PT-2" ~ n_pt2,
                              celltype == "PT-3" ~ n_pt3, 
                              celltype == "PT-4" ~ n_pt4,
                              celltype == "PT-5" ~ n_pt5),
         ratio = count / n) %>% ungroup() %>%
  group_by(avg_c_k2_tertile) %>%
  dplyr::mutate(proportion = ratio/sum(ratio)) %>%
  dplyr::select(proportion, avg_c_k2_tertile, celltype) %>%
  ggplot(aes(x= avg_c_k2_tertile, y= proportion, fill = celltype)) + 
  geom_bar(stat = "identity", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = NULL,
       fill = "PT-subtype") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
        legend.position = "none") +
  theme(plot.title = element_text(hjust=0.5, face="bold", size = 15),
        text = element_text(size = 20)) +
  ggtitle("Avg cortical k2") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))

cellcount_avg_c_k2_tertile
```

```{r}
# save compiled image
cellcount_compiled <- ggarrange(ggarrange(NULL,cellcount_hba1c_manual_cat, NULL,
                                          cellcount_bmi_manual_cat2, NULL, ncol = 5, common.legend = T, labels = c("","A","","B",""),
                                          widths = c(0.35,1,0.1,0.9,0.35)),
                                ggarrange(cellcount_raw_m_tertile,
                                          cellcount_gbm_thick_tertile,
                                          cellcount_avg_c_k2_tertile, ncol = 3, labels = c("C", "D", "E")),
                                nrow = 2,
                                common.legend = T,
                                heights = c(0.9,0.8))
cellcount_compiled
ggsave(filename = "/home/yejichoi2/Documents/lin_temp_folder/Cellcount_compiled.jpeg",
       plot = cellcount_compiled, scale = 2,
       width = 1200, height = 1200,units = "px")
```

# PT cells (PT-1 thru -5)

Removed outlier clusters that slingshot was overfitting.

```{r, echo = F}
so_PT <- subset(so, generaltype == "PT" & celltype != "PT_lowQuality")
so_PT <- NormalizeData(so_PT)
so_PT <- ScaleData(so_PT)
# ElbowPlot(so_PT)
so_PT <- RunPCA(so_PT, ncomponents = 10, features = VariableFeatures(object = so_PT))
so_PT <- FindNeighbors(so_PT)
so_PT <- FindClusters(so_PT)
so_PT <- RunUMAP(so_PT, dims = 1:30)
so_PT <- RunTSNE(so_PT, dimred = "UMAP")

# DimPlot(object = so_PT, reduction = "umap")
# DimPlot(object = so_PT, reduction = "umap", group.by = "Group")
# DimPlot(object = so_PT, reduction = "umap", group.by = "celltype")
umap_keep <- rownames(as.data.frame(so_PT@reductions$umap@cell.embeddings) %>%
  filter(umap_1 < 5 | umap_2 > 0))

so_PT <- so_PT[, umap_keep]
DimPlot(object = so_PT, reduction = "umap")
DimPlot(object = so_PT, reduction = "umap", group.by = "Group")
DimPlot(object = so_PT, reduction = "umap", group.by = "celltype")
```

After visualizing UMAP by cell type clusters, we fit slingshot two ways: 
  i) setting start cluster as PT-3, ending cluster as PT-4 (PT-3 having the most "healthy" cells, PT-4 having the most "diseased" cells),
  ii) unsupervised.
  
The first method resulted in two trajectories (lineage 1: PT-3  PT-2  PT-5  PT-4; lineage 2: PT-3  PT-2  PT-1), and the second method also resulted in two trajectories (lineage 1: PT-4  PT-5  PT-2  PT-3; lineage 2: PT-4  PT-5  PT-2  PT-1).

Lineage 1 of the unsupervised method was the exact inverse of lineage 1 of the supervised method. Therefore, we moved forward with the initial method.

```{r echo = F}
# PT-3 to PT-4
sce_PT <- as.SingleCellExperiment(so_PT)
sce_PT <- slingshot(sce_PT, reducedDim = 'UMAP', clusterLabels = colData(sce_PT)$celltype,
                                   start.clus = 'PT-3', end.clus = 'PT-4')
shuffle <- sample(ncol(sce_PT))

jpeg("/home/yejichoi2/Documents/lin_temp_folder/PT_slingshot_UMAP.jpeg", width = 900, height = 800, quality = 100)
par(mar = c(5, 6, 1, 1)) 
plot(reducedDims(sce_PT)$UMAP[shuffle, ], asp = 1, pch = 16,
     xlab = "UMAP-1", ylab = "UMAP-2",
     col = hcl.colors(100, alpha = .5, palette = "PinkYl")[cut(sce_PT$slingPseudotime_1, breaks = 100)][shuffle],
     cex.lab = 3, cex.axis = 2)
lines(SlingshotDataSet(sce_PT), type = "lineages")
lines(SlingshotDataSet(sce_PT))
dev.off()

SlingshotDataSet(sce_PT)

# sce_PT_unsupervised <- as.SingleCellExperiment(so_PT)
# sce_PT_unsupervised <- slingshot(sce_PT, reducedDim = 'UMAP', clusterLabels = colData(sce_PT)$celltype)
# shuffle <- sample(ncol(sce_PT_unsupervised))
# plot(reducedDims(sce_PT_unsupervised)$UMAP[shuffle, ], asp = 1, pch = 16,
#      xlab = "UMAP-1", ylab = "UMAP-2",
#      col = hcl.colors(100, alpha = 0.5, palette = "PinkYl")[cut(sce_PT_unsupervised$slingPseudotime_1, breaks = 100)][shuffle])
# lines(SlingshotDataSet(sce_PT_unsupervised), type = "lineages")
# lines(SlingshotDataSet(sce_PT_unsupervised))
# SlingshotDataSet(sce_PT_unsupervised)
# 
# plot_df <- as.data.frame(slingPseudotime(sce_PT)) %>%
#   dplyr::mutate(Group = colData(sce_PT)$Group,
#                 gbm_thick_quartile = colData(sce_PT)$gbm_thick_quartile,
#                 bmi_quartile = colData(sce_PT)$bmi_quartile,
#                 bmi_manual_cat = colData(sce_PT)$bmi_manual_cat,
#                 diabetes_duration_quartile = colData(sce_PT)$diabetes_duration_quartile,
#                 diabetes_duration_manual_cat = colData(sce_PT)$diabetes_duration_manual_cat,
#                 age_quartile = colData(sce_PT)$age_quartile,
#                 raw_m_quartile = colData(sce_PT)$raw_m_quartile)
#lines(SlingshotDataSet(sce_PT))

# plot(reducedDims(sce_PT)$UMAP[shuffle, ], asp = 1, pch = 16,
#      xlab = "UMAP-1", ylab = "UMAP-2",
#      col = sce_PT$Group)
# 
# lines(SlingshotDataSet(sce_PT), type = "lineages")
# legend("topright", pch = 16, col = alpha(c("HC" = "#ffcb77", "T1D" = "#fe6d73"), 0.4), bty = "n", 
#        legend = levels(factor(colData(sce)$Group)))
# 
# plotUMAP(sce_PT, colour_by="pseudotime", point_alpha=0.3) +
#     geom_segment(data=grid.df, 
#         mapping=aes(x=start.1, y=start.2, xend=end.1, yend=end.2), 
#         arrow=arrow(length=unit(0.05, "inches"), type="closed"))
```

```{r echo = F}
# Function to plot all smooth after fitGAM
plot_smooth <- function(sce, gene, title = gene) {
  non_missing_cells <- (colData(sce)$tradeSeq$conditions != "NA")
  non_missing_cells <- as.data.frame(non_missing_cells) %>% 
    dplyr::mutate(non_missing_cells = case_when(non_missing_cells == T ~ 1))
  cnt <- assays(sce)$counts[gene, , drop=F]
  cnt <- as.data.frame(t(cnt))
  cnt <- cnt*non_missing_cells
  colnames(cnt) <- "exp"
  cnt <- cnt %>% filter(!is.na(exp))
  pseudotime <- (colData(sce)$crv$pseudotime.Lineage1 * non_missing_cells %>%
    filter(!is.na(non_missing_cells)))$non_missing_cells
  condition <- colData(sce)$tradeSeq$conditions
  
  if ("NA" %in% condition){
    condition <- condition[condition != "NA"]
  }
  
  ncondition <- length(unique(condition))
  
  if (ncondition == 2){
    colors = c("#007e5d",  "#ff8989")
  }
  if (ncondition == 3){
    colors = c("#ef767a", "#456990", "#49beaa")
  }
  if(ncondition == 4){
    colors = c("#003049", "#d62828", "#f77f00", "#fcbf49")
  }
  if(ncondition == 5){
    colors = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51")
  }
  
  cnt_smooth <- predictSmooth(sce, gene, nPoints=100) %>%
    filter(lineage == 1) %>% dplyr::select(-lineage)
  cnt_smooth <- cnt_smooth[, c("yhat", "time", "condition")]
  colnames(cnt_smooth) <- c("exp", "pseudotime", "condition")
  cnt_smooth <- cnt_smooth %>% filter(condition!="NA")
  
  p <- ggplot(NULL, aes(x=pseudotime, y=log1p(exp), color=condition)) + 
    geom_point(data=cnt, size=1, alpha = 0.3) +
    geom_line(data=cnt_smooth, linewidth=1.5) +
    labs(x = "Pseudotime",
         y = "Log(expression + 1)", 
         title = title,
         color = "Group") +
    theme_minimal() +
    theme(panel.border = element_blank(), panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
    scale_color_manual(values = colors)
  return(p)
}
```

## Trajectory inference
### By group
#### Differential progression (shown by density plot)

The density plots on the trajectory of both lineage 1 and 2 show later pseudotime values in the T1D group. The Kolmogorov-Smirnov test was used to assess whether the two groups of pseudotime values were derived from the same distribution. Both lineages resulted in highly significant tests, concluding that there are differences between the distrbutions of HC and T1D in both lineages.

```{r echo = F, warning = F, message=F}
DimPlot(object = so_PT, reduction = "umap", group.by = "celltype")

# Lineage 1 density plot
ggdensity(plot_df, x = "Lineage1", fill = "Group",
          color = "Group", palette = c("#f08080", "#1282a2")) +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$Group == "T1D", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$Group == "HC", 1])

# Lineage 2 density plot
ggdensity(plot_df, x = "Lineage2", fill = "Group",
          color = "Group", palette = c("#f08080", "#1282a2")) +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$Group == "T1D", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$Group == "HC", 2])
```


#### Differential expression
##### FitGAM
```{r echo = F}
genes = unique(c(genes, oxy_phos_genes))
tca_genes_top <- genes[genes %in% row.names(m_top)]

sce_PT <- fitGAM(sce_PT, 
                 conditions = factor(colData(sce_PT)$Group), 
                 nknots = 5, 
                 genes = unique(c(rownames(m_top), genes)))
```

##### Association test

The association test was done to assess significant changes in gene expression as a function of pseudotime within each lineage. The null hypothesis of this test is that gene expression is not a function of time (i.e., testing whether the estimated smoothers are significantly varying as a function of pseudotime within each lineage). 


The top 2000 genes that were most differentially expressed between HC and T1D were included in the analysis. Genes involved in the TCA cycle and oxphos were also included regardless of DE. 

###### Lineage 1
```{r echo = F}
at <- associationTest(sce_PT, lineages = T) %>%
  rownames_to_column(var = "gene")
rownames(at) <- at$gene

# TCA/oxphos HC lineage 1 genes
at_hc_tca1 <- subset(at, rownames(at) %in% genes)
at_hc_tca1 <- rownames(at_hc_tca1)[at_hc_tca1$pvalue_lineage1_conditionHC <= 0.05]
at_hc_tca1 <- at_hc_tca1[!is.na(at_hc_tca1)]
length(at_hc_tca1)
kable(head(arrange(subset(at, rownames(at) %in% at_hc_tca1), by = pvalue_lineage1_conditionHC), n = 10))

# TCA/oxphos T1D lineage 1 genes
at_t1d_tca1 <- subset(at, rownames(at) %in% genes)
at_t1d_tca1 <- rownames(at_t1d_tca1)[at_t1d_tca1$pvalue_lineage1_conditionT1D <= 0.05]
at_t1d_tca1 <- at_t1d_tca1[!is.na(at_t1d_tca1)]
length(at_t1d_tca1)
kable(head(arrange(subset(at, rownames(at) %in% at_t1d_tca1), by = pvalue_lineage1_conditionT1D), n = 10))
UpSetR::upset(fromList(list(HC_1 = at_hc_tca1, T1D_1 = at_t1d_tca1)))

# significant HC lineage 1 genes
at_hc1 <- rownames(at)[at$pvalue_lineage1_conditionHC <= 0.05]
at_hc1 <- at_hc1[!is.na(at_hc1)]
length(at_hc1)
kable(head(arrange(subset(at, rownames(at) %in% at_hc1), by = pvalue_lineage1_conditionHC), n = 10))

# significant T1D lineage 1 genes
at_t1d1 <- rownames(at)[at$pvalue_lineage1_conditionT1D <= 0.05]
at_t1d1 <- at_t1d1[!is.na(at_t1d1)]
length(at_t1d1)
kable(head(dplyr::arrange(subset(at, rownames(at) %in% at_t1d1), by = pvalue_lineage1_conditionT1D), n = 10))
UpSetR::upset(fromList(list(HC_1 = at_hc1, T1D_1 = at_t1d1)))
```
###### Lineage 1 together
```{r echo = F}
at_comb <- rownames(at)[at$pvalue <= 0.05]
at_comb <- at_comb[!is.na(at_comb)]
length(at_comb)

# Totem clustering for trajectory analysis
counts <- GetAssayData(so_PT, slot="counts", assay="RNA")   
counts.sub <- counts[at_comb,]
so_PT_at_meta <- so_PT@meta.data[colnames(counts.sub),]
so_PT_at <- CreateSeuratObject(counts=counts.sub, meta.data = so_PT_at_meta)
so_PT_at <- NormalizeData(so_PT_at)
so_PT_at <- ScaleData(so_PT_at)
# PCA
so_PT_at <- RunPCA(so_PT_at, features = at_comb)
# Cluster cells
so_PT_at <- FindNeighbors(so_PT_at)
so_PT_at <- FindClusters(so_PT_at)
# Perform UMAP and tSNE
so_PT_at <- RunUMAP(so_PT_at, dims = 1:30)
DimPlot(object = so_PT_at, reduction = "umap", group.by = "Group")
DimPlot(object = so_PT_at, reduction = "umap", group.by = "celltype")

# sce_PT_at <- as.SingleCellExperiment(so_PT_at)
# sce_PT_at <- PrepareTotem(sce_PT_at)
# sce_PT_at <- RunDimRed(object = sce_PT_at,
#                  dim.red.method = "lmds",
#                  dim.red.features = at_comb,
#                  dim.reduction.par.list = list(ndim=5))
# 
# ## where so@assays$RNA@counts is the normalized expression count
# gc()
# dim_red <- dimred_mds(t(GetAssayData(so_PT_at, slot="counts", assay="RNA")), ndim=2)
# 
# sce_PT_at <- RunClustering(sce_PT_at,
#                      k.range = 3:20,
#                      min.cluster.size = 5,
#                      N.clusterings=10000)
# gc()
# VizCellConnectivity(sce_PT_at,viz.dim.red = dim_red)
# 
# pushover(message = "done w/ VizCellConnectivity")
# 
# sce_PT_at <- SelectClusterings(sce_PT_at,selection.method = 1,
#                        selection.N.models = 10,
#                        selection.stratified=FALSE,
#                        prior.clustering = NULL)
# VizMST(sce_PT_at,clustering.names = ReturnTrajNames(sce_PT_at),viz.dim.red = dim_red)
# VizMST(sce_PT_at,clustering = so$celltype,viz.dim.red = dim_red)
```

###### Lineage 2
```{r echo = F}
# TCA/oxphos HC lineage 2 genes
at_hc_tca2 <- subset(at, rownames(at) %in% genes)
at_hc_tca2 <- rownames(at_hc_tca2)[at_hc_tca2$pvalue_lineage2_conditionHC <= 0.05]
at_hc_tca2 <- at_hc_tca2[!is.na(at_hc_tca2)]
length(at_hc_tca2)
kable(head(dplyr::arrange(subset(at, rownames(at) %in% at_hc_tca2), by = pvalue_lineage2_conditionHC), n = 10))

# TCA/oxphos T1D lineage 2 genes
at_t1d_tca2 <- subset(at, rownames(at) %in% genes)
at_t1d_tca2 <- rownames(at_t1d_tca2)[at_t1d_tca2$pvalue_lineage2_conditionT1D <= 0.05]
at_t1d_tca2 <- at_t1d_tca2[!is.na(at_t1d_tca2)]
length(at_t1d_tca2)
kable(head(dplyr::arrange(subset(at, rownames(at) %in% at_t1d_tca2), by = pvalue_lineage2_conditionT1D), n = 10))
UpSetR::upset(fromList(list(HC_2 = at_hc_tca2, T1D_2 = at_t1d_tca2)))

# significant HC lineage 2 genes
at_hc2 <- rownames(at)[at$pvalue_lineage2_conditionHC <= 0.05]
at_hc2 <- at_hc2[!is.na(at_hc2)]
length(at_hc2)
kable(head(dplyr::arrange(subset(at, rownames(at) %in% at_hc2), by = pvalue_lineage2_conditionHC), n = 10))

# significant T2D lineage 2 genes
at_t1d2 <- rownames(at)[at$pvalue_lineage2_conditionT1D <= 0.05]
at_t1d2 <- at_t1d2[!is.na(at_t1d2)]
length(at_t1d2)
kable(head(dplyr::arrange(subset(at, rownames(at) %in% at_t1d2), by = pvalue_lineage2_conditionT1D), n = 10))
UpSetR::upset(fromList(list(HC_2 = at_hc2, T1D_2 = at_t1d2)))
```

##### Condition test

```{r echo = F}
# Conditioned by group; plots for each transcript
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT, genes[i])
  gene_expression <- plotGeneCount(sce_PT, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

```{r echo = F}
# conditions test
ct <- conditionTest(sce_PT, pairwise = T, lineages = T)
```

###### Lineage 1

```{r echo = F}
subset(ct, rownames(ct) %in% genes)
sum(ct$pvalue_lineage1 <= 0.05, na.rm = TRUE)
conditionGenes1 <- rownames(ct)[ct$pvalue_lineage1 <= 0.05]
conditionGenes1 <- conditionGenes1[!is.na(conditionGenes1)]
length(conditionGenes1)
kable(head(dplyr::arrange(subset(ct, rownames(ct) %in% conditionGenes1), by = pvalue_lineage1), n = 20))
```

*Top 20 highly DE genes*

```{r echo = F}
ct <- ct %>%
  rownames_to_column(var = "gene")
rownames(ct) <- ct$gene

de_genes1 <- (head(arrange(ct, by = pvalue_lineage1), n = 20))$gene

for (i in 1:length(de_genes1)){
  plot <- plot_smooth(sce_PT, de_genes1[i])
  gene_expression <- plotGeneCount(sce_PT, counts, gene = de_genes1[i],
                        title = de_genes1[i])
  print(plot + gene_expression)
}
```

```{r echo = F}
cell_exp_hc <- as.data.frame(subset(so_PT, Group == "HC")@assays$RNA@counts)
cell_to_pseudotime <- data.frame(cell = colnames(so_PT),
                                 pseudotime = sce_PT$slingPseudotime_1) %>%
  filter(!is.na(pseudotime))

matched_indices <- match(colnames(cell_exp_hc), cell_to_pseudotime$cell)
valid_indices <- !is.na(matched_indices)
cell_exp_hc <- cell_exp_hc[, valid_indices]
colnames(cell_exp_hc) <- cell_to_pseudotime$pseudotime[matched_indices[valid_indices]]
cell_exp_hc <- cell_exp_hc[, order(names(cell_exp_hc))]

cell_exp_t1d <- as.data.frame(subset(so_PT, Group == "T1D")@assays$RNA@counts)
matched_indices <- match(colnames(cell_exp_t1d), cell_to_pseudotime$cell)
valid_indices <- !is.na(matched_indices)
cell_exp_t1d <- cell_exp_t1d[, valid_indices]
colnames(cell_exp_t1d) <- cell_to_pseudotime$pseudotime[matched_indices[valid_indices]]
cell_exp_t1d <- cell_exp_t1d[, order(names(cell_exp_t1d))]



# Lineage 1
breaksList = seq(0, 2, by = 0.01)
## HC
heat_hc <- pheatmap(cell_exp_hc[conditionGenes1,],
  cluster_cols = FALSE, cluster_rows = FALSE,
  show_rownames = F, show_colnames = F, main = "HC", legend = TRUE,
  silent = TRUE, color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

## T1D

heat_t1d <- pheatmap(cell_exp_t1d[conditionGenes1,],
  cluster_cols = FALSE, cluster_rows = FALSE,
  show_rownames = F, show_colnames = F, main = "T1D", legend = TRUE,
  silent = TRUE, color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

ggarrange(heat_hc[[4]], heat_t1d[[4]])

## Smoothed
smooth <- predictSmooth(sce_PT, conditionGenes1, tidy = F, nPoints = 100)
smooth_scaled <- t(scale(t(smooth)))
breaksList = seq(-1.1, 2.5, by = 0.01)

# Lineage 1
## HC
heat_hc <- pheatmap(smooth_scaled[conditionGenes1, 1:100],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = F, show_colnames = F, main = "HC", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

## T1D
heat_t1d <- pheatmap(smooth_scaled[conditionGenes1, 201:300],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = F, show_colnames = FALSE, main = "T1D", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

ggarrange(heat_hc[[4]], heat_t1d[[4]])
```

```{r echo = F}
conditionGenes1 <- genes[genes %in% conditionGenes1]

breaksList = seq(0, 2, by = 0.01)
# Lineage 1
## HC
heat_hc <- pheatmap(cell_exp_hc[conditionGenes1,],
  cluster_cols = FALSE, cluster_rows = FALSE,
  show_rownames = T, show_colnames = F, main = "HC", legend = TRUE,
  silent = TRUE, breaks = breaksList, color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  border_color = F)

## T1D
heat_t1d <- pheatmap(cell_exp_t1d[conditionGenes1,],
  cluster_cols = FALSE, cluster_rows = FALSE,
  show_rownames = T, show_colnames = F, main = "T1D", legend = TRUE,
  silent = TRUE, breaks = breaksList, color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  border_color = F)

ggarrange(heat_hc[[4]], heat_t1d[[4]])

# Smoothed
smooth <- predictSmooth(sce_PT, conditionGenes1, tidy = F, nPoints = 100)
smooth_scaled <- t(scale(t(smooth)))
breaksList = seq(-1.1, 2.5, by = 0.01)

# Lineage 1
## HC
heat_hc <- pheatmap(smooth_scaled[conditionGenes1, 1:100],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = TRUE, show_colnames = FALSE, main = "HC", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

## T1D
heat_t1d <- pheatmap(smooth_scaled[conditionGenes1, 201:300],
  cluster_cols = FALSE,cluster_rows = FALSE,
  show_rownames = TRUE, show_colnames = FALSE, main = "T1D", legend = TRUE,
  silent = TRUE,
        color = colorRampPalette(rev(brewer.pal(n = 7, 
                                                name = "RdYlBu")))(length(breaksList)),
  breaks = breaksList,
  border_color = F)

ggarrange(heat_hc[[4]], heat_t1d[[4]])
```

###### Lineage 2
```{r echo = F}
# sum(ct$pvalue_lineage2 <= 0.05, na.rm = TRUE)
# conditionGenes2 <- rownames(ct)[ct$pvalue_lineage2 <= 0.05]
# conditionGenes2 <- conditionGenes2[!is.na(conditionGenes2)]
# conditionGenes2
#conditionGenes2 <- genes[genes %in% conditionGenes2]
```

```{r echo = F}
# smooth <- predictSmooth(sce_PT, conditionGenes2, tidy = F, nPoints = 100)
# smooth_scaled <- t(scale(t(smooth)))
# breaksList = seq(-1.1, 5, by = 0.01)

# Lineage 2
## Pooled

## HC
# heat_hc2 <- pheatmap(smooth_scaled[conditionGenes2, 101:200],
#   cluster_cols = FALSE,cluster_rows = FALSE,
#   show_rownames = TRUE, show_colnames = FALSE, main = "HC", legend = TRUE,
#   silent = TRUE,
#         color = colorRampPalette(rev(brewer.pal(n = 7, 
#                                                 name = "RdYlBu")))(length(breaksList)),
#   breaks = breaksList,
#   border_color = F)
# 
# ## T1D
# heat_t1d2 <- pheatmap(smooth_scaled[conditionGenes2, 301:400],
#   cluster_cols = FALSE,cluster_rows = FALSE,
#   show_rownames = TRUE, show_colnames = FALSE, main = "T1D", legend = TRUE,
#   silent = TRUE,
#         color = colorRampPalette(rev(brewer.pal(n = 7, 
#                                                 name = "RdYlBu")))(length(breaksList)),
#   breaks = breaksList,
#   border_color = F)
# 
# ggarrange(heat_hc2[[4]], heat_t1d2[[4]])
```

##### Pattern test

Assess differences in expression patterns between lineages.

```{r echo = F, results='asis'}
pt <- patternTest(sce_PT)
kable(pt[rownames(pt) %in% genes,] %>%
  dplyr::arrange(pvalue))
```

#### Gene set enrichment analysis
```{r echo = F}
## C2 category is according to canonical pathways: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4707969/pdf/nihms-743907.pdf
geneSets <- msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP:KEGG")
### filter background to only include genes that we assessed
geneSets$gene_symbol <- toupper(geneSets$gene_symbol)
geneSets <- geneSets[geneSets$gene_symbol %in% names(sce_PT),]
m_list <- geneSets %>% split(x = .$gene_symbol, f = .$gs_name)
stats <- at$pvalue_lineage1_conditionT1D
names(stats) <- rownames(at)
eaRes <- fgsea(pathways = m_list, stats = na.omit(stats))
ooEA <- order(eaRes$pval, decreasing = FALSE)
kable(head(eaRes[ooEA, 1:3], n = 20))

statsCond <- ct$pvalue_lineage1
names(statsCond) <- rownames(ct)
eaRes <- fgsea(pathways = m_list, stats = na.omit(statsCond))
ooEA <- order(eaRes$pval, decreasing = FALSE)
kable(head(eaRes[ooEA, 1:3], n = 20))
```


##### Correlations with Pseudotime

```{r label-setup, echo = F}
source("/home/yejichoi/Documents/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/correlation_function.R")
for (gene_value in genes) {
  dict[[gene_value]] <- gene_value
}
```

```{r warning=F, message=F}
# transform to df to plot and calculate weighted means of pseudotime
sce_PT_df <- as.data.frame(cbind(colData(sce_PT)[1:52], sce_PT$slingPseudotime_1))
sce_PT_df_weight <- sce_PT_df %>%
  dplyr::summarise(weight = n(), .by = c(michigan_id, celltype))
sce_PT_df_mean_weighted <- sce_PT_df %>%
  dplyr::summarise(mean.pseudotime = mean(sce_PT.slingPseudotime_1, na.rm = T), .by = c(michigan_id, celltype)) %>%
  left_join(sce_PT_df_weight) %>%
  dplyr::group_by(michigan_id) %>%
  dplyr::summarise(weighted_mean = sum(weight * mean.pseudotime, na.rm = T) / sum(weight, na.rm = T)) %>%
  ungroup() 
sce_PT_df_mean <- sce_PT_df %>%
  dplyr::summarise(mean.pseudotime = mean(sce_PT.slingPseudotime_1, na.rm = T), .by = c(michigan_id)) 

dat_mean_pseudotime <- dat %>%
  left_join(sce_PT_df_mean_weighted) %>%
  left_join(sce_PT_df_mean)

sce_PT_df_scaled <- scale(as.numeric(sce_PT_df$sce_PT.slingPseudotime_1)) 
sce_PT_df_scaled <- data.frame(pseudotime_scaled = sce_PT_df_scaled)
sce_PT_df <- cbind(sce_PT_df, sce_PT_df_scaled)

# PT 123/45 ratios
PT_ratios <- sce_PT_df %>%
  dplyr::mutate(pt_adaptive = case_when(celltype %in% c("PT-1", "PT-2", "PT-3") ~ "normal",
                                        celltype %in% c("PT-4", "PT-5") ~ "adaptive")) %>%
  group_by(michigan_id, pt_adaptive) %>%
  dplyr::summarise(count = n())  %>%
  spread(key = pt_adaptive, value = count, fill = 0) %>%
  dplyr::mutate(ratio = adaptive/normal,
                logratio = log(adaptive/normal)) 
  
dat_mean_pseudotime <- dat_mean_pseudotime %>% left_join(PT_ratios)
```

###### Pseudo-R^2
```{r echo = F, eval = F, warning = F}
library(lme4)
# GBM width
gbm_mod <- lmer(gbm_thick_art_mean ~ pseudotime_scaled + (1 | michigan_id), data = subset(sce_PT_df, Group == "T1D")) 

summary(gbm_mod)
PseudoR2(gbm_mod)

# Diabetes duration
dibetes_duration_mod <- glm(diabetes_duration ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(dibetes_duration_mod)
PseudoR2(dibetes_duration_mod)

# Age
age_mod <- glm(age ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(age_mod)
PseudoR2(age_mod)

# HbA1C
age_mod <- glm(hba1c ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(age_mod)
PseudoR2(age_mod)

# M-value
m_mod <- glm(p2_raw_m ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(m_mod)
PseudoR2(m_mod)

# BMI
bmi_mod <- glm(bmi ~ sce_PT.slingPseudotime_1, data = subset(sce_PT_df, Group == "T1D")) 
summary(bmi_mod)
PseudoR2(bmi_mod)
```

###### Weighted means
```{r echo = F, warning = F, message = F}
# GBM width
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = log(gbm_thick_artmean), color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "GBM thickness",
       x = "Weighted-average pseudotime",
       y = "Log(GBM thickness)",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Diabetes duration
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = diabetes_duration, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Diabetes duration",
       x = "Weighted-average pseudotime",
       y = "Diabetes duration",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Age
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = age, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Age",
       x = "Weighted-average pseudotime",
       y = "Age",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# HbA1C
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = hba1c, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "HbA1c",
       x = "Weighted-average pseudotime",
       y = "HbA1c",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# M-value
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = p2_raw_m, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "M-value",
       x = "Weighted-average pseudotime",
       y = "M-value",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# BMI
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = bmi, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "BMI",
       x = "Weighted-average pseudotime",
       y = "BMI",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# k2
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = avg_c_k2, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Avg cortical k2",
       x = "Weighted-average pseudotime",
       y = "Avg cortical k2",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))

# Pglo
subset(dat_mean_pseudotime, group == "Type 1 Diabetes") %>%
  ggplot(aes(x = weighted_mean, y = glomerular_pressure, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "PGLO",
       x = "Weighted-average pseudotime",
       y = "PGLO",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("#7EB77F"))
```
Spearman correlations

* Lean Controls *
```{r pseudotime-correlations-weighted-means-lean, echo = F}
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Lean Control"),
                   relevant_vars = c("weighted_mean", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
```

* T1D *
```{r pseudotime-correlations-weighted-means-t1d, echo = F}
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Type 1 Diabetes"),
                   relevant_vars = c("weighted_mean", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
```

* Pooled *
```{r pseudotime-correlations-weighted-means-pooled, echo = F}
correlation_table_minimal(data = dat_mean_pseudotime,
                   relevant_vars = c("weighted_mean", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
```

###### PT cell ratios
```{r echo = F}
# GBM width
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = log(gbm_thick_artmean), color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "GBM thickness",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "Log(GBM thickness)",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

# Diabetes duration
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = diabetes_duration, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Diabetes duration",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "Diabetes duration",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

# Age
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = age, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Age",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "Age",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

# HbA1C
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = hba1c, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "HbA1c",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "HbA1c",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

# M-value
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = p2_raw_m, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "M-value",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "M-value",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

# BMI
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = bmi, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "BMI",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "BMI",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

# k2
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = avg_c_k2, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Avg cortical k2",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "Avg cortical k2",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

# Pglo
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = glomerular_pressure, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "PGLO",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "PGLO",
       color = "Group") +
  theme_minimal() +
  scale_color_manual(values = c("orange", "#7EB77F"))

dat_mean_pseudotime %>%
  ggplot(aes(x = group, y = ratio, color = group)) +
  geom_boxplot() +
  theme_bw()

dat_mean_pseudotime %>%
  ggplot(aes(x = michigan_id, y = ratio, color = group)) +
  geom_boxplot() +
  theme_bw()
```
* Lean Controls *
```{r pseudotime-correlations-ratios-lean, echo = F}
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Lean Control"),
                   relevant_vars = c("ratio", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
```

* T1D *
```{r pseudotime-correlations-ratios-t1d, echo = F}
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Type 1 Diabetes"),
                   relevant_vars = c("ratio", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
```

* Pooled *
```{r pseudotime-correlations-ratios-pooled, echo = F}
correlation_table_minimal(data = dat_mean_pseudotime,
                   relevant_vars = c("ratio", "gbm_thick_artmean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi", "avg_c_k2", "glomerular_pressure"),
                   n_cols = 1,
                   cor_method = "spearman")
```

###### PT cell ratios w/ weighted avg pseudotime
```{r echo = F}
# GBM width
dat_mean_pseudotime %>%
  ggplot(aes(x = log(ratio), y = weighted_mean, color = group)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Pseudotime vs. ratio",
       x = "Log- adaptive-maladaptive/normal cell ratio",
       y = "Weighted avg pseudotime",
       color = "Group") +
  theme_minimal() +
  theme(panel.grid = element_blank()) +
  scale_color_manual(values = c("orange", "#7EB77F"))
```

* Lean Controls *
```{r, echo = F}
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Lean Control"),
                   relevant_vars = c("weighted_mean", "logratio"),
                   n_cols = 1,
                   cor_method = "pearson")
```

* T1D *
```{r, echo = F}
correlation_table_minimal(data = subset(dat_mean_pseudotime, group == "Type 1 Diabetes"),
                   relevant_vars = c("weighted_mean", "logratio"),
                   n_cols = 1,
                  cor_method = "pearson")
```

* Pooled *
```{r, echo = F}
correlation_table_minimal(data = dat_mean_pseudotime,
                   relevant_vars = c("weighted_mean", "logratio"),
                   n_cols = 1,
                 cor_method = "pearson")
```


###### Raw (T1D only)
```{r echo = F, warning = F, message = F}
# GBM width
pseudo_gbm_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = log(gbm_thick_art_mean), color = Group)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "Log(GBM thickness)") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# Avg PT area
pseudo_gbm_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = pt_avg_area, color = Group)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "Avg PT area") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# Nuclei size
pseudo_gbm_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = pt_nuc_area, color = Group)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "PT nucelar area avg/tubules") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# Fractional PT lumen area
pseudo_gbm_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = fractional_pt_lumen_area, color = Group)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "Fractional PT lumen area") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# Diabetes duration
pseudo_diabetesduration_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = diabetes_duration)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "Diabetes duration") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# Age
pseudo_age_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = age)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "Age") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# HbA1C
pseudo_hba1c_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = hba1c, color = Group)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "HbA1c") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# M-value
pseudo_mvalue_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = p2_raw_m)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "M-value") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# BMI
pseudo_bmi_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = bmi)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "BMI") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))

# k2
pseudo_k2_plot <- subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = avg_c_k2)) +
  geom_point(alpha = 0.1, color = "#7EB77F", size = 3) +
  geom_smooth(se = T, method = "gam", color = "#3a5a40", size = 1) +
  geom_smooth(se = T, method = "lm", linetype = "dashed", color = "black", size = 0.5) +
  labs(x = "Pseudotime",
       y = "Cortical K2") +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        text = element_text(size = 15))
```

```{r warning = F, message=F}
# save compiled image
pseudotime_compiled <- ggarrange(ggarrange(NULL, pseudo_hba1c_plot, NULL,
                                 pseudo_bmi_plot,NULL, ncol = 5, common.legend = T, labels = c("","A","","B","F"),
                                          widths = c(0.4,1,0.1,1,0.4)),
                                 ggarrange(pseudo_mvalue_plot,
                                 pseudo_gbm_plot,
                                pseudo_k2_plot, ncol = 3, labels = c("C", "D", "E")),
                                nrow = 2)
pseudotime_compiled
ggsave(filename = "/home/yejichoi2/Documents/lin_temp_folder/Pseudotime_plots_compiled.jpeg",
       plot = pseudotime_compiled, scale = 2,
       width = 2000, height = 1200,units = "px")
```


```{r pseudotime-correlations, echo = F}
correlation_table_minimal(data = subset(sce_PT_df, Group == "HC"),
                   relevant_vars = c("sce_PT.slingPseudotime_1", "avg_c_k2", "gbm_thick_art_mean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi"),
                   n_cols = 1,
                   cor_method = "spearman")
correlation_table_minimal(data = subset(sce_PT_df, Group == "T1D"),
                   relevant_vars = c("sce_PT.slingPseudotime_1", "avg_c_k2", "gbm_thick_art_mean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi"),
                   n_cols = 1,
                   cor_method = "spearman")
correlation_table_minimal(data = sce_PT_df,
                   relevant_vars = c("sce_PT.slingPseudotime_1", "avg_c_k2", "gbm_thick_art_mean", "diabetes_duration", "age", "hba1c", "p2_raw_m", "bmi"),
                   n_cols = 1,
                   cor_method = "spearman")
```
```{r echo = F}
png(height = 1000, width = 1200, file = "/home/yejichoi2/Documents/lin_temp_folder/pseudotime_correlations.png", res = 170)
corr_plot_modified(data = subset(sce_PT_df, Group == "T1D"),
                   X = "sce_PT.slingPseudotime_1",
                   Y = c("hba1c", "bmi", "p2_raw_m",
                         "gbm_thick_art_mean",  "avg_c_k2"),
                   cor_method = "spearman",
                   dict = dict)
dev.off()
```

###### Raw (colored by PT subtypes)
```{r echo = F, warning=F, message = F}
# GBM width
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = log(gbm_thick_art_mean), color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "GBM thickness",
       x = "Pseudotime",
       y = "Log(GBM thickness)",
       color = "Cell type") +
  theme_minimal() 

# Diabetes duration
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = diabetes_duration, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Diabetes duration",
       x = "Pseudotime",
       y = "Diabetes duration",
       color = "Cell type") +
  theme_minimal() 

# Age
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = age, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "Age",
       x = "Pseudotime",
       y = "Age",
       color = "Cell type") +
  theme_minimal() 

# HbA1C
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = hba1c, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "HbA1c",
       x = "Pseudotime",
       y = "HbA1c",
       color = "Cell type") +
  theme_minimal() 

# M-value
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = p2_raw_m, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "M-value",
       x = "Pseudotime",
       y = "M-value",
       color = "Cell type") +
  theme_minimal() 

# BMI
subset(sce_PT_df, Group == "T1D") %>%
  ggplot(aes(x = sce_PT.slingPseudotime_1, y = bmi, color = celltype)) +
  geom_point(alpha = 0.8) +
  geom_smooth(se = F, method = "lm", linetype = "dashed", color = "black") +
  labs(title = "BMI",
       x = "Pseudotime",
       y = "BMI",
       color = "Cell type") +
  theme_minimal() 
```


###### Mixed models
```{r eval = F}
library(lme4)
library(MuMIn)
# GBM width
gbm_mod <- lmer(gbm_thick_art_mean ~ sce_PT.slingPseudotime_1 + (1|michigan_id), data = sce_PT_df)
summary(gbm_mod)
r.squaredGLMM(gbm_mod)

# Diabetes duration
diabetes_duration_mod <- lmer(diabetes_duration ~ sce_PT.slingPseudotime_1 + 
                                (1|michigan_id), data = sce_PT_df)
summary(diabetes_duration_mod)
r.squaredGLMM(diabetes_duration_mod)

# Age
age_mod <- lmer(age ~ sce_PT.slingPseudotime_1 + 
                  (1|michigan_id), data = sce_PT_df)
summary(age_mod)
r.squaredGLMM(age_mod)

# HbA1C
hba1c_mod <- lmer(hba1c ~ sce_PT.slingPseudotime_1 + 
                    (1|michigan_id), data = sce_PT_df)
summary(hba1c_mod)
r.squaredGLMM(hba1c_mod)

# M-value
mvalue_mod <- lmer(p2_raw_m ~ sce_PT.slingPseudotime_1 + 
                     (1|michigan_id), data = sce_PT_df)
summary(mvalue_mod)
r.squaredGLMM(mvalue_mod)

# BMI
bmi_mod <- lmer(bmi ~ sce_PT.slingPseudotime_1 + 
                  (1|michigan_id), data = sce_PT_df)
summary(bmi_mod)
r.squaredGLMM(bmi_mod)

```


### By GBM width (quartiles)
```{r echo = F, warning = F, message=F}
sce_PT$gbm_thick_quartile[is.na(sce_PT$gbm_thick_quartile)] <- "NA"
sce_PT_gbm_thick_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$gbm_thick_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, gbm_thick_quartile!= "NA"), x = "Lineage1", fill = "gbm_thick_quartile",
          color = "gbm_thick_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, gbm_thick_quartile!= "NA"), x = "Lineage2", fill = "gbm_thick_quartile",
          color = "gbm_thick_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$gbm_thick_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "gbm_thick_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_gbm_thick_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_gbm_thick_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By BMI (quartiles)
```{r echo = F, warning = F, message=F}
sce_PT$bmi_quartile[is.na(sce_PT$bmi_quartile)] <- "NA"
sce_PT_bmi_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$bmi_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, bmi_quartile!= "NA"), x = "Lineage1", fill = "bmi_quartile",
          color = "bmi_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, bmi_quartile!= "NA"), x = "Lineage2", fill = "bmi_quartile",
          color = "bmi_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "bmi_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_bmi_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_bmi_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By BMI (manual)
```{r echo = F, warning = F, message=F}
sce_PT$bmi_manual_cat[is.na(sce_PT$bmi_manual_cat)] <- "NA"
sce_PT_bmi_manual_cat <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$bmi_manual_cat), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, bmi_manual_cat!= "NA"), x = "Lineage1", fill = "bmi_manual_cat",
          color = "bmi_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, bmi_manual_cat!= "NA"), x = "Lineage2", fill = "bmi_manual_cat",
          color = "bmi_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "<20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "20-25", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "25-27", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$bmi_manual_cat == "27+", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "bmi_manual_cat")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_bmi_manual_cat, genes[i])
  gene_expression <- plotGeneCount(sce_PT_bmi_manual_cat, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By diabetes duration (quartile)
```{r echo = F, warning = F, message=F}
sce_PT$diabetes_duration_quartile[is.na(sce_PT$diabetes_duration_quartile)] <- "NA"
sce_PT_diabetes_duration_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$diabetes_duration_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, diabetes_duration_quartile!= "NA"), x = "Lineage1", fill = "diabetes_duration_quartile",
          color = "diabetes_duration_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, diabetes_duration_quartile!= "NA"), x = "Lineage2", fill = "diabetes_duration_quartile",
          color = "diabetes_duration_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "diabetes_duration_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_diabetes_duration_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_diabetes_duration_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By diabetes duration (manual)
```{r echo = F, warning = F, message=F}
sce_PT_diabetes_duration_manual_cat <- 
  fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$diabetes_duration_manual_cat), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, diabetes_duration_manual_cat!= "NA"), x = "Lineage1", fill = "diabetes_duration_manual_cat",
          color = "diabetes_duration_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, diabetes_duration_manual_cat!= "NA"), x = "Lineage2", fill = "diabetes_duration_manual_cat",
          color = "diabetes_duration_manual_cat") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "5-10", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "10-15", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "15-20", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$diabetes_duration_manual_cat == "20+", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "diabetes_duration_manual_cat")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_diabetes_duration_manual_cat, genes[i])
  gene_expression <- plotGeneCount(sce_PT_diabetes_duration_manual_cat, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By age (quartile)
```{r echo = F, warning = F, message=F}
sce_PT <- as.SingleCellExperiment(so_PT)
sce_PT <- slingshot(sce_PT, reducedDim = 'UMAP', clusterLabels = colData(sce_PT)$celltype,
                                   start.clus = 'PT-3', end.clus = 'PT-4')
sce_PT_age_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$age_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, age_quartile!= "NA"), x = "Lineage1", fill = "age_quartile",
          color = "age_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, age_quartile!= "NA"), x = "Lineage2", fill = "age_quartile",
          color = "age_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$age_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "age_quartile")
for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_age_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_age_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

### By M-value (quartile)
```{r echo = F, warning = F, message=F}
sce_PT$raw_m_quartile[is.na(sce_PT$raw_m_quartile)] <- "NA"
sce_PT_raw_m_quartile <- fitGAM(sce_PT, 
       conditions = factor(colData(sce_PT)$raw_m_quartile), 
       nknots = 5, 
       genes = genes)

# Lineage 1 density plot
ggdensity(subset(plot_df, raw_m_quartile!= "NA"), x = "Lineage1", fill = "raw_m_quartile",
          color = "raw_m_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 1])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 1],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 1])

# Lineage 2 density plot
ggdensity(subset(plot_df, raw_m_quartile!= "NA"), x = "Lineage2", fill = "raw_m_quartile",
          color = "raw_m_quartile") +
  labs(x = "Pseudotime", y = "Density")
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q1", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q2", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 2])
ks.test(slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q3", 2],
        slingPseudotime(sce_PT)[colData(sce_PT)$raw_m_quartile == "q4", 2])

DimPlot(object = so_PT, reduction = "umap", group.by = "raw_m_quartile")

for (i in 1:length(genes)){
  plot <- plot_smooth(sce_PT_raw_m_quartile, genes[i])
  gene_expression <- plotGeneCount(sce_PT_raw_m_quartile, counts, gene = genes[i],
                        title = genes[i])
  print(plot + gene_expression)
}
```

# Pseudotime trajectory
(Muted output for now)
```{r subset-by-celltype, echo = F, eval = F}
# Get unique values of LR_clusters
unique_LR_clusters <- unique(so$LR_clusters)
unique_LR_clusters <- unique_LR_clusters[!(unique_LR_clusters %in% c("TAL_highUMI", "PT_lowQuality", "IC-A_lowQuality", "B"))]

# Initialize an empty list to store UMAP plots
umap_plots <- list()

# Loop through each unique value of LR_clusters and create UMAP for each cell type
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("so_", cluster_value)
  print(subset_name)
  assign(subset_name, subset(so, LR_clusters == cluster_value))
  assign(subset_name, NormalizeData(get(subset_name)))
  assign(subset_name, ScaleData(get(subset_name)))
  assign(subset_name, RunPCA(get(subset_name), features = VariableFeatures(object = get(subset_name))))
  assign(subset_name, FindNeighbors(get(subset_name)))
  assign(subset_name, FindClusters(get(subset_name)))
  if (dim(get(subset_name))[2] > 5000) {
    assign(subset_name, RunUMAP(get(subset_name), dims = 1:30))
    umap_plot <- DimPlot(object = get(subset_name), reduction = "umap")
    umap_plots[[length(umap_plots) + 1]] <- umap_plot
  }
  if (dim(get(subset_name))[2] <= 5000 && dim(get(subset_name))[2] > 1000) {
    assign(subset_name, RunUMAP(get(subset_name), dims = 1:4))
    umap_plot <- DimPlot(object = get(subset_name), reduction = "umap")
    umap_plots[[length(umap_plots) + 1]] <- umap_plot
  }
  if (dim(get(subset_name))[2] <= 1000 && dim(get(subset_name))[2] > 500) {
    assign(subset_name, RunUMAP(get(subset_name), dims = 1:5))
    umap_plot <- DimPlot(object = get(subset_name), reduction = "umap")
    umap_plots[[length(umap_plots) + 1]] <- umap_plot
  }
}

wrap_plots(umap_plots[1:4], nrow = 2)
wrap_plots(umap_plots[5:8], nrow = 2)
wrap_plots(umap_plots[9:12], nrow = 2)
wrap_plots(umap_plots[13:16], nrow = 2)
```

## By group
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_grp <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), slingshot(get(subset_name), reducedDim = 'UMAP', clusterLabels = colData(get(subset_name))$Group,
                                   start.clus = 'HC', end.clus = 'T1D'))
    results_grp[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_grp[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("HC" = "#ffcb77", "T1D" = "#fe6d73"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("HC" = "#ffcb77", "T1D" = "#fe6d73"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$Group)))

    results_grp[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$Group ==  "HC"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$Group ==  "T1D"]),
                     group = c(rep("HC", sum(colData(get(subset_name))$Group ==  "HC")),
                               rep("T1D", sum(colData(get(subset_name))$Group ==  "T1D")))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = group)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Group", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_grp[[subset_name]]$density_plot <- density_plot
      
    # Perform Kolmogorov-Smirnov test
    ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$Group == "HC"],
                         get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$Group == "T1D"])
    results_grp[[subset_name]]$ks_test <- ks_result
    
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_grp <- list()
pseudotime_list_grp <- list()

for (cluster_value in gsub("sce_","", names(results_grp))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_grp[[cluster_value]] <- results_grp[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_grp[[cluster_value]])
    pseudotime_list_grp[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_grp <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By GBM width (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_gbm_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$gbm_thick_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_gbm_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_gbm_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$gbm_thick_quartile)))
    results_gbm_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q4"]),
                     gbm_thick_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = gbm_thick_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "GBM thickness (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_gbm_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$gbm_thick_quartile == "q2"])
    # results_gbm_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_gbm_quartile <- list()
pseudotime_list_gbm_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_gbm_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_gbm_quartile[[cluster_value]] <- results_gbm_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_gbm_quartile[[cluster_value]])
    pseudotime_list_gbm_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_gbm_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By BMI (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_bmi_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$bmi_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_bmi_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_bmi_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$bmi_quartile)))
    results_bmi_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q4"]),
                     bmi_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = bmi_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "BMI (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_bmi_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_quartile == "q2"])
    # results_bmi_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_bmi_quartile <- list()
pseudotime_list_bmi_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_bmi_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_bmi_quartile[[cluster_value]] <- results_bmi_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_bmi_quartile[[cluster_value]])
    pseudotime_list_bmi_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_bmi_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By BMI (manually categorized)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_bmi_manual_cat <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$bmi_manual_cat,
                     start.clus = '<20', end.clus = '27+'))
    results_bmi_manual_cat[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_bmi_manual_cat[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("<20" = "#ffcb77", "20-25" = "#fe6d73",
                                            "25-27" = "skyblue" , "27+" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("<20" = "#ffcb77", "20-25" = "#fe6d73",
                                            "25-27" = "skyblue" , "27+" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$bmi_manual_cat)))
    results_bmi_manual_cat[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "<20"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "20-25"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "25-27"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "27+"]),
                     bmi_manual_cat = c(rep("<20", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "<20"])),
                                                      rep("20-25", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "20-25"])),
                                                      rep("25-27", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "25-27"])),
                                                      rep("27+", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat ==  "27+"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = bmi_manual_cat)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "BMI (manual)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_bmi_manual_cat[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$bmi_manual_cat == "q2"])
    # results_diabetes_duration_manual_cat[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_bmi_manual_cat <- list()
pseudotime_list_bmi_manual_cat <- list()

for (cluster_value in gsub("sce_","", names(results_bmi_manual_cat))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_bmi_manual_cat[[cluster_value]] <- results_bmi_manual_cat[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_bmi_manual_cat[[cluster_value]])
    pseudotime_list_bmi_manual_cat[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_bmi_manual_cat <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By diabetes duration (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_diabetes_duration_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$diabetes_duration_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_diabetes_duration_quartile[[subset_name]]$sce <- get(subset_name)

    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_diabetes_duration_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$diabetes_duration_quartile)))
    results_diabetes_duration_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q4"]),
                     diabetes_duration_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = diabetes_duration_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Diabetes duration (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_diabetes_duration_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_quartile == "q2"])
    # results_diabetes_duration_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_diabetes_duration_quartile <- list()
pseudotime_list_diabetes_duration_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_diabetes_duration_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_diabetes_duration_quartile[[cluster_value]] <- results_diabetes_duration_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_diabetes_duration_quartile[[cluster_value]])
    pseudotime_list_diabetes_duration_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_diabetes_duration_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By diabetes duration (manually categorized)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_diabetes_duration_manual_cat <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$diabetes_duration_manual_cat,
                     start.clus = '<5', end.clus = '20+'))
    results_diabetes_duration_manual_cat[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_diabetes_duration_manual_cat[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("<5" = "#ffcb77", "q2" = "5-10",
                                            "10-15" = "skyblue" , "15-20" = "pink",
                                            "20+" = "purple"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("<5" = "#ffcb77", "q2" = "5-10",
                                            "10-15" = "skyblue" , "15-20" = "pink",
                                            "20+" = "purple"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$diabetes_duration_manual_cat)))
    results_diabetes_duration_manual_cat[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "<5"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "5-10"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "10-15"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "15-20"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "20+"]),
                     diabetes_duration_manual_cat = c(rep("<5", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "<5"])),
                                                      rep("5-10", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "5-10"])),
                                                      rep("10-15", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "10-15"])),
                                                      rep("15-20", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "15-20"])),
                                                      rep("20+", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat ==  "20+"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = diabetes_duration_manual_cat)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Diabetes duration (manual)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_diabetes_duration_manual_cat[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$diabetes_duration_manual_cat == "q2"])
    # results_diabetes_duration_manual_cat[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_diabetes_duration_manual_cat <- list()
pseudotime_list_diabetes_duration_manual_cat <- list()

for (cluster_value in gsub("sce_","", names(results_diabetes_duration_manual_cat))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_diabetes_duration_manual_cat[[cluster_value]] <- results_diabetes_duration_manual_cat[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_diabetes_duration_manual_cat[[cluster_value]])
    pseudotime_list_diabetes_duration_manual_cat[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_diabetes_duration_manual_cat <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By age (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_age_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$age_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_age_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_age_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$age_quartile)))
    results_age_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q4"]),
                     age_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$age_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = age_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "Age (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_age_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$age_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$age_quartile == "q2"])
    # results_age_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_age_quartile <- list()
pseudotime_list_age_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_age_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_age_quartile[[cluster_value]] <- results_age_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_age_quartile[[cluster_value]])
    pseudotime_list_age_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_age_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```

## By M-value (quartile)
```{r echo = F, warning=F, eval=F}
# Initialize an empty list to store results
results_raw_m_quartile <- list()

# Loop through each unique LR cluster
for (cluster_value in unique_LR_clusters) {
  subset_name <- paste0("sce_", cluster_value)
  
  # Check if the object exists and if its dimensionality is greater than 500
  if (exists(subset_name) && ncol(get(subset_name)) > 500) {
    print(paste("Processing", subset_name))
    
    # Perform Slingshot analysis
    assign(paste0("sce_", cluster_value), 
           slingshot(get(subset_name), 
                     reducedDim = 'UMAP', 
                     clusterLabels = colData(get(subset_name))$raw_m_quartile,
                     start.clus = 'q1', end.clus = 'q4'))
    results_raw_m_quartile[[subset_name]]$sce <- get(subset_name)
    
    # Plot UMAP
    shuffle <- sample(ncol(get(subset_name)))
    umap_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                      xlab = "UMAP-1", ylab = "UMAP-2",
                      col = hcl.colors(100, alpha = .5)[cut(get(paste0("sce_", cluster_value))$slingPseudotime_1, breaks = 100)][shuffle])
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    results_raw_m_quartile[[subset_name]]$umap_plot <- umap_plot
      
    # Plot UMAP with colored groups
    umap_colored_plot <- plot(reducedDims(get(subset_name))$UMAP[shuffle, ], asp = 1, pch = 16,
                              xlab = "UMAP-1", ylab = "UMAP-2",
                              col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                            "q3" = "skyblue" , "q4" = "pink"), 0.4))
    lines(SlingshotDataSet(get(subset_name)), type = "lineages")
    lines(SlingshotDataSet(get(subset_name)))
    legend("topright", pch = 16, col = alpha(c("q1" = "#ffcb77", "q2" = "#fe6d73",
                                               "q3" = "skyblue" , "q4" = "pink"), 0.4), bty = "n", 
           legend = levels(factor(colData(sce)$raw_m_quartile)))
    results_raw_m_quartile[[subset_name]]$umap_colored_plot <- umap_colored_plot
      
    # Plot pseudotime densities
    ds <- data.frame(pseudotime = c(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q1"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q2"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q3"],
                                    get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q4"]),
                     raw_m_quartile = c(rep("q1", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q1"])),
                                            rep("q2", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q2"])),
                                            rep("q3", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q3"])),
                                            rep("q4", length(get(subset_name)$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile ==  "q4"])))) %>%
      filter(!is.na(pseudotime))
    density_plot <- ggplot(ds, aes(x = pseudotime, fill = raw_m_quartile)) +
      geom_density(alpha = 0.5) +
      theme_bw() +
      labs(fill = "M-value (quartile)", x = "Pseudotime", y = "Density", title = cluster_value)
    print(density_plot)
    results_raw_m_quartile[[subset_name]]$density_plot <- density_plot
      
    # # Perform Kolmogorov-Smirnov test
    # ks_result <- ks.test(get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile == "q1"],
    #                      get(paste0("sce_", cluster_value))$slingPseudotime_1[colData(get(subset_name))$raw_m_quartile == "q2"])
    # results_raw_m_quartile[[subset_name]]$ks_test <- ks_result
    # 
  } else {
    print(paste("Skipping", subset_name, "as it does not meet the criteria (dimension <= 500)."))
  }
}

slingshot_results_raw_m_quartile <- list()
pseudotime_list_raw_m_quartile <- list()

for (cluster_value in gsub("sce_","", names(results_raw_m_quartile))) {
    # Access the results for the current cluster type and store it in the list
    slingshot_results_raw_m_quartile[[cluster_value]] <- results_raw_m_quartile[[paste0("sce_", cluster_value)]]$sce
    pseudotime <- slingPseudotime(slingshot_results_raw_m_quartile[[cluster_value]])
    pseudotime_list_raw_m_quartile[[cluster_value]] <- pseudotime
    
    subset_name <- paste0("so_", cluster_value)
    meta <- get(subset_name)@meta.data
    meta$pseudotime_raw_m_quartile <- pseudotime
    assign(subset_name, AddMetaData(get(subset_name), metadata = meta))
}
```




# Differential expression
## Trajectory by group (HC -> T1D)
```{r fit-gam-grp, echo = F, eval=F}
# plotGeneCount(sce_PT, counts, gene = genes[[1]])

for (i in 1:length(results_grp)) {
  grp_celltypes <- gsub("sce_", "", names(results_grp))
  sce_object <- results_grp[[i]]$sce
  assign(paste0("results_grp$sce_", grp_celltypes[i], "$sce"), 
         fitGAM(sce_object, 
                          conditions = factor(colData(sce_object)$Group), 
                          nknots = 5, 
                          genes = c(genes, oxy_phos_genes)))
}

plotSmoothers(results_grp$sce_EC$sce, assays(results_grp$sce_EC$sce)$counts, gene = "ACO1", alpha = 1, border = TRUE) + ggtitle("ACO1")
plotSmoothers(results_grp$sce_PC$sce, assays(results_grp$sce_PC$sce)$counts, gene = "ACO2", alpha = 1, border = TRUE) + ggtitle("ACO2")
plotSmoothers(results_grp$sce_DCT$sce, assays(results_grp$sce_DCT$sce)$counts, gene = "CS", alpha = 1, border = TRUE) + ggtitle("CS")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "FH", alpha = 1, border = TRUE) + ggtitle("FH")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH1", alpha = 1, border = TRUE) + ggtitle("IDH1")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH2", alpha = 1, border = TRUE) + ggtitle("IDH2")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH3A", alpha = 1, border = TRUE) + ggtitle("IDH3A")
plotSmoothers(results_grp$sce_PT$sce, assays(results_grp$sce_PT$sce)$counts, gene = "IDH3B", alpha = 1, border = TRUE) + ggtitle("IDH3B")
```

