---
title: "CROCODILE nebula vis"
author: "Ye Ji Choi"
format: html
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r echo = F, include = F}
library(dplyr)
library(kableExtra)
library(knitr)
library(ggplot2)
library(purrr)
library(tidyr)
library(stats)
library(patchwork)
library(UpSetR)
library(readxl)
library(fgsea)
library(ReactomeGSA)
library(GSEABase)
library(enrichplot)
library(enrichR)
library(ggrepel)
library(forcats)
library(stringr)
library(jsonlite)
library(aws.s3)
library(fgsea)
library(reshape2)
```

```{r include = F}
## Create an S3 client
keys <- fromJSON("/Users/choiyej/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Bjornstad Pyle Lab/keys.json")

Sys.setenv(
  "AWS_ACCESS_KEY_ID" = keys$MY_ACCESS_KEY,
  "AWS_SECRET_ACCESS_KEY" = keys$MY_SECRET_KEY,
  "AWS_DEFAULT_REGION" = "",
  "AWS_REGION" = "",
  "AWS_S3_ENDPOINT" = "s3.kopah.uw.edu"
)

source("~/GitHub/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
```

```{r echo = F}
plot_volcano <- function(data, fc, p_col, title_suffix, x_axis, y_axis, file_suffix, p_thresh = 0.05,
                         positive_text = "Positive with Dapagliflozin", 
                         negative_text = "Negative with Dapagliflozin",
                         formula = "group", legend_position = c(0.8, 0.9)) {
  set.seed(1)
  top_pos <- data %>%
    dplyr::filter(!!sym(fc) > 0 & !!sym(p_col) < p_thresh) %>%
    dplyr::arrange(!!sym(p_col)) %>%
    slice_head(n=20)

  top_neg <- data %>%
    dplyr::filter(!!sym(fc) < 0 & !!sym(p_col) < p_thresh) %>%
    dplyr::arrange(!!sym(p_col)) %>%
    slice_head(n=20)

  data <- data %>%
    dplyr::mutate(top_color = case_when(Gene %in% top_pos$Gene ~ "#f28482",
                                 Gene %in% top_neg$Gene ~ "#457b9d",
                                 TRUE ~ "#ced4da"),
           top_size = if_else(Gene %in% c(top_pos$Gene, top_neg$Gene), 1.3, 1),
           top_lab  = if_else(Gene %in% c(top_pos$Gene, top_neg$Gene), Gene, ""))

  # Max and min for annotation arrows
  max_fc <- max(data[[fc]], na.rm = TRUE)
  min_fc <- min(data[[fc]], na.rm = TRUE)
  
  # Dynamically set y-limits
  max_y <- max(-log10(data[[p_col]]), na.rm = TRUE)
  ylim_lower <- -3.5
  ylim_upper <- max_y * 1.05

  p <- ggplot(data, aes(x = !!sym(fc), y = -log10(!!sym(p_col)))) +
    geom_hline(yintercept = -log10(p_thresh), linetype = "dashed", color = "darkgrey") +
    geom_point(alpha = 0.5, aes(color = top_color, size = top_size)) +
    geom_text_repel(aes(label = top_lab, color = top_color),
                    size = 3, max.overlaps = Inf,
                    force = 6, segment.alpha = 0.3, segment.size = 0.3) +
    labs(title = paste(title_suffix),
         x = paste(x_axis),
         y = paste(y_axis)) +
    scale_size_continuous(range = c(1, 1.3)) + 
    scale_color_manual(values = c("#457b9d"="#457b9d", "#ced4da"="#ced4da", "#f28482"="#f28482")) +
    theme_minimal() +
    theme(legend.title = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 15),
          title = element_text(size = 9)) +
    guides(color = "none", size = "none")  +
    annotate("segment", 
             x=max_fc/8, 
             xend=(max_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(max_fc/8, (max_fc*7)/8)), 
             y=-2, 
             label=positive_text,
             size=3, color="#343a40") +
    annotate("segment", 
             x=min_fc/8, 
             xend=(min_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(min_fc/8, (min_fc*7)/8)), 
             y=-2, 
             label=negative_text,
             size=3, color="#343a40") +
    annotate("text", 
             x=max_fc * 0.95,
             y=-3.5, 
             hjust = 1,
             label=paste0("Formula: ~ ", formula, " + (1|subject)"),
             size=3, color="#343a40") +
    scale_y_continuous(expand = c(0, 0)) +
    coord_cartesian(ylim = c(ylim_lower, ylim_upper), clip = "off") +
    theme(legend.title = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 9),
          legend.position = legend_position,
          legend.justification = c(1, 1),
          plot.margin = margin(t = 10, r = 20, b = 28, l = 20),
          axis.title.x = element_text(margin = margin(t = 32)))

  ggsave(paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Volcano Plots/", file_suffix, ".jpeg"), plot = p, width = 7, height = 5)
  return(p)
}
```


# Untargeted
```{r echo = F}
# Define paths (same for all cell types)
input_path <- "CROCODILE comparison analysis"
input_suffix <- "_croc_untargeted_t1dvhc.rds"
output_base_path <- "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/CROCODILE"
bg_path <- "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/GSEA"
bucket <- "attempt"
region <- ""

run_cell_type_analysis("PT", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("TAL", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("PC", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("Immune_Myeloid", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("Immune_Lymphoid",
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("Immune", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("IC", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("EC", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("FIBVSMCP", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)
run_cell_type_analysis("EC", 
                       input_path = input_path,
                       input_suffix = input_suffix,
                       output_base_path = output_base_path,
                       bg_path = bg_path)

```

# PT Targeted
```{r echo = F}
# Read in nebula results saved to kopah
croc_pt_res <- s3readRDS('CROCODILE comparison analysis/PT/nebula/pt_croc_targeted_tca_oxphos_t1dvhc.rds', bucket = "attempt", region = "")

# nebula only keeps results for converged
croc_pt_res_convergence <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    converged <- croc_pt_res[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

croc_pt_res_converged <- croc_pt_res_convergence %>%
  filter(Convergence_Code >=-10)

croc_pt_res_combined <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    df <- croc_pt_res[[gene_name]]$summary
    df <- df %>% filter(gene_name %in% croc_pt_res_converged$Gene) %>%
      mutate(Gene = gene_name)
    return(df)
  }
)

croc_pt_res_combined <- croc_pt_res_combined %>%
  ungroup() %>%
  mutate(fdr_interaction = p.adjust(p_groupType_1_Diabetes, method = "fdr"))
```

#### Volcano Plot
```{r echo = F}
croc_pt_res_combined <- croc_pt_res_combined %>%
  mutate(group_direction = case_when(p_groupType_1_Diabetes < 0.05 &
                                           logFC_groupType_1_Diabetes > 0 ~ "Positive",
                                         p_groupType_1_Diabetes < 0.05 &
                                           logFC_groupType_1_Diabetes > 0 ~ "Negative",
                                         T ~ "NS"),
         group_direction_fdr = case_when(`fdr_interaction` < 0.05 & 
                                               logFC_groupType_1_Diabetes > 0 ~ "Positive",
                                         `fdr_interaction` < 0.05 & 
                                           logFC_groupType_1_Diabetes > 0 ~ "Negative",
                                         T ~ "NS"))
```


```{r echo =F}
tca_genes <- c(
  "ACO1", "ACO2", "IDH1", "IDH2", "IDH3A", "IDH3B", "IDH3G", "OGDH", "OGDHL",
  "SUCLA2", "SUCLG1", "SUCLG2", "SDHA", "FH", "MDH1", "MDH2",  "CS"
)
oxy_phos_genes <- c(
  "NDUFS6",  "SDHB", "SDHC", "SDHD",
  "UQCRC1", "UQCRC2", "COX4I1", "COX4I2", "ATP5PF"
)

```

#### GSEA (fgsea)


```{r echo = F}
bg_path <- "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/GSEA"
# For GSEA
# Filter out the gmt files for KEGG, Reactome and GOBP
list.files(bg_path)
gmt_files <- list.files(path = bg_path, pattern = '.gmt', full.names = TRUE)
gmt_files
kegg_legacy <- prepare_gmt(gmt_files[1], unique(croc_pt_res_combined$Gene), savefile = FALSE)
reactome <- prepare_gmt(gmt_files[3], unique(croc_pt_res_combined$Gene), savefile = FALSE)
go <- prepare_gmt(gmt_files[4], unique(croc_pt_res_combined$Gene), savefile = FALSE)

# rank genes by logFC
rankings_croc_pt <- croc_pt_res_combined$logFC_groupType_1_Diabetes
names(rankings_croc_pt) <- croc_pt_res_combined$Gene
rankings_croc_pt <- sort(rankings_croc_pt, decreasing = TRUE)
plot(rankings_croc_pt)
min(rankings_croc_pt)
max(rankings_croc_pt)
```

```{r echo = F}
set.seed(1234)

kegg_legacy_res_croc_pt <- fgsea(pathways = kegg_legacy,
                                 stats = rankings_croc_pt,
                                 scoreType = 'std', 
                                 minSize = 3,
                                 maxSize = 500,
                                 nproc = 1)

reactome_res_croc_pt <- fgsea(pathways = reactome,
                              stats = rankings_croc_pt,
                              scoreType = 'std', 
                              minSize = 3,
                              maxSize = 500,
                              nproc = 1)
go_res_croc_pt <- fgsea(pathways = go,
                        stats = rankings_croc_pt,
                        scoreType = 'std', 
                        minSize = 5,
                        maxSize = 500,
                        nproc = 1)

fgsea <- data.frame("KEGG Legacy"=c(sum(kegg_legacy_res_croc_pt[, padj < 0.05], na.rm = T), sum(kegg_legacy_res_croc_pt[, pval < 0.05], na.rm = T)),
                         "REACTOME"=c(sum(reactome_res_croc_pt[, padj < 0.05], na.rm = T), sum(reactome_res_croc_pt[, pval < 0.05], na.rm = T)),
                         "GO"=c(sum(go_res_croc_pt[, padj < 0.05], na.rm = T), sum(go_res_croc_pt[, pval < 0.05], na.rm = T)))
rownames(fgsea) <- c("adj.pval", "p.val")
```

##### KEGG Legacy
```{r echo = F}
plot_fgsea_transpose(kegg_legacy_res_croc_pt, title = "PT Top 30 KEGG Pathways", xmin = 0, xmax = 3)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_kegg_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```

##### REACTOME
```{r echo = F}
plot_fgsea_transpose(reactome_res_croc_pt, title = "PT Top 30 REACTOME Pathways", xmin = 0, xmax = 2.6)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_reactome_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```
##### GO
```{r echo = F}
plot_fgsea_transpose(go_res_croc_pt, title = "PT Top 30 GO Pathways", xmin = 0, xmax = 5)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_go_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```


