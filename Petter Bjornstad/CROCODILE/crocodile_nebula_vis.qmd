---
title: "CROCODILE nebula vis"
author: "Ye Ji Choi"
format: html
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r echo = F, include = F}
library(dplyr)
library(kableExtra)
library(knitr)
library(ggplot2)
library(purrr)
library(tidyr)
library(stats)
library(patchwork)
library(UpSetR)
library(readxl)
library(fgsea)
library(ReactomeGSA)
library(GSEABase)
library(enrichplot)
library(enrichR)
library(ggrepel)
library(forcats)
library(stringr)
library(jsonlite)
library(aws.s3)
library(fgsea)
library(reshape2)
```

```{r echo = F}
# Function: Adjacency matrix to list -------------------------
matrix_to_list <- function(pws){
  pws.l <- list()
  for (pw in colnames(pws)) {
    pws.l[[pw]] <- rownames(pws)[as.logical(pws[, pw])]
  }
  return(pws.l)
}
## Function: prepare_gmt --------------------------------------
prepare_gmt <- function(gmt_file, genes_in_data, savefile = FALSE){
  # for debug
  #file <- gmt_files[1]
  #genes_in_data <- df$gene_symbol
  
  # Read in gmt file
  gmt <- gmtPathways(gmt_file)
  hidden <- unique(unlist(gmt))
  
  # Convert gmt file to a matrix with the genes as rows and for each go annotation (columns) the values are 0 or 1
  mat <- matrix(NA, dimnames = list(hidden, names(gmt)),
                nrow = length(hidden), ncol = length(gmt))
  for (i in 1:dim(mat)[2]){
    mat[,i] <- as.numeric(hidden %in% gmt[[i]])
  }
  
  #Subset to the genes that are present in our data to avoid bias
  hidden1 <- intersect(genes_in_data, hidden)
  mat <- mat[hidden1, colnames(mat)[which(colSums(mat[hidden1,])>5)]] # filter for gene sets with more than 5 genes annotated
  # And get the list again
  final_list <- matrix_to_list(mat) # for this we use the function we previously defined
  
  if(savefile){
    saveRDS(final_list, file = paste0(gsub('.gmt', '', gmt_file), '_subset_', format(Sys.time(), '%d%m'), '.RData'))
  }
  
  print('Wohoo! .gmt conversion successfull!:)')
  return(final_list)
}

# List of acronyms to uppercase
acronyms <- c("rna", "dna", "mtor", "foxo", "ppar", "nmd", "fgfr", "robo", 
              "bhl", "cov", "jak", "stat", "wnt", "hiv", "bcl", "mapk",
              "pt", "tal", "pc", "ic", "ec", "fibvsmcp")
special_mixed <- c("rrna", "mrna", "trna", "gtpase", "atpase", "robos", "slits", "fibvsmcp")
special_replacements <- c("rRNA", "mRNA", "tRNA", "GTPase", "ATPase", "ROBOs", "SLITs", "FIB/VSMC/P")

replace_mixed_case <- function(text, from, to) {
  for (i in seq_along(from)) {
    pattern <- paste0("\\b", from[i], "\\b")
    text <- str_replace_all(text, regex(pattern, ignore_case = TRUE), to[i])
  }
  return(text)
}

capitalize_acronyms <- function(text, terms) {
  for (term in terms) {
    pattern <- paste0("\\b", term, "\\b")
    replacement <- toupper(term)
    text <- str_replace_all(text, regex(pattern, ignore_case = TRUE), replacement)
  }
  return(text)
}
```


```{r include = F}
## Create an S3 client
keys <- fromJSON("/Users/choiyej/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Bjornstad Pyle Lab/keys.json")

Sys.setenv(
  "AWS_ACCESS_KEY_ID" = keys$MY_ACCESS_KEY,
  "AWS_SECRET_ACCESS_KEY" = keys$MY_SECRET_KEY,
  "AWS_DEFAULT_REGION" = "",
  "AWS_REGION" = "",
  "AWS_S3_ENDPOINT" = "s3.kopah.uw.edu"
)
```

```{r echo = F}
plot_fgsea_transpose <- function(fgsea_res,
                       top_n = 30,
                       title = "Top Enriched Pathways",
                       xmin = 0,
                       xmax = 3,
                       xnudge = (xmax - xmin)/100,
                       text1 = 6.5,
                       text2 = 18,
                       text3 = 20) {
  
  fgsea_res <- fgsea_res %>%
    arrange(pval) %>%
    head(top_n) %>%
    mutate(
      direction = case_when((NES < 0 & pval <= 0.05 ~ "Negative"), 
                            (NES > 0 & pval <= 0.05 ~ "Positive"),
                            (NES < 0 & pval > 0.05 ~ "Negative p > 0.05"), 
                            (NES > 0 & pval > 0.05 ~ "Positive p > 0.05")),
      face = case_when((NES < 0 & pval <= 0.05 ~ "bold"), 
                            (NES > 0 & pval <= 0.05 ~ "bold"),
                            (NES < 0 & pval > 0.05 ~ "plain"), 
                            (NES > 0 & pval > 0.05 ~ "plain")),
      pathway_clean = str_remove(pathway, "^KEGG_"), 
      pathway_clean = str_remove(pathway_clean, "^REACTOME_"), 
      pathway_clean = str_remove(pathway_clean, "^GOBP_"), 
      pathway_clean = str_remove(pathway_clean, "^GOMF_"), 
      pathway_clean = str_replace_all(pathway_clean, "_", " "),
      pathway_clean = str_to_sentence(pathway_clean),
      pathway_clean = str_replace_all(pathway_clean, "\\bi\\b", "I"),
      pathway_clean = str_replace_all(pathway_clean, "\\bii\\b", "II"),
      pathway_clean = str_replace_all(pathway_clean, "\\biii\\b", "III"),
      pathway_clean = str_replace_all(pathway_clean, "\\biv\\b", "IV"),
      pathway_clean = str_replace_all(pathway_clean, "\\bv\\b", "V"),
      pathway_clean = str_replace_all(pathway_clean, regex("\\(immune\\)", ignore_case = TRUE), "(IMMUNE)"),
      pathway_clean = capitalize_acronyms(pathway_clean, acronyms),
      pathway_clean = replace_mixed_case(pathway_clean, special_mixed, special_replacements),
      pathway_clean = paste0(pathway_clean, " (", size, ")")
    ) %>%
    arrange(pval)
  
  fgsea_res$pathway_clean <- reorder(fgsea_res$pathway_clean, -abs(fgsea_res$NES))
  
  fgsea_res %>%
    ggplot(aes(x = abs(NES), y = fct_rev(pathway_clean), label = pathway_clean)) +
    geom_point(aes(size = -log10(pval), color = direction, alpha = 0.8)) +
    # geom_vline(xintercept = 2, linetype = "dashed") +
    geom_text(aes(group = pathway_clean, color = direction, fontface = face), 
              hjust = 0, size = text1, nudge_x = xnudge) +
    scale_size_binned() +
    scale_color_manual(values = c("Positive" = "#c75146", "Negative" = "#2c7da0", 
                                  "Positive p > 0.05" = "#e18c80", "Negative p > 0.05" = "#7ab6d1")) +
    scale_x_continuous(limits = c(xmin, xmax), expand = expansion(mult = c(0, 0))) +
    scale_y_discrete(expand = expansion(add = 1)) +
    labs(
      x = "NES",
      y = "Pathways",
      color = "Direction",
      size = "-log(p-value)",
      title = title
    ) +
    guides(alpha = "none") +
    theme_bw() +
    theme(
      axis.text.y = element_blank(),
      panel.grid = element_blank(),
      axis.text.x = element_text(size = text3),
      axis.title = element_text(size = text3),
      axis.ticks.y = element_blank(), 
      legend.position = c(0.9, 0.2),
      legend.background = element_blank(),
      legend.box.background = element_rect(color = "black"),
      legend.title = element_text(size = text2),
      legend.text = element_text(size = text2),
      title = element_text(size = text3)
    )
}
```

```{r echo = F}
plot_volcano_associations <- function(clin_results, fc, p_col, title_suffix, x_axis, y_axis, file_suffix, p_thresh = 0.05,  treatment_results, treatment_p_col, 
                         positive_text = "Positive with Dapagliflozin", 
                         negative_text = "Negative with Dapagliflozin",
                         formula = "treatment", color_by = "treatment_direction",
                         legend_position = c(0.3,0.8)) {
  
  set.seed(1)
  
  # Add treatment effect directions
  treatment_results <- treatment_results %>%
    mutate(treatment_direction = case_when(`p_treatmentDapagliflozin:visitPOST` < 0.05 &
                                             `logFC_treatmentDapagliflozin:visitPOST` > 0 ~ "Up w/ Dapagliflozin",
                                           `p_treatmentDapagliflozin:visitPOST` < 0.05 &
                                             `logFC_treatmentDapagliflozin:visitPOST` < 0 ~ "Down w/ Dapagliflozin",
                                           TRUE ~ "NS"))
  
  # Genes significant in both models
  sig_clin_genes <- clin_results %>%
    filter(!!sym(p_col) < p_thresh) %>%
    pull(Gene)
  
  sig_treat_genes <- treatment_results %>%
    filter(!!sym(treatment_p_col) < p_thresh) %>%
    pull(Gene)
  
  sig_both_genes <- intersect(sig_clin_genes, sig_treat_genes)
  
  # Top 5 left pos / neg and right pos / neg
  top_5_left_pos <- clin_results %>%
    filter(Gene %in% sig_both_genes, !!sym(fc) < 0) %>%
    left_join(treatment_results %>% 
                dplyr::select(Gene, `logFC_treatmentDapagliflozin:visitPOST`), by = "Gene") %>%
    filter(`logFC_treatmentDapagliflozin:visitPOST` > 0) %>%
    arrange(!!sym(p_col)) %>%
    slice_head(n = 5) %>%
    pull(Gene)
  
  top_5_left_neg <- clin_results %>%
    filter(Gene %in% sig_both_genes, !!sym(fc) < 0) %>%
    left_join(treatment_results %>% 
                dplyr::select(Gene, `logFC_treatmentDapagliflozin:visitPOST`), by = "Gene") %>%
    filter(`logFC_treatmentDapagliflozin:visitPOST` < 0) %>%
    arrange(!!sym(p_col)) %>%
    slice_head(n = 5) %>%
    pull(Gene)
  
  top_5_right_pos <- clin_results %>%
    filter(Gene %in% sig_both_genes, !!sym(fc) > 0) %>%
    left_join(treatment_results %>% 
                dplyr::select(Gene, `logFC_treatmentDapagliflozin:visitPOST`), by = "Gene") %>%
    filter(`logFC_treatmentDapagliflozin:visitPOST` > 0) %>%
    arrange(!!sym(p_col)) %>%
    slice_head(n = 5) %>%
    pull(Gene)
  
  top_5_right_neg <- clin_results %>%
    filter(Gene %in% sig_both_genes, !!sym(fc) > 0) %>%
    left_join(treatment_results %>% 
                dplyr::select(Gene, `logFC_treatmentDapagliflozin:visitPOST`), by = "Gene") %>%
    filter(`logFC_treatmentDapagliflozin:visitPOST` < 0) %>%
    arrange(!!sym(p_col)) %>%
    slice_head(n = 5) %>%
    pull(Gene)
  
  # Combine for plotting
  top_label_genes <- c(top_5_left_pos, top_5_left_neg, top_5_right_pos, top_5_right_neg)
  
  message("Number of genes significant in both: ", length(sig_both_genes))
  message("Number of labeled genes: ", length(top_label_genes))
  
  clin_results <- clin_results %>%
    mutate(shape_var_plot = case_when(
      Gene %in% sig_both_genes & !!sym(fc) < 0 & treatment_results$treatment_direction[match(Gene, treatment_results$Gene)] == "Up w/ Dapagliflozin" ~ "Left_Pos",
      Gene %in% sig_both_genes & !!sym(fc) < 0 & treatment_results$treatment_direction[match(Gene, treatment_results$Gene)] == "Down w/ Dapagliflozin" ~ "Left_Neg",
      Gene %in% sig_both_genes & !!sym(fc) > 0 & treatment_results$treatment_direction[match(Gene, treatment_results$Gene)] == "Up w/ Dapagliflozin" ~ "Right_Pos",
      Gene %in% sig_both_genes & !!sym(fc) > 0 & treatment_results$treatment_direction[match(Gene, treatment_results$Gene)] == "Down w/ Dapagliflozin" ~ "Right_Neg",
      TRUE ~ "NS"
    ),
    color_var_plot = case_when(
      Gene %in% sig_both_genes ~ treatment_results$treatment_direction[match(Gene, treatment_results$Gene)],
      TRUE ~ "NS"
    ),
    top_lab = if_else(Gene %in% top_label_genes, Gene, "")
    )
  
  clin_results$shape_var_plot <- factor(clin_results$shape_var_plot, 
                                        levels = c("Left_Pos", "Left_Neg", "Right_Pos", "Right_Neg", "NS"))
  
  clin_results$color_var_plot <- factor(clin_results$color_var_plot, 
                                        levels = c("Up w/ Dapagliflozin", "Down w/ Dapagliflozin", "NS"))
  
  # Max and min for annotation arrows
  max_fc <- max(clin_results[[fc]], na.rm = TRUE)
  min_fc <- min(clin_results[[fc]], na.rm = TRUE)
  
  # Plot
  p <- ggplot(clin_results, aes(x = !!sym(fc), y = -log10(!!sym(p_col)))) +
    geom_hline(yintercept = -log10(p_thresh), linetype = "dashed", color = "darkgrey") +
    geom_point(alpha = 0.3, aes(fill = color_var_plot, 
                                color = color_var_plot,
                                shape = shape_var_plot), size = 2) +
    scale_shape_manual(values = c("Left_Pos" = 23, "Left_Neg" = 23, "Right_Pos" = 22, "Right_Neg" = 22, "NS" = 21),
                       labels = c("Left_Pos" = "Left Pos", "Left_Neg" = "Left Neg", 
                                  "Right_Pos" = "Right Pos", "Right_Neg" = "Right Neg", "NS" = "NS")) +
    scale_color_manual(values = c("Up w/ Dapagliflozin" = "#f28482", "Down w/ Dapagliflozin" = "#457b9d", "NS" = "#ced4da")) +
    scale_fill_manual(values = c("Up w/ Dapagliflozin" = "#f28482", "Down w/ Dapagliflozin" = "#457b9d", "NS" = "#ced4da")) +
    guides(color = guide_legend(title = NULL), fill = "none") +
    geom_text_repel(aes(label = top_lab, color = color_var_plot),
                    size = 3, max.overlaps = Inf, force = 10,
                    segment.alpha = 0.5, segment.size = 0.4,
                    min.segment.length = 0, box.padding = 0.6, point.padding = 0.4,
                    segment.color = "#ced4da") +
    labs(title = paste(title_suffix),
         x = paste(x_axis),
         y = paste(y_axis)) +
    theme_minimal() +
    annotate("segment", 
             x=max_fc/8, 
             xend=(max_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(max_fc/8, (max_fc*7)/8)), 
             y=-2, 
             label=positive_text,
             size=3, color="#343a40") +
    annotate("segment", 
             x=min_fc/8, 
             xend=(min_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(min_fc/8, (min_fc*7)/8)), 
             y=-2, 
             label=negative_text,
             size=3, color="#343a40") +
    annotate("text", 
             x=max_fc * 0.95,
             y=-3.5, 
             hjust = 1,
             label=paste0("Formula: ~ ", formula, " + (1|subject)"),
             size=3, color="#343a40") +
    scale_y_continuous(expand=c(0,0)) +
    coord_cartesian(ylim = c(0, 15), clip="off") +
    theme(legend.title = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 9),
          legend.position = legend_position,
          legend.justification = c(1, 1),
          plot.margin = margin(t = 10, r = 20, b = 28, l = 20),
          axis.title.x = element_text(margin = margin(t = 32))) + 
    guides(shape = "none")
  
  # Save
  ggsave(paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Volcano Plots/", file_suffix, ".jpeg"), plot = p, width = 7, height = 5)
  
  return(p)
}
```

```{r echo = F}
plot_volcano <- function(data, fc, p_col, title_suffix, x_axis, y_axis, file_suffix, p_thresh = 0.05,
                         positive_text = "Positive with Dapagliflozin", 
                         negative_text = "Negative with Dapagliflozin",
                         formula = "group", legend_position = c(0.8, 0.9)) {
  set.seed(1)
  top_pos <- data %>%
    dplyr::filter(!!sym(fc) > 0 & !!sym(p_col) < p_thresh) %>%
    dplyr::arrange(!!sym(p_col)) %>%
    slice_head(n=20)

  top_neg <- data %>%
    dplyr::filter(!!sym(fc) < 0 & !!sym(p_col) < p_thresh) %>%
    dplyr::arrange(!!sym(p_col)) %>%
    slice_head(n=20)

  data <- data %>%
    dplyr::mutate(top_color = case_when(Gene %in% top_pos$Gene ~ "#f28482",
                                 Gene %in% top_neg$Gene ~ "#457b9d",
                                 TRUE ~ "#ced4da"),
           top_size = if_else(Gene %in% c(top_pos$Gene, top_neg$Gene), 1.3, 1),
           top_lab  = if_else(Gene %in% c(top_pos$Gene, top_neg$Gene), Gene, ""))

  # Max and min for annotation arrows
  max_fc <- max(data[[fc]], na.rm = TRUE)
  min_fc <- min(data[[fc]], na.rm = TRUE)
  
  # Dynamically set y-limits
  max_y <- max(-log10(data[[p_col]]), na.rm = TRUE)
  ylim_lower <- -3.5
  ylim_upper <- max_y * 1.05

  p <- ggplot(data, aes(x = !!sym(fc), y = -log10(!!sym(p_col)))) +
    geom_hline(yintercept = -log10(p_thresh), linetype = "dashed", color = "darkgrey") +
    geom_point(alpha = 0.5, aes(color = top_color, size = top_size)) +
    geom_text_repel(aes(label = top_lab, color = top_color),
                    size = 3, max.overlaps = Inf,
                    force = 6, segment.alpha = 0.3, segment.size = 0.3) +
    labs(title = paste(title_suffix),
         x = paste(x_axis),
         y = paste(y_axis)) +
    scale_size_continuous(range = c(1, 1.3)) + 
    scale_color_manual(values = c("#457b9d"="#457b9d", "#ced4da"="#ced4da", "#f28482"="#f28482")) +
    theme_minimal() +
    theme(legend.title = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 15),
          title = element_text(size = 9)) +
    guides(color = "none", size = "none")  +
    annotate("segment", 
             x=max_fc/8, 
             xend=(max_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(max_fc/8, (max_fc*7)/8)), 
             y=-2, 
             label=positive_text,
             size=3, color="#343a40") +
    annotate("segment", 
             x=min_fc/8, 
             xend=(min_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(min_fc/8, (min_fc*7)/8)), 
             y=-2, 
             label=negative_text,
             size=3, color="#343a40") +
    annotate("text", 
             x=max_fc * 0.95,
             y=-3.5, 
             hjust = 1,
             label=paste0("Formula: ~ ", formula, " + (1|subject)"),
             size=3, color="#343a40") +
    scale_y_continuous(expand = c(0, 0)) +
    coord_cartesian(ylim = c(ylim_lower, ylim_upper), clip = "off") +
    theme(legend.title = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 9),
          legend.position = legend_position,
          legend.justification = c(1, 1),
          plot.margin = margin(t = 10, r = 20, b = 28, l = 20),
          axis.title.x = element_text(margin = margin(t = 32)))

  ggsave(paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Volcano Plots/", file_suffix, ".jpeg"), plot = p, width = 7, height = 5)
  return(p)
}
```


```{r echo = F}
plot_volcano_labels <- function(data, fc, p_col, title_suffix, x_axis, y_axis, file_suffix, p_thresh = 0.05,
                         positive_text = "Positive with Dapagliflozin", 
                         negative_text = "Negative with Dapagliflozin",
                         formula = "group", legend_position = c(0.8, 0.9),
                         label_genes = NULL) {
  set.seed(1)

  # Define which genes to label
  data <- data %>%
    mutate(label_me = if (!is.null(label_genes)) Gene %in% label_genes else FALSE,
           direction = case_when(
             !!sym(fc) > 0 & !!sym(p_col) < p_thresh & label_me ~ "pos",
             !!sym(fc) < 0 & !!sym(p_col) < p_thresh & label_me ~ "neg",
             label_me ~ "ns",
             TRUE ~ "none"
           ),
           top_color = case_when(
             direction == "pos" ~ "#f28482",
             direction == "neg" ~ "#457b9d",
             direction == "ns" ~ "#ced4da",
             TRUE ~ "#ced4da"
           ),
           top_size = if_else(direction != "none", 1.3, 1),
           top_lab = if_else(direction != "none", Gene, "")
    )

  max_fc <- max(data[[fc]], na.rm = TRUE)
  min_fc <- min(data[[fc]], na.rm = TRUE)

  max_y <- max(-log10(data[[p_col]]), na.rm = TRUE)
  ylim_lower <- -3.5
  ylim_upper <- max_y * 1.05

  p <- ggplot(data, aes(x = !!sym(fc), y = -log10(!!sym(p_col)))) +
    geom_hline(yintercept = -log10(p_thresh), linetype = "dashed", color = "darkgrey") +
    geom_point(alpha = 0.5, aes(color = top_color, size = top_size)) +
    geom_text_repel(aes(label = top_lab, color = top_color),
                    size = 3, max.overlaps = Inf,
                    force = 6, segment.alpha = 0.3, segment.size = 0.3) +
    labs(title = paste(title_suffix),
         x = paste(x_axis),
         y = paste(y_axis)) +
    scale_size_continuous(range = c(1, 1.3)) + 
    scale_color_identity() +
    theme_minimal() +
    theme(legend.title = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 15),
          title = element_text(size = 9)) +
    guides(color = "none", size = "none")  +
    annotate("segment", 
             x=max_fc/8, 
             xend=(max_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(max_fc/8, (max_fc*7)/8)), 
             y=-2, 
             label=positive_text,
             size=3, color="#343a40") +
    annotate("segment", 
             x=min_fc/8, 
             xend=(min_fc*7)/8, 
             y=-1.5,
             col="darkgrey", arrow=arrow(length=unit(0.2, "cm"))) +
    annotate("text", 
             x=mean(c(min_fc/8, (min_fc*7)/8)), 
             y=-2, 
             label=negative_text,
             size=3, color="#343a40") +
    annotate("text", 
             x=max_fc * 0.95,
             y=-3.5, 
             hjust = 1,
             label=paste0("Formula: ~ ", formula, " + (1|subject)"),
             size=3, color="#343a40") +
    scale_y_continuous(expand = c(0, 0)) +
    coord_cartesian(ylim = c(ylim_lower, ylim_upper), clip = "off") +
    theme(legend.title = element_blank(),
          panel.grid = element_blank(),
          text = element_text(size = 9),
          legend.position = legend_position,
          legend.justification = c(1, 1),
          plot.margin = margin(t = 10, r = 20, b = 28, l = 20),
          axis.title.x = element_text(margin = margin(t = 32)))

  ggsave(paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Volcano Plots/", file_suffix, ".jpeg"), plot = p, width = 7, height = 5)
  return(p)
}

```

# PT Untargeted

```{r echo = F}
# Read in nebula results saved to kopah
croc_pt_res <- s3readRDS('CROCODILE comparison analysis/PT/nebula/pt_croc_untargeted_t1dvhc.rds', bucket = "attempt", region = "")

# nebula only keeps results for converged
croc_pt_res_convergence <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    converged <- croc_pt_res[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

croc_pt_res_converged <- croc_pt_res_convergence %>%
  filter(Convergence_Code >=-10)

croc_pt_res_combined <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    df <- croc_pt_res[[gene_name]]$summary
    df <- df %>% filter(gene_name %in% croc_pt_res_converged$Gene) %>%
      mutate(Gene = gene_name)
    return(df)
  }
)

croc_pt_res_combined <- croc_pt_res_combined %>%
  ungroup() %>%
  mutate(fdr_interaction = p.adjust(p_groupType_1_Diabetes, method = "fdr"))
```

#### Volcano Plot
```{r echo = F}
croc_pt_res_combined <- croc_pt_res_combined %>%
  mutate(group_direction = case_when(p_groupType_1_Diabetes < 0.05 &
                                           logFC_groupType_1_Diabetes > 0 ~ "Positive",
                                         p_groupType_1_Diabetes < 0.05 &
                                           logFC_groupType_1_Diabetes > 0 ~ "Negative",
                                         T ~ "NS"),
         group_direction_fdr = case_when(`fdr_interaction` < 0.05 & 
                                               logFC_groupType_1_Diabetes > 0 ~ "Positive",
                                         `fdr_interaction` < 0.05 & 
                                           logFC_groupType_1_Diabetes > 0 ~ "Negative",
                                         T ~ "NS"))
```


```{r echo =F}
tca_genes <- c(
  "ACO1", "ACO2", "IDH1", "IDH2", "IDH3A", "IDH3B", "IDH3G", "OGDH", "OGDHL",
  "SUCLA2", "SUCLG1", "SUCLG2", "SDHA", "FH", "MDH1", "MDH2",  "CS"
)
oxy_phos_genes <- c(
  "NDUFS6",  "SDHB", "SDHC", "SDHD",
  "UQCRC1", "UQCRC2", "COX4I1", "COX4I2", "ATP5PF"
)


plot_volcano(croc_pt_res_combined, "logFC_groupType_1_Diabetes", 
             "p_groupType_1_Diabetes",
             "", 
             "logFC group", 
             "-log10(p-value)",
             "nebula/croc_pt_deg",
             formula = "group",
             positive_text = "Upregulated in T1D compared to LC",
             negative_text = "Downregulated in T1D compared to LC")

plot_volcano(croc_pt_res_combined, "logFC_groupType_1_Diabetes", 
             "fdr_interaction",
             "", 
             "logFC group", 
             "-log10(FDR adjusted p-value)",
             "nebula/croc_pt_deg_fdr",
             formula = "group",
             positive_text = "Upregulated in T1D compared to LC",
             negative_text = "Downregulated in T1D compared to LC")
```

#### GSEA (fgsea)


```{r echo = F}
bg_path <- "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/GSEA"
# For GSEA
# Filter out the gmt files for KEGG, Reactome and GOBP
list.files(bg_path)
gmt_files <- list.files(path = bg_path, pattern = '.gmt', full.names = TRUE)
gmt_files
kegg_legacy <- prepare_gmt(gmt_files[1], unique(croc_pt_res_combined$Gene), savefile = FALSE)
reactome <- prepare_gmt(gmt_files[3], unique(croc_pt_res_combined$Gene), savefile = FALSE)
go <- prepare_gmt(gmt_files[4], unique(croc_pt_res_combined$Gene), savefile = FALSE)

# rank genes by logFC
rankings_croc_pt <- croc_pt_res_combined$logFC_groupType_1_Diabetes
names(rankings_croc_pt) <- croc_pt_res_combined$Gene
rankings_croc_pt <- sort(rankings_croc_pt, decreasing = TRUE)
plot(rankings_croc_pt)
min(rankings_croc_pt)
max(rankings_croc_pt)
```

```{r echo = F}
set.seed(1234)

kegg_legacy_res_croc_pt <- fgsea(pathways = kegg_legacy,
                                 stats = rankings_croc_pt,
                                 scoreType = 'std', 
                                 minSize = 3,
                                 maxSize = 500,
                                 nproc = 1)

reactome_res_croc_pt <- fgsea(pathways = reactome,
                              stats = rankings_croc_pt,
                              scoreType = 'std', 
                              minSize = 3,
                              maxSize = 500,
                              nproc = 1)
go_res_croc_pt <- fgsea(pathways = go,
                        stats = rankings_croc_pt,
                        scoreType = 'std', 
                        minSize = 5,
                        maxSize = 500,
                        nproc = 1)

fgsea <- data.frame("KEGG Legacy"=c(sum(kegg_legacy_res_croc_pt[, padj < 0.05], na.rm = T), sum(kegg_legacy_res_croc_pt[, pval < 0.05], na.rm = T)),
                         "REACTOME"=c(sum(reactome_res_croc_pt[, padj < 0.05], na.rm = T), sum(reactome_res_croc_pt[, pval < 0.05], na.rm = T)),
                         "GO"=c(sum(go_res_croc_pt[, padj < 0.05], na.rm = T), sum(go_res_croc_pt[, pval < 0.05], na.rm = T)))
rownames(fgsea) <- c("adj.pval", "p.val")
```

##### KEGG Legacy
```{r echo = F}
plot_fgsea_transpose(kegg_legacy_res_croc_pt, title = "PT Top 30 KEGG Pathways", xmin = 1, xmax = 3)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_kegg_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```

##### REACTOME
```{r echo = F}
plot_fgsea_transpose(reactome_res_croc_pt, title = "PT Top 30 REACTOME Pathways", xmin = 1.45, xmax = 2.6)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_reactome_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```
##### GO
```{r echo = F}
plot_fgsea_transpose(go_res_croc_pt, title = "PT Top 30 GO Pathways", xmin = 1.4, xmax = 5)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_go_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```
```{r echo = F}
nebula_pt_results_list_reml_pooled <- s3readRDS('PT/nebula/pt_attempt_hvg_nebula_res_reml_pooled.rds', bucket = "attempt", region = "")

# nebula only keeps results for converged
pt_nebula_convergence_reml_pooled <- map_dfr(
  names(nebula_pt_results_list_reml_pooled),
  function(gene_name) {
    converged <- nebula_pt_results_list_reml_pooled[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

pt_nebula_converged_reml_pooled <- pt_nebula_convergence_reml_pooled %>%
  filter(Convergence_Code >=-10)

pt_nebula_res_combined_reml_pooled <- map_dfr(
  names(nebula_pt_results_list_reml_pooled),
  function(gene_name) {
    df <- nebula_pt_results_list_reml_pooled[[gene_name]]$summary
    df <- df %>% filter(gene_name %in% pt_nebula_converged_reml_pooled$Gene) %>%
      mutate(Gene = gene_name)
    return(df)
  }
)

pt_nebula_res_combined_reml_pooled <- pt_nebula_res_combined_reml_pooled%>%
  mutate(fdr_interaction = p.adjust(`p_treatmentDapagliflozin:visitPOST`, method = "fdr"))

pt_nebula_disp_combined_reml_pooled <- map_dfr(
  names(nebula_pt_results_list_reml_pooled),
  function(gene_name) {
    df <- nebula_pt_results_list_reml_pooled[[gene_name]]$overdispersion
    df <- df %>% mutate(Gene = gene_name)
    return(df)
  }
)

```

```{r echo = F}
# Read in nebula results saved to kopah
croc_pt_res <- s3readRDS('CROCODILE comparison analysis/PT/nebula/pt_croc_untargeted_t1dvhc.rds', bucket = "attempt", region = "")

# nebula only keeps results for converged
croc_pt_res_convergence <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    converged <- croc_pt_res[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

croc_pt_res_converged <- croc_pt_res_convergence %>%
  filter(Convergence_Code >=-10)

croc_pt_res_combined <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    df <- croc_pt_res[[gene_name]]$summary
    df <- df %>% filter(gene_name %in% croc_pt_res_converged$Gene) %>%
      mutate(Gene = gene_name)
    return(df)
  }
)

croc_pt_res_combined <- croc_pt_res_combined %>%
  ungroup() %>%
  mutate(fdr_interaction = p.adjust(p_groupType_1_Diabetes, method = "fdr"))
```

# PT Targeted
```{r echo = F}
# Read in nebula results saved to kopah
croc_pt_res <- s3readRDS('CROCODILE comparison analysis/PT/nebula/pt_croc_targeted_tca_oxphos_t1dvhc.rds', bucket = "attempt", region = "")

# nebula only keeps results for converged
croc_pt_res_convergence <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    converged <- croc_pt_res[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

croc_pt_res_converged <- croc_pt_res_convergence %>%
  filter(Convergence_Code >=-10)

croc_pt_res_combined <- map_dfr(
  names(croc_pt_res),
  function(gene_name) {
    df <- croc_pt_res[[gene_name]]$summary
    df <- df %>% filter(gene_name %in% croc_pt_res_converged$Gene) %>%
      mutate(Gene = gene_name)
    return(df)
  }
)

croc_pt_res_combined <- croc_pt_res_combined %>%
  ungroup() %>%
  mutate(fdr_interaction = p.adjust(p_groupType_1_Diabetes, method = "fdr"))
```

#### Volcano Plot
```{r echo = F}
croc_pt_res_combined <- croc_pt_res_combined %>%
  mutate(group_direction = case_when(p_groupType_1_Diabetes < 0.05 &
                                           logFC_groupType_1_Diabetes > 0 ~ "Positive",
                                         p_groupType_1_Diabetes < 0.05 &
                                           logFC_groupType_1_Diabetes > 0 ~ "Negative",
                                         T ~ "NS"),
         group_direction_fdr = case_when(`fdr_interaction` < 0.05 & 
                                               logFC_groupType_1_Diabetes > 0 ~ "Positive",
                                         `fdr_interaction` < 0.05 & 
                                           logFC_groupType_1_Diabetes > 0 ~ "Negative",
                                         T ~ "NS"))
```


```{r echo =F}
tca_genes <- c(
  "ACO1", "ACO2", "IDH1", "IDH2", "IDH3A", "IDH3B", "IDH3G", "OGDH", "OGDHL",
  "SUCLA2", "SUCLG1", "SUCLG2", "SDHA", "FH", "MDH1", "MDH2",  "CS"
)
oxy_phos_genes <- c(
  "NDUFS6",  "SDHB", "SDHC", "SDHD",
  "UQCRC1", "UQCRC2", "COX4I1", "COX4I2", "ATP5PF"
)

```

#### GSEA (fgsea)


```{r echo = F}
bg_path <- "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/GSEA"
# For GSEA
# Filter out the gmt files for KEGG, Reactome and GOBP
list.files(bg_path)
gmt_files <- list.files(path = bg_path, pattern = '.gmt', full.names = TRUE)
gmt_files
kegg_legacy <- prepare_gmt(gmt_files[1], unique(croc_pt_res_combined$Gene), savefile = FALSE)
reactome <- prepare_gmt(gmt_files[3], unique(croc_pt_res_combined$Gene), savefile = FALSE)
go <- prepare_gmt(gmt_files[4], unique(croc_pt_res_combined$Gene), savefile = FALSE)

# rank genes by logFC
rankings_croc_pt <- croc_pt_res_combined$logFC_groupType_1_Diabetes
names(rankings_croc_pt) <- croc_pt_res_combined$Gene
rankings_croc_pt <- sort(rankings_croc_pt, decreasing = TRUE)
plot(rankings_croc_pt)
min(rankings_croc_pt)
max(rankings_croc_pt)
```

```{r echo = F}
set.seed(1234)

kegg_legacy_res_croc_pt <- fgsea(pathways = kegg_legacy,
                                 stats = rankings_croc_pt,
                                 scoreType = 'std', 
                                 minSize = 3,
                                 maxSize = 500,
                                 nproc = 1)

reactome_res_croc_pt <- fgsea(pathways = reactome,
                              stats = rankings_croc_pt,
                              scoreType = 'std', 
                              minSize = 3,
                              maxSize = 500,
                              nproc = 1)
go_res_croc_pt <- fgsea(pathways = go,
                        stats = rankings_croc_pt,
                        scoreType = 'std', 
                        minSize = 5,
                        maxSize = 500,
                        nproc = 1)

fgsea <- data.frame("KEGG Legacy"=c(sum(kegg_legacy_res_croc_pt[, padj < 0.05], na.rm = T), sum(kegg_legacy_res_croc_pt[, pval < 0.05], na.rm = T)),
                         "REACTOME"=c(sum(reactome_res_croc_pt[, padj < 0.05], na.rm = T), sum(reactome_res_croc_pt[, pval < 0.05], na.rm = T)),
                         "GO"=c(sum(go_res_croc_pt[, padj < 0.05], na.rm = T), sum(go_res_croc_pt[, pval < 0.05], na.rm = T)))
rownames(fgsea) <- c("adj.pval", "p.val")
```

##### KEGG Legacy
```{r echo = F}
plot_fgsea_transpose(kegg_legacy_res_croc_pt, title = "PT Top 30 KEGG Pathways", xmin = 0, xmax = 3)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_kegg_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```

##### REACTOME
```{r echo = F}
plot_fgsea_transpose(reactome_res_croc_pt, title = "PT Top 30 REACTOME Pathways", xmin = 0, xmax = 2.6)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_reactome_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```
##### GO
```{r echo = F}
plot_fgsea_transpose(go_res_croc_pt, title = "PT Top 30 GO Pathways", xmin = 0, xmax = 5)

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Pathways/nebula/croc_pt_res_top30_go_pathways.jpeg",
       width = 27.5, height = 14, scale = 1)
```


