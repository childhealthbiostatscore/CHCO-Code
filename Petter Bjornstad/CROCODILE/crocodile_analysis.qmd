---
title: CROCODILE Analysis
author: Ye Ji Choi and Tim Vigers
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r setup, include=F}
library(dplyr)
library(reticulate)
library(corrplot)
library(knitr)
library(Hmisc)
library(tidyverse)
library(scales)
library(kableExtra)
library(gtools)
library(superheat)
library(emmeans)
library(table1)
library(ggpubr)
library(arsenal)
library(Hmisc)
library(lme4)
library(nlme)
library(knitr)
library(MASS)
library(ppcor)
options(scipen = 999)
use_python("/usr/bin/python3", required = TRUE)
```

```{python, include=F}
import pandas as pd
import numpy as np
import statistics
import rpy2
import rpy2.robjects as ro
import seaborn as sns
import matplotlib.pyplot as plt
from tableone import TableOne
from rpy2.robjects.packages import importr
from rpy2.robjects import pandas2ri
from scipy.stats import mannwhitneyu

# Import data and variable names
df = pd.read_csv("/Volumes/Peds Endo/Petter Bjornstad/Data Harmonization/Data Clean/harmonized_dataset.csv", low_memory=False)
exclude = pd.read_csv("/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/exclude_list.csv", low_memory=False)
var_names = pd.read_csv("/Volumes/Peds Endo/Petter Bjornstad/Data Harmonization/data_dictionary_master.csv", low_memory=False)
# Create dictionary of variable names
var_dict = var_names.set_index('variable_name')['label'].to_dict()
# Subset to CROCODILE
df = df.loc[df["study"]=="CROCODILE"]
# Get last values for each visit
df = df.groupby(by=["record_id", "visit"]).agg("last").reset_index()
# Create urine albumin excretion variable (general 24 hrs)
df = df.assign(aer_24 = (df.u24_mab * df.u24_vl) / 1440)
# Height-adjusted
df["height_adj_total_kidney_volume"] = df["total_kidney_volume_ml"] / (df["height"] / 100)
df["height_adj_right_kidney_volume"] = df["right_kidney_volume_ml"] / (df["height"] / 100)
df["height_adj_left_kidney_volume"] = df["left_kidney_volume_ml"] / (df["height"] / 100)
# Exclude any removed participants
df = df.loc[df["participation_status"] == "Participated"]
# Average left/right cortex
df["avg_c_f"] = df[["lc_f", "rc_f"]].mean(axis=1)
df["avg_c_k1"] = df[["lc_k1", "rc_k1"]].mean(axis=1)
df["avg_c_k2"] = df[["lc_k2", "rc_k2"]].mean(axis=1)
df["avg_c_vb"] = df[["lc_vb", "rc_vb"]].mean(axis=1)
# Average left/right medulla
df["avg_m_f"] = df[["lm_f", "rm_f"]].mean(axis=1)
df["avg_m_k1"] = df[["lm_k1", "rm_k1"]].mean(axis=1)
df["avg_m_k2"] = df[["lm_k2", "rm_k2"]].mean(axis=1)
df["avg_m_vb"] = df[["lm_vb", "rm_vb"]].mean(axis=1)
# Average left/right MRI (Pre-Furoside)
df["avg_pcascl"] = df[["pcasl3d_left", "pcasl3d_right"]].mean(axis=1)
df["avg_k_r2_bl"] = df[["bold_l_bl_kidney", "bold_r_bl_kidney"]].mean(axis=1)
df["avg_c_r2_bl"] = df[["bold_l_bl_cortex", "bold_r_bl_cortex"]].mean(axis=1)
df["avg_m_r2_bl"] = df[["bold_l_bl_medulla", "bold_r_bl_medulla"]].mean(axis=1)
df["avg_k_r2_pf"] = df[["bold_l_pf_kidney", "bold_r_pf_kidney"]].mean(axis=1)
df["avg_c_r2_pf"] = df[["bold_l_pf_cortex", "bold_r_pf_cortex"]].mean(axis=1)
df["avg_m_r2_pf"] = df[["bold_l_pf_medulla", "bold_r_pf_medulla"]].mean(axis=1)
df["avg_k_fsoc"] = df[["fsoc_l_kidney", "fsoc_r_kidney"]].mean(axis=1)
df["avg_c_fsoc"] = df[["fsoc_l_cortex", "fsoc_r_cortex"]].mean(axis=1)
df["avg_m_fsoc"] = df[["fsoc_l_medulla", "fsoc_r_medulla"]].mean(axis=1)
df["avg_c_adc"] = df[["adc_left", "adc_right"]].mean(axis=1)
# Average left/right PET Voxel wise
df["avg_m_k2_wo_cyst_vw"] = df[["lm_k2_wo_cyst_vw", "rm_k2_wo_cyst_vw"]].mean(axis=1)
df["avg_c_k2_wo_cyst_vw"] = df[["lc_k2_wo_cyst_vw", "rc_k2_wo_cyst_vw"]].mean(axis=1)
# M/I
df["m_i"] = df["p2_raw_m"] / df["p2_steady_state_insulin"]
excluded_df = pd.merge(df, exclude, on='record_id')

# Categorical variables
cat = ["sex","race","statin", "angiotensin_receptor_blocker", "ace_inhibitor", "insulin_pump_timepoint", "raasi_timepoint", "statin", "metformin_timepoint", "sglti_timepoint", "glp1_agonist_timepoint", "cgm_yn", "kidney_side"]
groupby = "group"
```

# Descriptive Tables

```{r include = F}
source("/Users/choiyej/GitHub/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/correlation_function.R")
source("/Users/choiyej/GitHub/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/label_harmonized_function.R")

dat <- py$df
dat_exc <- py$excluded_df
crc_dxa <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/CRC_extremities_lean_mass.csv")
dat <- dat %>% left_join(crc_dxa)
dat <- dat %>% mutate(appendicular_lean_mass = left_arm_lean_g + right_arm_lean_g + left_leg_lean_g + right_leg_lean_g,
                      musclemass = (1.12 * appendicular_lean_mass) - 0.63)
dict <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/Data Harmonization/data_dictionary_master.csv")
dict <- label_harmonized_dict(dat, dict)
dict <- dict %>%
  mutate(gbm_thick_artmean = "GBM thickness (nm)",
         p2_gc_m = "GC M-value (mg/kg/min)",
         appendicular_lean_mass = "Appendicular lean mass",
         musclemass = "Muscle mass")
dat$kidney_side <- as.factor(dat$kidney_side)

save(dat, file = "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/croc_data.RData")

table_one <- tableby(group ~ age + sex + fe(race) + weight + height + kwt(bmi, "Nmiss", "median", "q1q3", "range") +  hba1c + diabetes_duration + sbp + dbp + pulse + creatinine_s + eGFR_fas_cr + eGFR_CKD_epi+  kwt(acr_u, "Nmiss", "median", "q1q3", "range") + kwt(aer_24, "Nmiss", "median", "q1q3", "range")  + fe(metformin_timepoint) + fe(insulin_med_timepoint) +  fe(sglti_timepoint) + fe(tzd_timepoint) + fe(raasi_timepoint) + fe(statin) + kidney_side + appendicular_lean_mass + musclemass, data = dat, total=F)

table_dxa <- tableby(group ~ dexa_body_fat + dexa_fat_kg + dexa_lean_kg + dexa_trunk_kg + p2_raw_m + p2_raw_leanm + p2_gc_m + p2_gc_leanm + baseline_ffa, data = dat, total=F)

table_kidney <- tableby(group ~ gfr_raw_plasma + erpf_raw_plasma + rvr + glomerular_pressure + total_kidney_volume_ml + left_kidney_volume_ml + right_kidney_volume_ml + avg_pcascl + pcasl3d_left + pcasl3d_right + avg_c_r2 + bold_l_bl_cortex + bold_r_bl_cortex + avg_m_r2 + bold_l_bl_medulla + bold_r_bl_medulla + avg_m_fsoc + fsoc_l_medulla + fsoc_r_medulla + avg_c_adc + adc_left + adc_right, data = dat, total=F)

table_morpho <- tableby(group ~ fia +	glom_tuft_area +	glom_volume_weibel +	glom_volume_wiggins +	glom_volume_con +	mes_matrix_area +	mes_index +	mes_volume_weibel +	mes_volume_wiggins +	mes_volume_con +	glom_nuc_count + kwt(gbm_thick_harmmean, "Nmiss", "median", "q1q3", "range") + kwt(gbm_thick_artmean, "Nmiss", "median", "q1q3", "range"), data = dat, total=F)


table_pet <- tableby(group ~ lc_f +	rc_f +	avg_c_f +	lm_f +	rm_f +	avg_m_f +	lc_k1 +	rc_k1 +	avg_c_k1 +	lm_k1 +	rm_k1 + avg_m_k1 + lc_k2_wo_cyst_vw + rc_k2_wo_cyst_vw + avg_c_k2_wo_cyst_vw + lm_k2_wo_cyst_vw + rm_k2_wo_cyst_vw + avg_m_k2_wo_cyst_vw + lc_k2 + rc_k2 + avg_c_k2 + lm_k2 + rm_k2 + avg_m_k2 , data = dat_exc, total=F)

table_lipids <- tableby(group ~ cholesterol + ldl + hdl + kwt(triglycerides, "median", "q1q3"), data = dat, total=F)
```

```{r results='asis'}
summary(table_one, pfootnote = T, digits = 1, digits.p = 3, digits.pct = 0)
summary(table_dxa, pfootnote = T, digits = 1, digits.p = 3, digits.pct = 0)
summary(table_kidney, pfootnote = T, digits = 3, digits.p = 3, digits.pct = 0)
summary(table_morpho, pfootnote = T, digits = 1, digits.p = 3, digits.pct = 0)
summary(table_pet, pfootnote = T, digits = 3, digits.p = 3, digits.pct = 0)
summary(table_lipids, pfootnote = T, digits = 1, digits.p = 3, digits.pct = 0)
```

```{r include = F}
t1_dat <- dat %>% 
  dplyr::select(group, age, sex, race, height, weight, bmi, hba1c, diabetes_duration, sbp, dbp, pulse, cholesterol, ldl, hdl, triglycerides, creatinine_s, acr_u, cgm_yn, dexa_body_fat, dexa_fat_kg, dexa_lean_kg, dexa_trunk_kg, dexa_lean_kg, p2_raw_m, p2_raw_leanm, baseline_ffa, p1_ffa_suppression, p2_ffa_suppression) %>%
  arrange(group)

t2_dat <- dat_exc %>% 
  dplyr::select(group, gfr_raw_plasma, erpf_raw_plasma, rvr, glomerular_pressure, total_kidney_volume_ml, avg_pcascl, avg_c_r2, avg_m_r2, avg_m_fsoc, avg_c_adc, avg_c_f, avg_m_f, avg_c_k1, avg_m_k1, avg_c_k2, avg_m_k2, avg_c_k2_wo_cyst_vw, avg_m_k2_wo_cyst_vw) %>%
  arrange(group)

t3_dat <- dat %>% 
  dplyr::select(group, fia, glom_tuft_area, glom_volume_con, mes_matrix_area, mes_index, mes_volume_con, glom_nuc_count, gbm_thick_harmmean, gbm_thick_artmean) %>%
  arrange(group)

fig1_dat <- dat %>%
  dplyr::select(group, avg_c_k1, avg_c_k2) %>%
  arrange(group) %>%
  filter(!is.na(avg_c_k1))

write.csv(t1_dat, "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/CRC_t1_dat.csv", row.names = F)
write.csv(t2_dat, "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/CRC_t2_dat.csv", row.names = F)
write.csv(t3_dat, "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/CRC_t3_dat.csv", row.names = F)
write.csv(fig1_dat, "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/CRC_fig1_dat.csv", row.names = F)

```

```{r include = F}
t.test(dat$age ~ dat$group, var.equal=F)
p1_nefa <- lm(p1_ffa_suppression ~ group + baseline_ffa + dexa_body_fat, data = dat)
summary(p1_nefa)
lsmeans(p1_nefa, "group")
p2_nefa <- lm(p2_ffa_suppression ~ group + baseline_ffa + dexa_body_fat, data = dat)
summary(p2_nefa)
lsmeans(p2_nefa, "group")
```


```{r include = F}
m_raw <- lm(p2_gc_m ~ group + gfr_raw_plasma + dexa_body_fat, data = dat)
summary(m_raw)
lsmeans(m_raw, "group")
m_lean <- lm(p2_gc_leanm ~ group + gfr_raw_plasma + dexa_body_fat, data = dat)
summary(m_lean)
lsmeans(m_lean, "group")
```

```{r include = F}
summary(lm(avg_m_r2 ~ group + avg_m_f, data = dat))
lsmeans(lm(avg_m_r2 ~ group + avg_m_f, data = dat), specs = "group")
summary(lm(avg_m_fsoc ~ group + avg_m_f, data = dat))
lsmeans(lm(avg_m_fsoc ~ group + avg_m_f, data = dat), specs = "group")
```

```{r include = F}
summary(lm(avg_c_f ~ p2_gc_m + age + sex + hba1c, data = dat))
summary(lm(avg_m_f ~ p2_gc_m + age + sex + hba1c, data = dat))
summary(lm(avg_c_k2 ~ p2_gc_m + age + sex + hba1c, data = dat)) #
summary(lm(avg_m_k2 ~ p2_gc_m + age + sex + hba1c, data = dat)) #

summary(lm(avg_c_f ~ gbm_thick_artmean + age + sex + hba1c, data = dat))
summary(lm(avg_m_f ~ gbm_thick_artmean + age + sex + hba1c, data = dat))
summary(lm(avg_c_k2 ~ gbm_thick_artmean + age + sex + hba1c, data = dat))
summary(lm(avg_m_k2 ~ gbm_thick_artmean + age + sex + hba1c, data = dat))
```

# Correlations

## Pooled

```{r include = F}
# correlation_table_minimal(data = dat,
#                           relevant_vars = c("lc_f", "lm_f","lc_k2", "lm_k2",
#                                             "p2_raw_m", "p2_gc_m", "gbm_thick_artmean", "gbm_thick_harmmean"),
#                           n_cols = 4, dict = dict, cor_method = "spearman")
# correlation_table_minimal(data = dat, 
#                           relevant_vars = c("rc_f", "rm_f","rc_k2", "rm_k2", 
#                                             "p2_raw_m", "p2_gc_m", "gbm_thick_artmean", "gbm_thick_harmmean"), 
#                           n_cols = 4, dict = dict, cor_method = "spearman")
correlation_table_minimal(data = dat, 
                          relevant_vars = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2", 
                                            "p2_raw_m", "p2_gc_m", "gbm_thick_artmean", "gbm_thick_harmmean"), 
                          n_cols = 4, dict = dict, cor_method = "spearman")
```

## Type 1 Diabetes

```{r include = F}
# correlation_table_minimal(data = subset(dat, group == "Type 1 Diabetes"), 
#                           relevant_vars = c("lc_f", "lm_f","lc_k2", "lm_k2", 
#                                             "p2_raw_m", "p2_gc_m", "gbm_thick_artmean", "gbm_thick_harmmean"), 
#                           n_cols = 4, dict = dict, cor_method = "spearman")
# 
# correlation_table_minimal(data = subset(dat, group == "Type 1 Diabetes"), 
#                           relevant_vars = c("rc_f", "rm_f","rc_k2", "rm_k2", 
#                                             "p2_raw_m", "p2_gc_m", "gbm_thick_artmean", "gbm_thick_harmmean"), 
#                           n_cols = 4, dict = dict, cor_method = "spearman")

correlation_table_minimal(data = subset(dat, group == "Type 1 Diabetes"), 
                          relevant_vars = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2", 
                                            "p2_raw_m", "p2_gc_m", "gbm_thick_artmean", "gbm_thick_harmmean"), 
                          n_cols = 4, dict = dict, cor_method = "spearman")
```

## Misc correlations

```{r include = F}
correlation_table_minimal(data = dat, 
                          relevant_vars = c("pcasl3d_left", "pcasl3d_right", "avg_pcascl",
                                            "p2_raw_m", "p2_gc_m", "gbm_thick_artmean", "gbm_thick_harmmean"), 
                          n_cols = 3, dict = dict, cor_method = "spearman")
```

# Heatmap of correlation

```{r include = T}
pdf(height = 4000, width = 3000, file = "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/YC/Correlation_clinical.pdf")

corr_plot_modified(data = dat,
                   X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
                   Y = c("gbm_thick_artmean", "p2_gc_m"),
                   dict = dict,
                   cor_method = "spearman")
dev.off()

# partial suggested by JCI reviewer (adjusting by age)
png(height = 1200, width = 800, file = "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/YC/Correlation_clinical_age.png", res = 170)
pcor.plot(data = dat, 
          X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
          Y = c("gbm_thick_artmean", "p2_gc_m"),
          Z = c("age"), cor_method = "pearson", dict = dict)
dev.off()

# partial suggested by JCI reviewer (adjusting by hba1c)
png(height = 1200, width = 800, file = "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/YC/Correlation_clinical_hba1c.png", res = 170)
pcor.plot(data = dat, 
          X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
          Y = c("gbm_thick_artmean", "p2_gc_m"),
          Z = c("hba1c"), cor_method = "spearman", dict = dict)
dev.off()

# suggested by JCI reviewer (adjusting by sex)
png(height = 1200, width = 800, file = "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/YC/Correlation_clinical_sex.png", res = 170)
corr_plot_modified(data = dat,
                   X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
                   Y = c("gbm_thick_artmean", "p2_gc_m"),
                   adj_var = "sex",
                   cor_method = "spearman",
                   dict = dict)
dev.off()

png(height = 1200, width = 800, file = "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/YC/Correlation_clinical_gfr_bodyfat.png", res = 170)
pcor.plot(data = dat, 
          X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
          Y = c("gbm_thick_artmean", "p2_gc_m"),
          Z = c("gfr_raw_plasma","dexa_body_fat"), cor_method = "spearman", dict = dict)
dev.off()

summary(lm(gbm_thick_artmean ~ avg_c_f + sex, data = dat))
summary(lm(gbm_thick_artmean ~ avg_m_f + sex, data = dat))
summary(lm(gbm_thick_artmean ~ avg_c_k2 + sex, data = dat))
summary(lm(gbm_thick_artmean ~ avg_m_k2 + sex, data = dat))
summary(lm(p2_gc_m ~ avg_c_f + sex, data = dat))
summary(lm(p2_gc_m ~ avg_m_f + sex, data = dat))
summary(lm(p2_gc_m ~ avg_c_k2 + sex, data = dat))
summary(lm(p2_gc_m ~ avg_m_k2 + sex, data = dat))
plot(lm(p2_gc_m ~ avg_c_f + sex, data = dat))
plot(lm(p2_gc_m ~ avg_m_f + sex, data = dat))
plot(lm(p2_gc_m ~ avg_c_k2 + sex, data = dat))
plot(lm(p2_gc_m ~ avg_m_k2 + sex, data = dat))


# p1 <- ggplot(data = dat, aes(x = avg_c_f, y = gbm_thick_artmean, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# p2 <- ggplot(data = dat, aes(x = avg_m_f, y = gbm_thick_artmean, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# p3 <- ggplot(data = dat, aes(x = avg_c_k2, y = gbm_thick_artmean, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# p4 <- ggplot(data = dat, aes(x = avg_m_k2, y = gbm_thick_artmean, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# p5 <- ggplot(data = dat, aes(x = avg_c_f, y = p2_gc_m, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# p6 <- ggplot(data = dat, aes(x = avg_m_f, y = p2_gc_m, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# p7 <- ggplot(data = dat, aes(x = avg_c_k2, y = p2_gc_m, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# p8 <- ggplot(data = dat, aes(x = avg_m_k2, y = p2_gc_m, color = sex)) +
#   geom_point(size = 3, alpha = 0.7) + theme_bw()
# 
# ggarrange(p1, p5, p2, p6, p3, p7, p4, p8, nrow = 4, ncol = 2)

```
# PT morphometrics
```{r echo = F, message=F}
png(height = 1200, width = 800, file = "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Dissemination/Figures/YC/Correlation_clinical_w_pt.png", res = 170)
corr_plot_modified(data = dat,
                   X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
                   Y = c("gbm_thick_artmean","pt_total_area", "p2_gc_m"),
                   dict = dict,
                   cor_method = "spearman")
dev.off()

corr_plot_modified(data = dat,
                   X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
                   Y = c("gbm_thick_artmean","pt_avg_area", "p2_gc_m"),
                   dict = dict,
                   cor_method = "spearman")

corr_plot_modified(data = dat,
                   X = c("avg_c_f", "avg_m_f","avg_c_k2", "avg_m_k2"),
                   Y = c("gbm_thick_artmean","fractional_pt_lumen_area", "p2_gc_m"),
                   dict = dict,
                   cor_method = "spearman")
```


```{r echo = F, message = F}
tissue_met <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/CRC_tissue_metabolomics_011624.csv", na.strings = c("NA", "")) %>% 
  mutate(record_id = case_when(record_id < 10 ~ paste0("CRC-0", record_id),
                               T ~ paste0("CRC-",record_id))) %>%
  left_join(subset(dat, select = c(record_id, group, bmi, hba1c, age)))

# Simulating metaboanalyst method of imputing missingness
# tissue_met <- tissue_met %>%
#   group_by(record_id) %>%
#   dplyr::summarise(count = n()) %>%
#   filter(count == 1) %>% mutate(redcap_repeat_instance = 2,
#                                 redcap_repeat_instrument = "metabolomics_tissue") %>% 
#   dplyr::select(-count) %>%
#   full_join(tissue_met) %>%
#   group_by(record_id) %>%
#   tidyr::fill(group, .direction = "up")

impute_values <- tissue_met %>%
  dplyr::summarise(across(
    .cols = everything(), 
    .fns = ~ if(cur_column() %in% c("record_id", "redcap_repeat_instrument", "group", "redcap_repeat_instance", "age", "bmi", "hba1c")) {
                NA
              } else {
                min(.x[.x > 0], na.rm = TRUE) / 5
              }
  ))

for (col in colnames(tissue_met)) {
  tissue_met[[col]] <- ifelse(
    is.na(tissue_met[[col]]),
    impute_values[[col]],
    tissue_met[[col]]
  )
}

tissue_met <- tissue_met %>% 
               arrange(group)
record_id_order <- unique(tissue_met$record_id)
tissue_met$record_id <- factor(tissue_met$record_id, levels = record_id_order)

tissue_met_avg <- tissue_met %>%
  group_by(record_id) %>%
  dplyr::summarise(
    across(where(is.numeric), ~mean(., na.rm = TRUE)),
    across(where(is.character), ~first(.))
  ) 
```

# Tissue metabolites descriptive

## Replicating Guanshi's output

```{r results='asis', echo = F, message = F, warning=F}
# Summary
summary(tableby(group ~  isocitric_citric_acid_tissue +  aconitic_acid_tissue +  alpha_ketoglutaric_acid_tissue + succinic_acid_tissue +  fumaric_acid_tissue +  malic_acid_tissue +  oxaloacetic_acid_tissue +  anova(adnine_tissue), data = tissue_met, numeric.test="wt", total = F))
```

## Average of each participant

```{r results='asis', echo = F, message = F, warning=F}
summary(tableby(group ~  isocitric_citric_acid_tissue +  aconitic_acid_tissue +  alpha_ketoglutaric_acid_tissue + succinic_acid_tissue +  fumaric_acid_tissue +  malic_acid_tissue +  oxaloacetic_acid_tissue +  anova(adnine_tissue), data = tissue_met_avg, numeric.test="wt", total = F))
```

# Mixed model of tissue metabolites

```{r echo = F}
metplot <- function(data, y_var) {
  p <- data %>% 
    ggplot(aes(x = factor(record_id, levels = unique(record_id_order)), 
               y = .data[[y_var]], 
               color = group)) +
    geom_boxplot() +
    geom_jitter() +
    geom_hline(yintercept = mean(subset(data, group == "Lean Control")[[y_var]]), color = "#f8766d") +
    geom_hline(yintercept = mean(subset(data, group == "Type 1 Diabetes")[[y_var]]), color = "#00bfc4") +
    theme_bw() + 
    theme(axis.text.x = element_text(angle = 90, hjust = 1),
          axis.title.x = element_blank())
  
  return(p)
}
```

## Isocitric/citric acid

```{r echo = F}
ggarrange(metplot(tissue_met, "isocitric_citric_acid_tissue"), 
          metplot(tissue_met_avg, "isocitric_citric_acid_tissue"),
          common.legend = T)
hist(tissue_met$isocitric_citric_acid_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(isocitric_citric_acid_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(isocitric_citric_acid_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with sqrt transformation
model_3 <- glm(sqrt(isocitric_citric_acid_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)
tidy(model_3, conf.int = T)

# Model with box cox transformation
bc <- boxcox(isocitric_citric_acid_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((isocitric_citric_acid_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))

model_summaries <- list(model_1_summary, model_2_summary, model_3_summary, model_4_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc, 2),
             " (95% CI: ", round(sqrt_coef_hc_low, 2), ", ",
             round(sqrt_coef_hc_high, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(isocitric_citric_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(isocitric_citric_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(isocitric_citric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(isocitric_citric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(isocitric_citric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = log(isocitric_citric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(isocitric_citric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(isocitric_citric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (isocitric_citric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (isocitric_citric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (isocitric_citric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = (isocitric_citric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (isocitric_citric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (isocitric_citric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

## Aconitic acid

```{r echo = F}
ggarrange(metplot(tissue_met, "aconitic_acid_tissue"), 
          metplot(tissue_met_avg, "aconitic_acid_tissue"),
          common.legend = T)
hist(tissue_met$aconitic_acid_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(aconitic_acid_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(aconitic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with log transformation
model_3 <- glm(sqrt(aconitic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)
tidy(model_3, conf.int = T)

# Model with box cox transformation
bc <- boxcox(aconitic_acid_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((aconitic_acid_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary, model_4_summary)

# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc_t, 2),
             " (95% CI: ", round(sqrt_coef_hc_low_t, 2), ", ",
             round(sqrt_coef_hc_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(aconitic_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(aconitic_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(aconitic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(aconitic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(aconitic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = log(aconitic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(aconitic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(aconitic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (aconitic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (aconitic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (aconitic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = (aconitic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (aconitic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (aconitic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

## Alpha-ketoglutaric acid

```{r echo = F}
ggarrange(metplot(tissue_met, "alpha_ketoglutaric_acid_tissue"), 
          metplot(tissue_met_avg, "alpha_ketoglutaric_acid_tissue"),
          common.legend = T)
hist(tissue_met$alpha_ketoglutaric_acid_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(alpha_ketoglutaric_acid_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(alpha_ketoglutaric_acid_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with sqrt transformation
model_3 <- glm(sqrt(alpha_ketoglutaric_acid_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)
tidy(model_3, conf.int = T)


# Model with box cox transformation
bc <- boxcox(alpha_ketoglutaric_acid_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((alpha_ketoglutaric_acid_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary, model_4_summary)

# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc_t, 2),
             " (95% CI: ", round(sqrt_coef_hc_low_t, 2), ", ",
             round(sqrt_coef_hc_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(alpha_ketoglutaric_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(alpha_ketoglutaric_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = log(alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)


# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)


# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = (alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (alpha_ketoglutaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

## Succinic acid

```{r echo = F}
ggarrange(metplot(tissue_met, "succinic_acid_tissue"), 
          metplot(tissue_met_avg, "succinic_acid_tissue"),
          common.legend = T)
hist(tissue_met$succinic_acid_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(succinic_acid_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(succinic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with sqrt transformation
model_3 <- glm(sqrt(succinic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)
tidy(model_3, conf.int = T)


# Model with box cox transformation
bc <- boxcox(succinic_acid_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((succinic_acid_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary, model_4_summary)

# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc_t, 2),
             " (95% CI: ", round(sqrt_coef_hc_low_t, 2), ", ",
             round(sqrt_coef_hc_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(succinic_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(succinic_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(succinic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(succinic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(succinic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = log(succinic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(succinic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(succinic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (succinic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (succinic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (succinic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = (succinic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (succinic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (succinic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

## Fumaric acid

```{r echo = F}
ggarrange(metplot(tissue_met, "fumaric_acid_tissue"), 
          metplot(tissue_met_avg, "fumaric_acid_tissue"),
          common.legend = T)
hist(tissue_met$fumaric_acid_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(fumaric_acid_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(fumaric_acid_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with sqrt transformation
model_3 <- glm(sqrt(fumaric_acid_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)
tidy(model_3, conf.int = T)


# Model with box cox transformation
bc <- boxcox(fumaric_acid_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((fumaric_acid_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary, model_4_summary)

# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc_t, 2),
             " (95% CI: ", round(sqrt_coef_hc_low_t, 2), ", ",
             round(sqrt_coef_hc_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(fumaric_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(fumaric_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(fumaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(fumaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(fumaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = log(fumaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(fumaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(fumaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (fumaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (fumaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (fumaric_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = (fumaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (fumaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (fumaric_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

## Malic acid

```{r echo = F}
ggarrange(metplot(tissue_met, "malic_acid_tissue"), 
          metplot(tissue_met_avg, "malic_acid_tissue"),
          common.legend = T)
hist(tissue_met$malic_acid_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(malic_acid_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(malic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with sqrt transformation
model_3 <- glm(sqrt(malic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)

# Model with box cox transformation
bc <- boxcox(malic_acid_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((malic_acid_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary, model_4_summary)

# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc_t, 2),
             " (95% CI: ", round(sqrt_coef_hc_low_t, 2), ", ",
             round(sqrt_coef_hc_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(malic_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(malic_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(malic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(malic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(malic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = log(malic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(malic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(malic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (malic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (malic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (malic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = (malic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (malic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (malic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

## Oxaloacetic acid

```{r echo = F}
ggarrange(metplot(tissue_met, "oxaloacetic_acid_tissue"), 
          metplot(tissue_met_avg, "oxaloacetic_acid_tissue"),
          common.legend = T)
hist(tissue_met$oxaloacetic_acid_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(oxaloacetic_acid_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(oxaloacetic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with sqrt transformation
model_3 <- glm(sqrt(oxaloacetic_acid_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)

# Model with box cox transformation
bc <- boxcox(oxaloacetic_acid_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((oxaloacetic_acid_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))

model_summaries <- list(model_1_summary, model_2_summary, 
                        model_3_summary, model_4_summary)

# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc_t, 2),
             " (95% CI: ", round(sqrt_coef_hc_low_t, 2), ", ",
             round(sqrt_coef_hc_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(oxaloacetic_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(oxaloacetic_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(oxaloacetic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)


# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(oxaloacetic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~oxaloacetic_acid_tissue|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(oxaloacetic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)

# Model with random intercept and random slope
model_4 <- lme(fixed = log(oxaloacetic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)


# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(oxaloacetic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)


# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(oxaloacetic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Generalized linear mixed model

```{r echo = F, results='asis'}
# Model with random intercept (Gamma link)
model_1 <- glmer((oxaloacetic_acid_tissue) ~ group + (1|record_id),
             family = Gamma(), 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (Inverse gaussian link)
model_2 <- glmer((oxaloacetic_acid_tissue) ~ group + (1|record_id),
             family = inverse.gaussian(), 
             data = tissue_met)
model_2_summary <- summary(model_2)

summaries_df <- data.frame(
  Model = c("Gamma Link", "Inverse gaussian link"),
  AIC = c(model_1_summary$AICtab[[1]], model_2_summary$AICtab[[1]]),
  BIC = c(model_1_summary$AICtab[[2]], model_2_summary$AICtab[[2]]),
  LogLik = c(model_1_summary$AICtab[[3]], model_2_summary$AICtab[[3]]))
model_summaries <- list(model_1_summary, model_2_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_1), main = "Residuals vs. Index")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (oxaloacetic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)


# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (oxaloacetic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)


# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (oxaloacetic_acid_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)


# Model with random intercept and random slope
model_4 <- lme(fixed = (oxaloacetic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (oxaloacetic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (oxaloacetic_acid_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

## Adenine

```{r echo = F}
ggarrange(metplot(tissue_met, "adnine_tissue"), 
          metplot(tissue_met_avg, "adnine_tissue"),
          common.legend = T)
hist(tissue_met$adnine_tissue)
```

### Average (no random effects)

```{r echo = F, results='asis'}
# Model with gamma link
model_1 <- glm(adnine_tissue ~ group,
               family = Gamma, data = tissue_met_avg)
model_1_summary <- summary(model_1)

# Model with log transformation
model_2 <- glm(log(adnine_tissue) ~ group,
               data = tissue_met_avg)
model_2_summary <- summary(model_2)

# Model with sqrt transformation
model_3 <- glm(sqrt(adnine_tissue) ~ group,
               data = tissue_met_avg)
model_3_summary <- summary(model_3)

# Model with box cox transformation
bc <- boxcox(adnine_tissue ~ group, data = tissue_met_avg)
lambda <- bc$x[which.max(bc$y)]
model_4 <- lm(((adnine_tissue^lambda -1)/lambda) ~ group, data = tissue_met_avg)
model_4_summary <- summary(model_4)

print(paste0("Lambda (for Box cox): ", round(lambda, digits = 3)))

summaries_df <- data.frame(
  Model = c("Gamma link", "Log transformed", "Sqrt transformed", "Box cox transformed"),
  AIC = c(model_1_summary$aic,
          model_2_summary$aic,
          model_3_summary$aic,
          ""))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary, model_4_summary)

# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$coefficients[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
layout(1)
```

#### Sqrt back-transformation

```{r}
# Coefficients of HC
sqrt_coef_hc <- model_3_summary$coefficients[[1]]
sqrt_coef_hc_low <- sqrt_coef_hc - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_hc_high <- sqrt_coef_hc + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_hc_t <- sqrt_coef_hc^2 * sign(sqrt_coef_hc)
sqrt_coef_hc_low_t <- sqrt_coef_hc_low^2 * sign(sqrt_coef_hc_low)
sqrt_coef_hc_high_t <- sqrt_coef_hc_high^2 * sign(sqrt_coef_hc_high)

print(paste0("HC: ",round(sqrt_coef_hc_t, 2),
             " (95% CI: ", round(sqrt_coef_hc_low_t, 2), ", ",
             round(sqrt_coef_hc_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of T1D
model_3_summary <- summary(glm(sqrt(isocitric_citric_acid_tissue) ~ factor(group, levels = c("Type 1 Diabetes", "Lean Control")),
               data = tissue_met_avg))
sqrt_coef_t1d <- model_3_summary$coefficients[[1]]
sqrt_coef_t1d_low <- sqrt_coef_t1d - (model_3_summary$coefficients[[1,2]]*qnorm(0.975))
sqrt_coef_t1d_high <- sqrt_coef_t1d + (model_3_summary$coefficients[[1,2]]*qnorm(0.975))

sqrt_coef_t1d_t <- sqrt_coef_t1d^2 * sign(sqrt_coef_t1d)
sqrt_coef_t1d_low_t <- sqrt_coef_t1d_low^2 * sign(sqrt_coef_t1d_low)
sqrt_coef_t1d_high_t <- sqrt_coef_t1d_high^2 * sign(sqrt_coef_t1d_high)

print(paste0("T1D: ",round(sqrt_coef_t1d_t, 2),
             " (95% CI: ", round(sqrt_coef_t1d_low_t, 2), ", ",
             round(sqrt_coef_t1d_high_t, 2), ", p=", round(model_3_summary$coefficients[[1,4]],10), ")"))

# Coefficients of difference
model_3_summary <- summary(glm(sqrt(isocitric_citric_acid_tissue) ~ group,
               data = tissue_met_avg))
sqrt_coef_diff <- model_3_summary$coefficients[[2]]
sqrt_coef_diff_low <- sqrt_coef_diff - (model_3_summary$coefficients[[2,2]]*qnorm(0.975))
sqrt_coef_diff_high <- sqrt_coef_diff + (model_3_summary$coefficients[[2,2]]*qnorm(0.975))

sqrt_coef_diff_t <- sqrt_coef_diff^2 * sign(sqrt_coef_diff)
sqrt_coef_diff_low_t <- sqrt_coef_diff_low^2 * sign(sqrt_coef_diff_low)
sqrt_coef_diff_high_t <- sqrt_coef_diff_high^2 * sign(sqrt_coef_diff_high)

print(paste0("Diff: ",round(sqrt_coef_diff_t, 2),
             " (95% CI: ", round(sqrt_coef_diff_low_t, 2), ", ",
             round(sqrt_coef_diff_high_t, 2), ", p=", round(model_3_summary$coefficients[[2,4]],10), ")"))

# Log2FC
log2fc <- log2((sqrt_coef_t1d/sqrt_coef_hc)^2)
print(paste0("Log2FC: ", round(log2fc,3)))
```

### Log-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = log(adnine_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)

# Model with random intercept (CompSymm)
model_2 <- lme(fixed = log(adnine_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)

# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = log(adnine_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)


# Model with random intercept and random slope
model_4 <- lme(fixed = log(adnine_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = log(adnine_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)

# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = log(adnine_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

### Non-transformed

```{r echo = F, results='asis'}
# Model with random intercept
model_1 <- lme(fixed = (adnine_tissue) ~ group,
             random = ~ 1 | record_id, 
             data = tissue_met)
model_1_summary <- summary(model_1)


# Model with random intercept (CompSymm)
model_2 <- lme(fixed = (adnine_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_2_summary <- summary(model_2)


# Model with random intercept and random slope (AR1)
model_3 <- lme(fixed = (adnine_tissue) ~ group,
             random = ~ 1 | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_3_summary <- summary(model_3)


# Model with random intercept and random slope
model_4 <- lme(fixed = (adnine_tissue) ~ group,
             random = ~ group | record_id, 
             data = tissue_met)
model_4_summary <- summary(model_4)

# Model with random intercept and random slope (CompSymm)
model_5 <- lme(fixed = (adnine_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corCompSymm(form = ~1|record_id),
             data = tissue_met)
model_5_summary <- summary(model_5)


# Model with random intercept and random slope (AR1)
model_6 <- lme(fixed = (adnine_tissue) ~ group,
             random = ~ group | record_id, 
             correlation = corAR1(form = ~1|record_id),
             data = tissue_met)
model_6_summary <- summary(model_6)


summaries_df <- data.frame(
  Model = c("Random intercept", "Random intercept (CompSym)", "Random intercept (AR1)", 
            "Random int + slope", "Random int + slope (CompSym)", "Random int + slope (AR1"),
  AIC = c(model_1_summary$AIC,
          model_2_summary$AIC,
          model_3_summary$AIC,
          model_4_summary$AIC,
          model_5_summary$AIC,
          model_6_summary$AIC),
  BIC = c(model_1_summary$BIC,
          model_2_summary$BIC,
          model_3_summary$BIC,
          model_4_summary$BIC,
          model_5_summary$BIC,
          model_6_summary$BIC),
  LogLik = c(model_1_summary$logLik,
             model_2_summary$logLik,
             model_3_summary$logLik,
             model_4_summary$logLik,
             model_5_summary$logLik,
             model_6_summary$logLik))
model_summaries <- list(model_1_summary, model_2_summary, model_3_summary,
                        model_4_summary, model_5_summary, model_6_summary)
# Initialize an empty list to store the tTable rows
tTable_rows <- list()

# Iterate over each model summary
for (summary in model_summaries) {
  # Extract the second row of the tTable and append it to the list
  tTable_rows[[length(tTable_rows) + 1]] <- summary$tTable[2, ]
}
  
summary_combined_df <- cbind(summaries_df, do.call(rbind, tTable_rows))
kable(summary_combined_df, digits = 3)

par(mfrow = c(2,2))
qqnorm(residuals(model_1)); qqline(residuals(model_1))
plot(residuals(model_1) ~ fitted(model_1), main = "Residuals vs. Index")
lines(lowess(fitted(model_1), residuals(model_1)), col="red")
qqnorm(residuals(model_2)); qqline(residuals(model_2))
plot(residuals(model_2) ~ fitted(model_2), main = "Residuals vs. Index")
lines(lowess(fitted(model_2), residuals(model_2)), col="red")
qqnorm(residuals(model_3)); qqline(residuals(model_3))
plot(residuals(model_3) ~ fitted(model_3), main = "Residuals vs. Index")
lines(lowess(fitted(model_3), residuals(model_3)), col="red")
qqnorm(residuals(model_4)); qqline(residuals(model_4))
plot(residuals(model_4) ~ fitted(model_4), main = "Residuals vs. Index")
lines(lowess(fitted(model_4), residuals(model_4)), col="red")
qqnorm(residuals(model_5)); qqline(residuals(model_5))
plot(residuals(model_5) ~ fitted(model_5), main = "Residuals vs. Index")
lines(lowess(fitted(model_5), residuals(model_5)), col="red")
qqnorm(residuals(model_6)); qqline(residuals(model_6))
plot(residuals(model_6) ~ fitted(model_6), main = "Residuals vs. Index")
lines(lowess(fitted(model_6), residuals(model_6)), col="red")
layout(1)
```

```{r}
# Constants
# b0 <- 3
# gamma <- 2.675e8            # Gyromagnetic ratio in rad/T/s
# delta_chi_0 <- 0.264e-6     # Magnetic susceptibility difference in SI units
# 
# dat <- dat %>%
#   dplyr::mutate(StO2 = 1 - (3 / (4 * pi) * (avg_c_r2_pf - avg_c_r2_bl) / (avg_c_vb * gamma * delta_chi_0 * hematocrit_210 * b0)))
# 
# dat$StO2

dat_vb_hct <- dat %>%
  dplyr::select(record_id, group, avg_c_vb, avg_c_r2_bl, avg_c_r2_pf, avg_m_vb, avg_m_r2_bl, avg_m_r2_pf, hematocrit_210)

write.csv(dat_vb_hct, "/Volumes/Peds Endo/Petter Bjornstad/CROCODILE/Data_Cleaned/CRC_vb_hct.csv", row.names = F)
```

# Adding FDR adjusted q-values to spatial metabolomics (sqrt-transformed)
```{r}
isocitric_citric_acid_p.val <- tidy(glm(sqrt(isocitric_citric_acid_tissue) ~ group, data = tissue_met_avg))[[2,5]]
aconitic_acid_p.val <- tidy(glm(sqrt(aconitic_acid_tissue) ~ group, data = tissue_met_avg))[[2,5]]
alpha_ketoglutaric_acid_p.val <- tidy(glm(sqrt(alpha_ketoglutaric_acid_tissue) ~ group, data = tissue_met_avg))[[2,5]]
succinic_acid_p.val <- tidy(glm(sqrt(succinic_acid_tissue) ~ group, data = tissue_met_avg))[[2,5]]
fumaric_acid_p.val <- tidy(glm(sqrt(fumaric_acid_tissue) ~ group, data = tissue_met_avg))[[2,5]]
malic_acid_p.val <- tidy(glm(sqrt(malic_acid_tissue) ~ group, data = tissue_met_avg))[[2,5]]
oxaloacetic_acid_p.val <- tidy(glm(sqrt(oxaloacetic_acid_tissue) ~ group, data = tissue_met_avg))[[2,5]]

sqrt.p.val <- c(isocitric_citric_acid_p.val, aconitic_acid_p.val, alpha_ketoglutaric_acid_p.val, 
                succinic_acid_p.val, fumaric_acid_p.val, malic_acid_p.val, oxaloacetic_acid_p.val)
p.adjust(sqrt.p.val, method = "BH")
```
