---
title: "RH/RH2/IMPROVE"
author: "Ye Ji Choi"
format:
  revealjs:
    embed-resources: true
    scrollable: true
    transition: slide
    controls-layout: bottom-right
    menu: true
    toc: true
    toc-depth: 1
    fontsize: 15
    number-sections: true
    filters:
      - figure-path.lua
---

```{r include = F}
library(jsonlite)
library(aws.s3)
library(knitr)
library(dplyr)
library(kableExtra)
library(tidyverse)
library(lmerTest)
library(emmeans)
library(broom)
library(ggbeeswarm)
library(lemon)
library(quantreg)
library(readxl)
library(growthcleanr)

source("~/GitHub/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/correlation_function.R")
source("~/GitHub/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
```

```{r include = F}
## Create an S3 client
keys <- fromJSON("/Users/choiyej/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Bjornstad Pyle Lab/keys.json")

Sys.setenv(
  "AWS_ACCESS_KEY_ID" = keys$MY_ACCESS_KEY,
  "AWS_SECRET_ACCESS_KEY" = keys$MY_SECRET_KEY,
  "AWS_DEFAULT_REGION" = "",
  "AWS_REGION" = "",
  "AWS_S3_ENDPOINT" = "s3.kopah.uw.edu"
)
```

```{r echo = F}
harm_dat <- read.csv("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/Data Harmonization/Data Clean/harmonized_dataset.csv", na.strings = "")

harm_dat_collapsed <- harm_dat %>%
  group_by(record_id, visit) %>%
  fill(date, .direction = "updown") %>% ungroup() %>%
  dplyr::summarise(across(where(negate(is.numeric)), ~ ifelse(all(is.na(.x)), NA_character_, last(na.omit(.x)))),
                   across(where(is.numeric), ~ ifelse(all(is.na(.x)), NA_real_, mean(.x, na.rm = TRUE))),
                   .by = c(record_id, visit)) %>%
  dplyr::mutate(race_ethnicity_condensed = case_when(race == "White" &
                                                       ethnicity == "Not Hispanic or Latino" ~ "Not Hispanic or Latino White",
                                                     race == "Black or African American" &
                                                       ethnicity == "Not Hispanic or Latino" ~ "Not Hispanic or Latino Black",
                                                     ethnicity == "Hispanic or Latino" ~ "Hispanic or Latino",
                                                     T ~ "Not Hispanic or Latino Other")) %>%
  arrange(record_id) %>%
  mutate(agem = age*12)

# subset(harm_dat, eGFR_CKD_epi < 40)$record_id
```

```{r echo = F}
# RH/RH2 subset
rh_rh2_croc_panther <- harm_dat_collapsed %>% 
  filter(study %in% c("RENAL-HEIR", "RENAL-HEIRitage", "CROCODILE", "PANTHER")) %>%
  filter(group %in% c("Type 2 Diabetes", "Obese Control", "Lean Control")) %>%
  filter(visit == "baseline")

bmi_percentile = ext_bmiz(data = subset(rh_rh2_croc_panther, 
                                        select = c("record_id", "sex", "agem", "weight", "height", "bmi")),
                          wt = "weight", ht = "height") %>%
  select(record_id, bmip)
  
rh_rh2_croc_panther_unique <- rh_rh2_croc_panther %>%
  left_join(bmi_percentile) %>%
  arrange(mrn, date) %>%
  distinct(mrn, date, .keep_all = TRUE) %>%
  group_by(mrn) %>%
  mutate(
    date = as.Date(date),
    new_cluster = if_else(is.na(lag(date)) | difftime(date, lag(date), units = "days") > 7,
                          1, 0),
    cluster_id = cumsum(replace_na(new_cluster, 1))
  ) %>%
  group_by(mrn, cluster_id) %>%
  slice_min(order_by = date, with_ties = FALSE) %>%
  ungroup() %>%
  #stratify T2D and OB in RH/RH2 by UACR >= 100 mg/g and look at the kidney MRI parameters.. I want to include some of this preliminary data in my slides for Spain
  # eGFR <60 for eGFR_CKD_epi AND/OR UACR>= 100 mg/g
  # in other words, to be in the high risk group EITHER eGFR <60 AND/OR UACR>= 100mg/g
  # so if you have UACR >= 100 mg/g but eGFR >60 you qualify, or if you have UACR <100 but eGFR <60 you qualify, and if you have both, i.e., UACR >= 100 and eGFR <60 you qualify
  mutate(uacr_100 = case_when(acr_u >= 100 ~ "UACR >=100 mg/g",
                              acr_u < 100 ~ "UACR <100 mg/g"),
         uacr_group = case_when(eGFR_CKD_epi < 75 | acr_u >= 100 ~ "eGFR < 75 and/or UACR >=100 mg/g",
                                eGFR_CKD_epi >=75 | acr_u < 100 ~ "eGFR >= 75 and UACR <100 mg/g"),
         uacr_group = factor(uacr_group, levels = c("eGFR >= 75 and UACR <100 mg/g",
                                                    "eGFR < 75 and/or UACR >=100 mg/g")),
         # eGFR categories
         egfr_cat = case_when(
           eGFR_CKD_epi < 60                      ~ "<60",
           eGFR_CKD_epi >= 60 & eGFR_CKD_epi < 90 ~ "60–<90",
           eGFR_CKD_epi >= 90                     ~ "≥90",
           TRUE ~ NA_character_
         ),
         egfr_cat = factor(egfr_cat, levels = c("<60", "60–<90", "≥90")),
         # ACR categories
         acr_u_cat3 = case_when(
           acr_u < 30                  ~ "<30",
           acr_u >= 30 & acr_u < 300   ~ "30–<300",
           acr_u >= 300                ~ "≥300",
           TRUE ~ NA_character_
         ),
         acr_u_cat3 = factor(acr_u_cat3, levels = c("<30", "30–<300", "≥300")),
         bmi_cat = case_when(
           # Adults (≥18 years)
           age >= 18 & bmi < 25                ~ "Lean",
           age >= 18 & bmi >= 25 & bmi < 30    ~ "Overweight",
           age >= 18 & bmi >= 30               ~ "Obese",
           
           # Pediatrics (<18 years)
           age < 18 & bmip < 85      ~ "Lean",
           age < 18 & bmip >= 85 & bmip < 95 ~ "Overweight",
           age < 18 & bmip >= 95     ~ "Obese",
           
           TRUE ~ NA_character_
         ),
         bmi_cat = factor(
           bmi_cat,
           levels = c("Lean", "Overweight", "Obese")
         ),
         tkv_combined = coalesce(total_kidney_volume_ml, total_kidney_volume_ml_manual),
         htadjtkv_combined = coalesce(ht_adj_tkv, ht_adj_tkv_manual),
  )

rh_rh2_unique <- rh_rh2_croc_panther_unique %>%
  filter(group %nin% c("Lean Control")) %>%
  filter(study != "PANTHER")
```

# Functions
```{r}
fit_models_emm <- function(outcomes, 
                          formula_rhs, 
                          emm_var = "bmi_cat",
                          data, 
                          adjust = "tukey",
                          ...) {
  
  # Load required packages
  require(emmeans)
  require(dplyr)
  require(purrr)
  
  # Handle formula_rhs input - convert to character if needed
  if (inherits(formula_rhs, "formula")) {
    formula_rhs <- deparse(formula_rhs)
    # Remove leading ~ if present
    formula_rhs <- gsub("^\\s*~\\s*", "", formula_rhs)
  } else {
    # Remove leading ~ if present in string
    formula_rhs <- gsub("^\\s*~\\s*", "", formula_rhs)
  }
  
  # If outcomes is a named list (for custom naming), extract names and values
  if (is.list(outcomes)) {
    outcome_names <- names(outcomes)
    outcome_vars <- unlist(outcomes)
  } else {
    # If it's a vector, use the values as both names and variables
    outcome_vars <- outcomes
    outcome_names <- outcomes
  }
  
  # Create formulas and fit models
  models <- setNames(
    lapply(outcome_vars, function(y) {
      formula_str <- paste(y, "~", formula_rhs)
      lm(as.formula(formula_str), data = data)
    }),
    outcome_names
  )
  
  # Compute EMMs and contrasts for each model
  emm_results <- imap(models, function(model, model_name) {
    # Create formula for emmeans (handles both quoted and unquoted variable names)
    emm_formula <- as.formula(paste("~", emm_var))
    emm <- emmeans(model, emm_formula, ...)
    
    list(
      emms = as.data.frame(emm) %>% 
        mutate(outcome = model_name),
      contrasts = as.data.frame(pairs(emm, adjust = adjust)) %>% 
        mutate(outcome = model_name)
    )
  })
  
  # Combine results into tidy tables
  emm_table <- bind_rows(lapply(emm_results, `[[`, "emms")) %>%
    relocate(outcome) %>%
    arrange(outcome, !!sym(emm_var))
  
  contrast_table <- bind_rows(lapply(emm_results, `[[`, "contrasts")) %>%
    relocate(outcome) %>%
    arrange(outcome, contrast)
  
  # Return both tables
  list(
    emm_table = emm_table,
    contrast_table = contrast_table,
    models = models  # Also return models for potential further analysis
  )
}

plot_emms_with_brackets <- function(
    emm_table,
    contrast_table,
    outcome_var,
    x_var = "bmi_cat",
    y_label = "Estimated marginal mean",
    x_label = NULL,
    use_stars = TRUE,
    y_step_multiplier = 0.08,
    point_size = 3,
    errorbar_width = 0.2,
    bracket_size = 0.5,
    label_size = 5,
    text_size = 15
) {
  
  # Load required packages
  require(ggplot2)
  require(tidyverse)
  require(ggpubr)
  require(rstatix)
  
  # 1) Subset EMMs and contrasts for this outcome
  emms_sub <- emm_table %>%
    filter(outcome == outcome_var)
  
  contr_sub <- contrast_table %>%
    filter(outcome == outcome_var) %>%
    separate(contrast, into = c("group1", "group2"), sep = " - ", remove = FALSE) %>%
    mutate(
      group1 = trimws(group1),
      group2 = trimws(group2),
      # Label: either stars or formatted p-values
      label = if(use_stars) {
        stars.pval(p.value)
      } else {
        rstatix::p_format(p.value, add.p = TRUE)
      }
    )
  
  # Check if data exists
  if(nrow(emms_sub) == 0) {
    stop(paste("No data found for outcome:", outcome_var))
  }
  
  # 2) Y positions for brackets (stack them above the highest CI)
  y_base <- max(emms_sub$upper.CL, na.rm = TRUE)
  y_step <- y_step_multiplier * diff(range(c(emms_sub$lower.CL, emms_sub$upper.CL), na.rm = TRUE))
  
  contr_sub <- contr_sub %>%
    arrange(p.value) %>%  # optional: nicer stacking
    mutate(y.position = y_base + row_number() * y_step)
  
  # 3) Create the plot
  p <- ggplot(emms_sub, aes_string(x = x_var, y = "emmean")) +
    geom_point(size = point_size) +
    geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = errorbar_width) +
    labs(
      x = x_label,
      y = y_label
    ) +
    theme_minimal() + 
    theme(
      text = element_text(size = text_size),
      panel.grid = element_blank(),
      legend.position = "none"
    )
  
  # Add significance brackets if contrasts exist
  if(nrow(contr_sub) > 0) {
    p <- p + stat_pvalue_manual(
      contr_sub,
      label = "label",
      y.position = "y.position",
      xmin = "group1",
      xmax = "group2",
      tip.length = 0.01,
      bracket.size = bracket_size,
      size = label_size
    )
  }
  
  return(p)
}
```

# MRI Parameters

```{r echo = F}
rh_rh2_unique %>%
  select(avg_c_r2, avg_m_r2, avg_k_r2,
         avg_c_adc, avg_c_fsoc, avg_m_fsoc, avg_k_fsoc, avg_pcascl) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
  ggplot(aes(x = value)) +
  geom_histogram(bins = 100, fill = "steelblue", color = "white") +
  facet_wrap(~ variable, scales = "free") +
  theme_minimal()

summary(arsenal::tableby(uacr_group ~ avg_c_r2 + avg_m_r2 + avg_k_r2 +
                           avg_c_adc + avg_c_fsoc + avg_m_fsoc + avg_k_fsoc + avg_pcascl + avg_c_t1, data=rh_rh2_unique),
        total = F)

summary(arsenal::tableby(uacr_group ~ tkv_combined + htadjtkv_combined + age + sex + kwt(acr_u, "medianq1q3") + eGFR_CKD_epi + bmi + egfr_cat + acr_u_cat3, data=rh_rh2_unique),
        total = T)

summary(arsenal::tableby(bmi_cat ~ avg_c_t1, data=subset(rh_rh2_croc_panther_unique, study == "PANTHER" & bmi_cat != "Overweight")),
        total = F)

summary(arsenal::tableby(uacr_group ~ avg_c_t1, data=subset(rh_rh2_croc_panther_unique, study == "PANTHER" & bmi_cat != "Overweight")),
        total = F)

```




```{r}
library(ggbreak)
rh_rh2_unique %>%
  ggplot(aes(x = uacr_group, y = avg_k_r2, color = uacr_group)) +
    # geom_violin() +
  geom_boxplot(size = 1, width = 0.5, outliers = F) +
  geom_jitter(alpha = 0.5) +
  theme_minimal() + 
  theme(text = element_text(size = 15),
        panel.grid = element_blank(),
        legend.position = "none") +
  labs(x = NULL, y = "Kidney R2* (1/s)") +
  scale_y_break(c(25, 45), scales = "fixed", space = 0.5) +
  scale_color_manual(values = c("#003049", "#e07a5f"))

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/Renal HERITAGE/Results/Figures/uacr_boxplots.png")

summary(arsenal::tableby(uacr_group ~ kwt(acr_u, "medianq1q3", digits = 2) + eGFR_fas_cr + eGFR_CKD_epi, 
                         data = rh_rh2_unique, test = F, total = F))

# ok.. can you also report proportions in the table of the following eGFR >=90, <90-60, <60, and for UACR, >= 30, UACR 30-300 mg, UACR >=300 mg/g

library(dplyr)
library(janitor)   # for tabyl/adorn helpers
library(forcats)   # for fct_relevel (optional but nice)

rh_rh2_unique <- rh_rh2_unique %>%
  mutate(
    # eGFR categories
    eGFR_cat = case_when(
      eGFR_CKD_epi < 60                      ~ "<60",
      eGFR_CKD_epi >= 60 & eGFR_CKD_epi < 90 ~ "60–<90",
      eGFR_CKD_epi >= 90                     ~ "≥90",
      TRUE ~ NA_character_
    ),
    # ACR/UACR 3-level categories (non-overlapping)
    acr_u_cat3 = case_when(
      acr_u < 30                 ~ "<30",
      acr_u >= 30 & acr_u < 300  ~ "30–<300",
      acr_u >= 300               ~ "≥300",
      TRUE ~ NA_character_
    ),
    # Binary acr_u ≥30
    acr_u_ge30 = case_when(
      is.na(acr_u) ~ NA_integer_,
      acr_u >= 30  ~ 1L,
      TRUE         ~ 0L
    ),
    # ---- Set the display order (critical) ----
    eGFR_cat    = factor(eGFR_cat,    levels = c("<60", "60–<90", "≥90")),
    acr_u_cat3  = factor(acr_u_cat3,  levels = c("<30", "30–<300", "≥300"))
  )

# ---- Proportion tables (will follow the factor order) ----
egfr_tab <- rh_rh2_unique %>%
  tabyl(eGFR_cat) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)

uacr_tab3 <- rh_rh2_unique %>%
  tabyl(acr_u_cat3) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)

uacr_ge30_tab <- rh_rh2_unique %>%
  mutate(acr_u_ge30_cat = factor(
    if_else(is.na(acr_u_ge30), "Missing", if_else(acr_u_ge30 == 1L, "≥30", "<30")),
    levels = c("<30", "≥30", "Missing")
  )) %>%
  tabyl(acr_u_ge30_cat) %>%
  adorn_totals("row") %>%
  adorn_pct_formatting(digits = 1)

# Combined tidy table (keeps the chosen order)
combined_props <- bind_rows(
  egfr_tab %>% mutate(measure = "eGFR category") %>% dplyr::rename(level = eGFR_cat),
  uacr_tab3 %>% mutate(measure = "acr_u category (3-level)") %>% dplyr::rename(level = acr_u_cat3),
  uacr_ge30_tab %>% mutate(measure = "acr_u ≥30 vs <30") %>% dplyr::rename(level = acr_u_ge30_cat)
) %>%
  dplyr::select(measure, level, n, percent)


# BY GROUP
egfr_tab_by_group <- rh_rh2_unique %>%
  tabyl(uacr_group, eGFR_cat) %>%
  adorn_percentages("row") %>%       # proportions within each group
  adorn_pct_formatting(digits = 1)

# acr_u proportions split by uacr_group
acr_tab3_by_group <- rh_rh2_unique %>%
  tabyl(uacr_group, acr_u_cat3) %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1)

acr_ge30_by_group <- rh_rh2_unique %>%
  mutate(acr_u_ge30_cat = factor(
    if_else(is.na(acr_u_ge30), "Missing", if_else(acr_u_ge30 == 1L, "≥30", "<30")),
    levels = c("<30", "≥30", "Missing")
  )) %>%
  tabyl(uacr_group, acr_u_ge30_cat) %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1)

# View tables
egfr_tab_by_group
acr_tab3_by_group
acr_ge30_by_group

```

```{r}
# one more request once we have this done for all of you that I think will be important... can we look at ASL, R2* and ADC in 3 groups lean, overweight and obese while controlling for diabetes status, eGFR and UACR...
fit_fas <- fit_models_emm(
  outcomes = c("avg_pcascl", "avg_k_r2", "avg_c_r2", "avg_c_adc",
               "avg_c_t1", "tkv_combined", "htadjtkv_combined"),
  formula_rhs = "~ bmi_cat + group + eGFR_fas_cr + log(acr_u)",
  emm_var = "bmi_cat",
  data = rh_rh2_croc_panther_unique
)

fit_fas$emm_table
fit_fas$contrast_table
```

```{r}
plot_emms_with_brackets(
  emm_table = fit_fas$emm_table,
  contrast_table = fit_fas$contrast_table,
  outcome_var = "avg_k_r2",
  y_label = "Estimated marginal mean\nof kidney R2*"
)

```

```{r}
# one more request once we have this done for all of you that I think will be important... can we look at ASL, R2* and ADC in 3 groups lean, overweight and obese while controlling for diabetes status, eGFR and UACR...
fit_ckd <- fit_models_emm(
  outcomes = c("avg_pcascl", "avg_k_r2", "avg_c_r2", "avg_c_adc",
               "avg_c_t1", "tkv_combined", "htadjtkv_combined"),
  formula_rhs = "~ bmi_cat + group + eGFR_CKD_epi + log(acr_u)",
  emm_var = "bmi_cat",
  data = rh_rh2_croc_panther_unique
)

fit_ckd$emm_table
fit_ckd$contrast_table

plot_emms_with_brackets(
  emm_table = fit_ckd$emm_table,
  contrast_table = fit_ckd$contrast_table,
  outcome_var = "avg_k_r2",
  y_label = "Estimated marginal mean\nof kidney R2*"
)
```


```{r}
# one more request once we have this done for all of you that I think will be important... can we look at ASL, R2* and ADC in 3 groups lean, overweight and obese while controlling for diabetes status, eGFR and UACR...
fit_age <- fit_models_emm(
  outcomes = c("avg_pcascl", "avg_k_r2", "avg_c_r2", "avg_c_adc",
               "avg_c_t1", "tkv_combined", "htadjtkv_combined"),
  formula_rhs = "~ bmi_cat + group + eGFR_fas_cr + log(acr_u) + age",
  emm_var = "bmi_cat",
  data = rh_rh2_croc_panther_unique
)

summary(rh_rh2_croc_panther_unique$age)
summary(arsenal::tableby(bmi_cat ~ age, rh_rh2_croc_panther_unique))

fit_age$emm_table
fit_age$contrast_table

plot_emms_with_brackets(
  emm_table = fit_age$emm_table,
  contrast_table = fit_age$contrast_table,
  outcome_var = "avg_k_r2",
  y_label = "Estimated marginal mean\nof kidney R2*"
)
```

```{r}
# one more request once we have this done for all of you that I think will be important... can we look at ASL, R2* and ADC in 3 groups lean, overweight and obese while controlling for diabetes status, eGFR and UACR...
fit_panther <- fit_models_emm(
  outcomes = c("avg_c_t1", "tkv_combined", "htadjtkv_combined"),
  formula_rhs = "~ bmi_cat + group + eGFR_fas_cr + log(acr_u) + age",
  emm_var = "bmi_cat",
  data = subset(rh_rh2_croc_panther_unique, study == "PANTHER")
)

fit_panther$emm_table
fit_panther$contrast_table

plot_emms_with_brackets(
  emm_table = fit_panther$emm_table,
  contrast_table = fit_panther$contrast_table,
  outcome_var = "avg_c_t1",
  y_label = "Estimated marginal mean\nof kidney R2*"
)
```