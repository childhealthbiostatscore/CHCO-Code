---
title: "Combine PB90 and ATTEMPT Seurat objects"
author: "Ye Ji Choi and Laura Pyle"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, message = F, warning=F}
#| include: false
library(arsenal)
library(Biobase)
library(BiocGenerics)
library(BiocParallel)
library(broom.mixed)
library(colorspace)
library(cowplot)
library(data.table)
library(DirichletReg)
library(dplyr)
library(edgeR)
library(emmeans)
library(enrichR)
library(foreach)
library(future)
library(future.apply)
library(ggdendro)
library(ggpubr)
library(glmmTMB)
library(harmony)
library(jsonlite)
library(kableExtra)
library(limma)
library(MAST)
library(Matrix)
library(msigdbr)
library(muscat)
library(NMF)
library(nebula)
library(patchwork)
library(pheatmap)
library(readxl)
library(REDCapR)
library(reshape2)
library(rstatix)
library(SAVER)
#library(scDC)
library(scater)
library(Seurat)
library(SingleCellExperiment)
library(slingshot)
library(tidyverse)
library(UpSetR)
library(WriteXLS)
library(aws.s3)
```

# Data Pull & Clean
```{r include = F}



## Create an S3 client
keys <- fromJSON("/Users/choiyej/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Bjornstad Pyle Lab/keys.json") # you need to create this file the same way you did for Hyak

Sys.setenv(
  "AWS_ACCESS_KEY_ID" = keys$MY_ACCESS_KEY,
  "AWS_SECRET_ACCESS_KEY" = keys$MY_SECRET_KEY,
  "AWS_DEFAULT_REGION" = "",
  "AWS_REGION" = "",
  "AWS_S3_ENDPOINT" = "s3.kopah.uw.edu"
)

# read in file
so <- s3readRDS('Kidney transcriptomics/Single cell RNA seq/PB_90_RPCAFix_Metadata_LR_RM_kpmpV1labelled.rds', bucket = "scrna", region = "") # specifying the region to be blank is important

readRDS('/Users/laurapyle/Library/CloudStorage/OneDrive-UW/Bjornstad/Biostatistics Core Shared Drive/scRNA/data_raw/PB_90_RPCAFix_Metadata_LR_RM_kpmpV1labelled.rds')
readRDS('/Users/laurapyle/Library/CloudStorage/OneDrive-UW/Bjornstad/Biostatistics Core Shared Drive/scRNA/data_raw/PB_attempt_harmony_rpca_RM_kpmpV1labelled_Sept2024.RDS')
  
attempt_so <- readRDS(temp_file)

```

# Integrating ATTEMPT & PB90 (CROC)

```{r echo = F}
# create variables for merging
croc_so$study <- "CROCODILE"
croc_so$visit <- "PRE"
attempt_so$study <- "ATTEMPT"
attempt_so$group <- "Type_1_Diabetes"
croc_so$celltype <- croc_so$celltype_harmony

# Using the anchoring method to account for batch effects. Each Seurat object has been cleaned and normalized.
# Find integration features
croc_so <- FindVariableFeatures(croc_so, selection.method = "vst")
attempt_so <- FindVariableFeatures(attempt_so, selection.method = "vst")
features <- SelectIntegrationFeatures(list(croc_so, attempt_so))
# Identify integration anchors & integrate
anchors <- FindIntegrationAnchors(object.list = list(croc_so, attempt_so), verbose=T)
croc_attempt_so <- IntegrateData(anchorset = anchors)

croc_attempt_so
croc_so@assays$RNA@layers$counts
attempt_so@assays$RNA@layers$counts
```

```{r echo = F}
# Create variables for merging
croc_so$study <- "CROCODILE"
croc_so$visit <- "PRE"
attempt_so$study <- "ATTEMPT"
attempt_so$group <- "Type_1_Diabetes"
croc_so$celltype <- croc_so$celltype_harmony

# Find variable features
croc_so <- FindVariableFeatures(croc_so, selection.method = "vst")
attempt_so <- FindVariableFeatures(attempt_so, selection.method = "vst")

# Select features for integration
features <- SelectIntegrationFeatures(list(croc_so, attempt_so))

# Find integration anchors
plan("multisession", workers = 4)
options(future.globals.maxSize = 100 * 1024^3)
anchors <- FindIntegrationAnchors(object.list = list(croc_so, attempt_so), verbose = TRUE)

# Integrate data
croc_attempt_so <- IntegrateData(anchorset = anchors)

# Now explicitly preserve your RNA assay
# Switch the default assay back to RNA so the counts are visible to downstream functions
DefaultAssay(croc_attempt_so) <- "RNA"
croc_attempt_so <- JoinLayers(croc_attempt_so, assay = "RNA")
```

```{r echo = F}
croc_attempt_so <- ScaleData(croc_attempt_so, verbose = TRUE)
croc_attempt_so <- RunPCA(croc_attempt_so, npcs = 30, verbose = TRUE)
croc_attempt_so <- RunUMAP(croc_attempt_so, dims = 1:30, verbose = TRUE)
croc_attempt_so <- FindNeighbors(croc_attempt_so, dims = 1:30)
croc_attempt_so <- FindClusters(croc_attempt_so, resolution = 0.5)

DimPlot(croc_attempt_so, reduction = "umap", group.by = "celltype", label = TRUE, raster = F)
DimPlot(croc_attempt_so, reduction = "umap", group.by = "group", label = TRUE, raster = F)
DimPlot(croc_attempt_so, reduction = "umap", group.by = "study", label = TRUE, raster = F)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(croc_attempt_so, temp_file) # save the temp file locally (will delete after R session)
#s3$upload_file(temp_file, "attempt", 'cleaned_data/croc_attempt_so.rds')
```


```{r echo = F}
# Scale the data
croc_attempt_so_bl <- ScaleData(croc_attempt_so_bl, verbose = FALSE)
croc_attempt_so_bl <- RunPCA(croc_attempt_so_bl, npcs = 30, verbose = FALSE)

# Run UMAP
croc_attempt_so_bl <- RunUMAP(croc_attempt_so_bl, dims = 1:30)

# Find neighbors and clusters
croc_attempt_so_bl <- FindNeighbors(croc_attempt_so_bl, dims = 1:30)
croc_attempt_so_bl <- FindClusters(croc_attempt_so_bl, resolution = 0.5)

# Visualize
DimPlot(croc_attempt_so_bl, reduction = "umap", group.by = "celltype", label = TRUE, raster = F)
```
