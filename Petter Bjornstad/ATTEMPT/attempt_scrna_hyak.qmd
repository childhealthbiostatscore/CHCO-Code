---
title: "ATTEMPT scRNA analysis on Hyak (mixed model)"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, message = F, warning=F}
#| include: false
library(future)
library(future.apply)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(arsenal)
library(Biobase)
library(msigdbr)
library(kableExtra)
library(knitr)
library(REDCapR)
library(data.table)
library(emmeans)
library(NMF)
library(pheatmap)
library(UpSetR)
library(enrichR)
library(WriteXLS)
library(SAVER)
library(readxl)
library(limma)
library(edgeR)
library(BiocGenerics)
library(GSEABase)
library(slingshot)
library(SingleCellExperiment)
library(MAST)
library(muscat)
library(scater)
library(Seurat)
library(jsonlite)
library(dplyr)
library(glmmTMB)
library(reshape2)
library(broom.mixed) 
```

```{r include = F}
reticulate::use_python("/mmfs1/gscratch/scrubbed/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")
```

```{r echo = F, include=F}
# read ATTEMPT Seurat file
temp_file <- tempfile(fileext = ".RDS")
s3$download_file("scrna", "Kidney transcriptomics/Single cell RNA seq/PB_attempt_harmony_rpca_RM_kpmpV1labelled_Sept2024.RDS", temp_file)
attempt_so <- readRDS(temp_file)

# Identify mitochondrial genes
mito_genes <- grep("^MT-", rownames(attempt_so), value = TRUE)

# Calculate the percentage of mitochondrial transcripts per cell
attempt_so[["percent.mt"]] <- PercentageFeatureSet(attempt_so, pattern = "^MT-")
hist(attempt_so$percent.mt)
# FeaturePlot(attempt_so, reduction = "umap.harmony", features = "percent.mt", cols = c("lightgray", "blue"), raster = F)
# DimPlot(attempt_so, reduction = "umap.harmony", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
# DimPlot(attempt_so, reduction = "umap.harmony", group.by = "celltype", raster = F, alpha = 0.2, label = T)

# attempt_so <- subset(attempt_so, subset = percent.mt < 50) # keep as 50%, it's how it's done with KPMP
FeaturePlot(attempt_so, reduction = "umap.harmony", features = "percent.mt", cols = c("lightgray", "blue"), raster = F)
DimPlot(attempt_so, reduction = "umap.harmony", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
DimPlot(attempt_so, reduction = "umap.harmony", group.by = "celltype", raster = F, alpha = 0.2, label = T)

attempt_so <- subset(attempt_so, features = setdiff(rownames(attempt_so), mito_genes)) # remove MT- genes

expr_matrix <- as.matrix(GetAssayData(attempt_so, layer = "data"))
# Calculate the proportion of cells expressing each gene
num_cells_per_gene <- rowSums(expr_matrix > 0)  # Count nonzero cells per gene
total_cells <- ncol(expr_matrix)  # Total number of cells
gene_proportion <- num_cells_per_gene / total_cells  # Fraction of cells expressing each gene
length(gene_proportion) # 30715
# Keep genes expressed in at least 10 cells
genes_to_keep <- names(num_cells_per_gene[num_cells_per_gene >= 10])

length(genes_to_keep)

# marker_genes <- c(
#   # Proximal Tubule (PT) Markers
#   "LRP2", "SLC34A1", "CUBN", "AQP1",
# 
#   # Thick Ascending Limb (TAL) Markers
#   "UMOD", "SLC12A1", "CLCNKB", "ROMK",
# 
#   # Distal Convoluted Tubule (DCT) Markers
#   "SLC12A3", "NCC", "KLHL3", "FXYD2",
# 
#   # Collecting Duct Markers
#   "AQP2",  # Principal Cells (PC)
#   "ATP6V1B1", "ATP6V0D2",  # Intercalated Cells (IC)
# 
#   # Loop of Henle Markers
#   "SLC14A2", "AQP6", "UMOD", "SLC12A2",
# 
#   # Podocyte Markers
#   "NPHS1", "NPHS2", "PODXL", "WT1",
# 
#   # Parietal Epithelial Cell (PEC) Markers
#   "CDH6", "SFRP1", "S100A10",
# 
#   # Endothelial Cell Markers
#   "PECAM1", "VWF", "KDR", "FLT1",
# 
#   # Mesangial Cell (MC) Markers
#   "PDGFRB", "ACTA2", "ITGA8", "FN1",
# 
#   # Fibroblast Markers
#   "DCN", "COL1A1", "PDGFRA", "FBN1",
# 
#   # Vascular Smooth Muscle Cell (VSMC) Markers
#   "MYH11", "ACTA2", "CNN1", "TAGLN",
# 
#   # Macrophage / Monocyte Markers
#   "LYZ", "CD68", "C1QA", "C1QB", "C1QC",
# 
#   # T Cell Markers
#   "CD3E", "CD4", "CD8A", "IL7R",
# 
#   # B Cell Markers
#   "MS4A1", "CD79A", "CD19", "IGHM",
# 
#   # NK / NKT Cell Markers
#   "NCAM1", "NKG7", "KLRD1", "TYROBP")

# marker_genes[!(marker_genes %in% genes_to_keep)] # which of the marker genes are being filtered?
# marker_genes[!(marker_genes %in% genes_to_keep)] %in% rownames(attempt_so) # are they even in our dataset?

remove(expr_matrix)
attempt_so <- subset(attempt_so, features = genes_to_keep)
```

```{r echo = F}
# read ATTEMPT clinical data file
temp_file <- tempfile(fileext = ".RDS")
s3$download_file("harmonized.dataset", "attempt_clinical_data.RDS", temp_file)
dat <- readRDS(temp_file)

attempt_so_meta <- attempt_so@meta.data %>%
  mutate(subject_id = Subject.ID,
         visit = case_when(Visit == "BL" ~ "PRE", 
                           Visit == "4M" ~ "POST"))
attempt_so_meta <- left_join(attempt_so_meta, dat, by = c("subject_id", "visit"))
rownames(attempt_so_meta) <- attempt_so_meta$barcode
attempt_so <- AddMetaData(attempt_so, attempt_so_meta)
options(future.globals.maxSize = 3000 * 1024^3)
```


# All cell types

```{r echo = F}
attempt_so <- NormalizeData(attempt_so)
attempt_so <- ScaleData(attempt_so)
ElbowPlot(attempt_so)
attempt_so <- RunPCA(attempt_so, features = VariableFeatures(object = attempt_so))
attempt_so <- FindNeighbors(attempt_so, dims = 1:30)
attempt_so <- FindClusters(attempt_so)
attempt_so <- RunUMAP(attempt_so, dims = 1:30, reduction.key = "UMAP_")
attempt_so$visit <- factor(attempt_so$visit, levels = c("PRE", "POST"))
attempt_so$treatment <- factor(attempt_so$treatment, levels = c("Placebo", "Dapagliflozin 5mg"),
                                  labels = c("Placebo", "Dapagliflozin"))
```

```{r echo = F}
DimPlot(attempt_so, reduction = "umap", group.by = "visit", raster = F, alpha = 0.2)
DimPlot(attempt_so, reduction = "umap", group.by = "treatment", raster = F, alpha = 0.2)
DimPlot(attempt_so, reduction = "umap", group.by = "celltype", raster = F, alpha = 0.2, label = T)
DimPlot(attempt_so, reduction = "umap", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
```

#### Proportions

```{r echo = F}
attempt_so$celltype_general <- case_when(
  grepl("PT-", attempt_so$celltype) ~ "PT",
  grepl("TAL-", attempt_so$celltype) ~ "TAL",
  attempt_so$celltype %in% c("MON", "MAC", "T", "B", "NKT/NKC") ~ "Immune",
  attempt_so$celltype %in% c("PC-1", "PC-2", "tPC-IC") ~ "PC",
  attempt_so$celltype %in% c("IC-A", "IC-B") ~ "IC",
  attempt_so$celltype %in% c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM") ~ "EC",
  attempt_so$celltype %in% c("FIB", "VSMC/P") ~ "FIB/VSMC/P",
  TRUE ~ "Other - ATL, CNT, DCT, DTL, MC, PEC, POD, lowQ")

attempt_meta <- attempt_so@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_meta$visit_treatment <- factor(attempt_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_meta$celltype <- factor(attempt_meta$celltype,
                                level = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5", 
                                          "TAL-1", "TAL-2", "TAL-3", "TAL_highUMI", 
                                          "DTL-1", "DTL-2", 
                                          "CNT", "PC-1", "PC-2", 
                                          "tPC-IC", "IC-A", "IC-A_lowQuality", "IC-B", 
                                          "ATL", 
                                          "POD", "PEC", 
                                          "DCT",
                                          "MC", 
                                          "EC-PTC", "EC-GC", "EC-AEA", "EC-LYM", 
                                          "VSMC/P", "FIB", 
                                          "MAC", "MON", "NKT/NKC", "T", "B"))


attempt_meta$celltype_general <- factor(attempt_meta$celltype_general,
                                levels = c("PT", 
                                           "TAL", 
                                           "PC", 
                                           "IC", 
                                           "EC", 
                                           "FIB/VSMC/P", 
                                           "Immune", 
                                           "Other - ATL, CNT, DCT, DTL, MC, PEC, POD, lowQ"))

# Check counts
table(attempt_so$celltype_general)

attempt_meta %>% 
  filter(!grepl("_", celltype)) %>%
  ggplot(aes(celltype, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("Cell type distribution") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_cellcounts_plot.jpeg") 

attempt_meta %>%
  filter(!grepl("_", celltype)) %>%
  ggplot(aes(celltype, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 15)
s3$upload_file(temp_file, "attempt", "Figures/attempt_cellcounts_proportions_plot.jpeg") 

attempt_meta %>% 
  ggplot(aes(celltype_general, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("General cell type distribution") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_plot.jpeg") 

attempt_meta %>%
  ggplot(aes(celltype_general, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_proportions_plot.jpeg") 

celltype_counts <- attempt_meta %>%
  filter(!grepl("Other", as.character(celltype_general))) %>%
  group_by(celltype_general) %>%
  summarise(n = n()) %>%
  ungroup()

attempt_meta %>% 
  filter(!grepl("Other", celltype_general)) %>%
  ggplot(aes(celltype_general, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  geom_text(data = celltype_counts, aes(x = celltype_general, y = n, label = n), 
            vjust = -0.5, size = 4, inherit.aes = FALSE) +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold")) +
  ggtitle("General cell type distribution") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_plot_clean.jpeg") 

attempt_meta %>%
  filter(!grepl("Other", celltype_general)) %>%
  ggplot(aes(celltype_general, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_proportions_plot_clean.jpeg") 

attempt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  ggplot(aes(KPMP_celltype, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("PRE Placebo" = "#fbc4ab", "POST Placebo" ="#f4978e",
                               "PRE Dapagliflozin"= "#aaae8e", "POST Dapagliflozin" ="#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_kpmp_pt_proportions_plot.jpeg") 

attempt_meta$kpmp_tal <- case_when(grepl("TAL", attempt_so$KPMP_celltype) ~ attempt_so$KPMP_celltype)
attempt_meta$kpmp_tal <- factor(attempt_meta$kpmp_tal,
                                levels = c("aTAL", "dTAL", "C-TAL-1", "C-TAL-2"))
attempt_meta %>%
  filter(!is.na(attempt_meta$kpmp_tal)) %>%
  ggplot(aes(kpmp_tal, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("PRE Placebo" = "#fbc4ab", "POST Placebo" ="#f4978e",
                               "PRE Dapagliflozin"= "#aaae8e", "POST Dapagliflozin" ="#828e82"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_kpmp_tal_proportions_plot.jpeg") 
```


# Descriptive

```{r echo = F}
unique_attempt_meta <- attempt_meta %>%
  dplyr::select(Subject.ID, Visit, age, Sex, treatment_arm , visit_treatment, diabetes_duration) %>%
  dplyr::summarise(across(where(negate(is.numeric)), ~ ifelse(all(is.na(.x)), NA_character_, last(na.omit(.x)))),
                   across(where(is.numeric), ~ ifelse(all(is.na(.x)), NA_real_, mean(.x, na.rm = TRUE))),
                   .by = c(Subject.ID, Visit))
summary(arsenal::tableby(visit_treatment ~ age + Sex + diabetes_duration + treatment_arm + Visit, data = unique_attempt_meta), test = F, digits = 1)

```


```{r echo = F}
# Functions for running mixed models

# Model 1: Nested visit, zero inflation (~50% convergence)
fit_model <- function(gene, sc_dat) {
  # Subset data (use data.table for speed)
  sc_dat_sub <- sc_dat[sc_dat$Gene == gene, ]

  # Fit the model with glmmTMB, handling errors
  model <- tryCatch({
    glmmTMB(Expression ~ Treatment * Visit + (1 | Subject/Visit),
            data = sc_dat_sub, family = gaussian, ziformula = ~1)
  }, error = function(e) return(NULL))

  if (is.null(model)) return(NULL)

  # Extract fixed effect results
  model_summary <- summary(model)

  dt <- as.data.table(model_summary$coefficients$cond)
  dt[, Gene := gene]
  setnames(dt, c("Std. Error", "Pr(>|z|)"), c("StdError", "PValue"))
  dt <- dt[, .(Gene, Variable = rownames(model_summary$coefficients$cond), Estimate, StdError, PValue)]

  # Extract emmeans
  emmeans_dt <- as.data.table(emmeans(model, ~ Treatment * Visit))
  emmeans_dt[, Gene := gene]

  # Return a named list where the gene is the top-level name
  return(list(model = dt, emmeans = emmeans_dt))
}

# Model 2: Removed nested visit, zero inflation (~10% convergence for cell types with high cell count)
fit_model_2 <- function(gene, sc_dat) {
  # Subset data (use data.table for speed)
  sc_dat_sub <- sc_dat[sc_dat$Gene == gene, ]

  # Fit the model with glmmTMB, handling errors
  model <- tryCatch({
    glmmTMB(Expression ~ Treatment * Visit + (1 | Subject),
            data = sc_dat_sub, family = gaussian, ziformula = ~1)
  }, error = function(e) return(NULL))

  if (is.null(model)) return(NULL)

  # Extract fixed effect results
  model_summary <- summary(model)

  dt <- as.data.table(model_summary$coefficients$cond)
  dt[, Gene := gene]
  setnames(dt, c("Std. Error", "Pr(>|z|)"), c("StdError", "PValue"))
  dt <- dt[, .(Gene, Variable = rownames(model_summary$coefficients$cond), Estimate, StdError, PValue)]

  # Extract emmeans
  emmeans_dt <- as.data.table(emmeans(model, ~ Treatment * Visit))
  emmeans_dt[, Gene := gene]

  # Return a named list where the gene is the top-level name
  return(list(model = dt, emmeans = emmeans_dt))
}

# Model 3: Nested visit, removed zero inflation
fit_model_3 <- function(gene, sc_dat) {
  # Subset data (use data.table for speed)
  sc_dat_sub <- sc_dat[sc_dat$Gene == gene, ]

  # Fit the model with glmmTMB, handling errors
  model <- tryCatch({
    glmmTMB(Expression ~ Treatment * Visit + (1 | Subject/Visit),
            data = sc_dat_sub, family = gaussian)
  }, error = function(e) return(NULL))

  if (is.null(model)) return(NULL)

  # Extract fixed effect results
  model_summary <- summary(model)

  dt <- as.data.table(model_summary$coefficients$cond)
  dt[, Gene := gene]
  setnames(dt, c("Std. Error", "Pr(>|z|)"), c("StdError", "PValue"))
  dt <- dt[, .(Gene, Variable = rownames(model_summary$coefficients$cond), Estimate, StdError, PValue)]

  # Extract emmeans
  emmeans_dt <- as.data.table(emmeans(model, ~ Treatment * Visit))
  emmeans_dt[, Gene := gene]

  # Return a named list where the gene is the top-level name
  return(list(model = dt, emmeans = emmeans_dt))
}

# Model 4: Removed nested visit, removed zero inflation
fit_model_4 <- function(gene, sc_dat) {
  # Subset data (use data.table for speed)
  sc_dat_sub <- sc_dat[sc_dat$Gene == gene, ]

  # Fit the model with glmmTMB, handling errors
  model <- tryCatch({
    glmmTMB(Expression ~ Treatment * Visit + (1 | Subject),
            data = sc_dat_sub, family = gaussian)
  }, error = function(e) return(NULL))

  if (is.null(model)) return(NULL)

  # Extract fixed effect results
  model_summary <- summary(model)

  dt <- as.data.table(model_summary$coefficients$cond)
  dt[, Gene := gene]
  setnames(dt, c("Std. Error", "Pr(>|z|)"), c("StdError", "PValue"))
  dt <- dt[, .(Gene, Variable = rownames(model_summary$coefficients$cond), Estimate, StdError, PValue)]

  # Extract emmeans
  emmeans_dt <- as.data.table(emmeans(model, ~ Treatment * Visit))
  emmeans_dt[, Gene := gene]

  # Return a named list where the gene is the top-level name
  return(list(model = dt, emmeans = emmeans_dt))
}
```

# PT
```{r echo = F}
attempt_so$celltype_pt <- ifelse(grepl("PT-", attempt_so$celltype),
                                 "PT", as.character(attempt_so$celltype))
attempt_so_pt <- subset(attempt_so, celltype_pt == "PT" & celltype != "PT_lowQuality")
```

#### Proportions
```{r echo = F}
attempt_pt_meta <- attempt_so_pt@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))

attempt_pt_meta$celltype <- factor(attempt_pt_meta$celltype, levels = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))
attempt_pt_meta$visit_treatment <- factor(attempt_pt_meta$visit_treatment,
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_pt_meta %>%
  filter(celltype != "PT_lowQuality") %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_visit_proportions_plot.jpeg")

attempt_pt_meta %>%
  filter(celltype != "PT_lowQuality") %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_treatment_proportions_plot.jpeg")


attempt_pt_meta %>%
  filter(celltype != "PT_lowQuality") %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_treatment_visit_proportions_plot.jpeg")

attempt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  ggplot(aes(visit, fill = KPMP_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_visit_proportions_plot_kpmp.jpeg")

attempt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  ggplot(aes(visit_treatment, fill = KPMP_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_visit_treatment_proportions_plot_kpmp.jpeg")
```

#### Mixed model (hurdle, no nested random effect)

```{r echo = F}
# Subset Seurat object to retain only these genes
expr_matrix <- as.matrix(GetAssayData(attempt_so_pt, layer = "data"))
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix)))
colnames(expr_df) <- c("Gene", "Cell", "Expression")

sc_data <- data.frame(Gene = expr_df$Gene,
                      Cell = expr_df$Cell,
                      Treatment = attempt_so_pt@meta.data$treatment,
                      Subject = attempt_so_pt@meta.data$subject_id,
                      Visit = attempt_so_pt@meta.data$visit,
                      Expression = as.vector(expr_df$Expression))
```

```{r echo = F, eval = F}
# plan(multisession, workers = 120)
# 
# trouble shooting... (~ 50% non-convergence)
sampled_data <- sc_data %>% filter(Gene%in%genes_to_keep[100:200])
genes <- unique(sampled_data$Gene)
# 
# ## original model
# fit_glmmTMB <- function(gene) {
#   gene_data <- sampled_data %>% filter(Gene == gene)
#   model <- glmmTMB(Expression ~ Treatment * Visit + (1 | Subject / Visit),
#             data = gene_data, family = gaussian, ziformula = ~1)
#   if (!is.null(model)) {
#     results <- summary(model)$coefficients$cond %>% as.data.frame() %>%
#       rownames_to_column("Parameter") %>%
#       mutate(Gene = gene)  # Add Gene column
#     return(results)
#   } else {
#     return(data.frame(Gene = gene, Parameter = NA, Estimate = NA, Std.Error = NA, z.value = NA, Pr = NA))
#   }
# }
# results_list <- map(genes, fit_glmmTMB)
# final_results <- bind_rows(results_list)
# nonconverged_genes <- (final_results %>%
#   group_by(Gene) %>%
#   filter(all(is.na(`z value`))))$Gene
# (length(unique(nonconverged_genes))/50)*100
# # 48%
# 
## trying no zero-inflation
# fit_glmmTMB_1 <- function(gene) {
#   gene_data <- sampled_data %>% filter(Gene == gene)
#   model <- glmmTMB(Expression ~ Treatment * Visit + (1 | Subject / Visit),
#                    data = gene_data, family = gaussian)
#   if (!is.null(model)) {
#     results <- summary(model)$coefficients$cond %>% as.data.frame() %>%
#       rownames_to_column("Parameter") %>%
#       mutate(Gene = gene)  # Add Gene column
#     return(results)
#   } else {
#     return(data.frame(Gene = gene, Parameter = NA, Estimate = NA, Std.Error = NA, z.value = NA, Pr = NA))
#   }
# }
# results_list_1 <- map(genes, fit_glmmTMB_1)
# final_results_1 <- bind_rows(results_list_1)
# nonconverged_genes_1 <- (final_results_1 %>%
#   group_by(Gene) %>%
#   filter(all(is.na(`z value`))))$Gene
# (length(unique(nonconverged_genes_1))/50)*100
# 10% on 50-100, 26% on 100-200 

# ## trying no nested visit
# fit_glmmTMB_2 <- function(gene) {
#   gene_data <- sampled_data %>% filter(Gene == gene)
#   model <- glmmTMB(Expression ~ Treatment * Visit + (1 | Subject),
#                    data = gene_data, family = gaussian, ziformula = ~1)
#   if (!is.null(model)) {
#     results <- summary(model)$coefficients$cond %>% as.data.frame() %>%
#       rownames_to_column("Parameter") %>%
#       mutate(Gene = gene)  # Add Gene column
#     return(results)
#   } else {
#     return(data.frame(Gene = gene, Parameter = NA, Estimate = NA, Std.Error = NA, z.value = NA, Pr = NA))
#   }
# }
# results_list_2 <- map(genes, fit_glmmTMB_2)
# final_results_2 <- bind_rows(results_list_2)
# nonconverged_genes_2 <- (final_results_2 %>%
#   group_by(Gene) %>%
#   filter(all(is.na(`z value`))))$Gene
# (length(unique(nonconverged_genes_2))/50)*100
# 4%, 50%

## trying no nested visit and no zero inflation
fit_glmmTMB_3 <- function(gene) {
  gene_data <- sampled_data %>% filter(Gene == gene)
  model <- glmmTMB(Expression ~ Treatment * Visit + (1 | Subject),
                   data = gene_data, family = gaussian)
  if (!is.null(model)) {
    results <- summary(model)$coefficients$cond %>% as.data.frame() %>%
      rownames_to_column("Parameter") %>%
      mutate(Gene = gene)  # Add Gene column
    return(results)
  } else {
    return(data.frame(Gene = gene, Parameter = NA, Estimate = NA, Std.Error = NA, z.value = NA, Pr = NA))
  }
}
results_list_3 <- map(genes, fit_glmmTMB_3)
final_results_3 <- bind_rows(results_list_3)
nonconverged_genes_3 <- (final_results_3 %>%
  group_by(Gene) %>%
  filter(all(is.na(`z value`))))$Gene
(length(unique(nonconverged_genes_3))/50)*100
# 2%, 14%

# tried BFGS, L-BFGS-B, and Nelder-Meld optimizers with nested visit/non-nested visit, zero inflation, no zero inflation, etc. pushing all variance estimates to the same minimum
```


```{r echo = F}
# set up batches (of 1000)
genes_list <- list()
batch_size <- 1000
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1)
for (i in 1:28) {
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)]
}
names(genes_list) <- paste0("genes_", 1:28)
list2env(genes_list, envir = .GlobalEnv)
remove(genes_list)

sc_data_list <- list()
for (i in 1:28) {
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i)))
}
names(sc_data_list) <- paste0("sc_data_", 1:28)
list2env(sc_data_list, envir = .GlobalEnv)
remove(sc_data_list)
```

```{r echo = F}
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("PT/1/pt_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("PT/2/pt_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("PT/3/pt_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("PT/4/pt_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F}
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PT/1/pt_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PT/1/pt_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PT/2/pt_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PT/2/pt_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/3/pt_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/3/pt_attempt_scrna_mm_emmeans_combined_3.rds')

# Model 4
# Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PT/4/pt_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PT/4/pt_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)

* # of genes up/down
* upset plots of overlap in cell types
* pathways (IPA and GSEA - GO/KEGG/one that Long used from Broad)
* pseudotime (call with Kelly)
* BOLD MRI stuff in the PPT so that we show everything in one slide

# TAL

```{r echo = F}
attempt_so$celltype_tal <- ifelse(grepl("TAL-", attempt_so$celltype),
                                 "TAL", as.character(attempt_so$celltype))
attempt_so_tal <- subset(attempt_so, celltype_tal == "TAL" & celltype != "TAL_highUMI")
```

#### Proportions
```{r echo = F}
attempt_tal_meta <- attempt_so_tal@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_tal_meta$celltype <- factor(attempt_tal_meta$celltype, levels = c("TAL-1", "TAL-2", "TAL-3"))
attempt_tal_meta$visit_treatment <- factor(attempt_tal_meta$visit_treatment,
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_tal_meta %>%
  filter(celltype != "TAL_highUMI") %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_visit_proportions_plot.jpeg")

attempt_tal_meta %>%
  filter(celltype != "tal_lowQuality") %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_proportions_plot.jpeg")

attempt_tal_meta %>%
  filter(celltype != "tal_lowQuality") %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_visit_proportions_plot.jpeg")

attempt_meta %>%
  filter(grepl("TAL", KPMP_celltype)) %>%
  ggplot(aes(visit, fill = kpmp_tal)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_visit_proportions_plot_kpmp.jpeg")

attempt_meta %>%
  filter(grepl("TAL", KPMP_celltype)) %>%
  ggplot(aes(treatment, fill = kpmp_tal)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_proportions_plot_kpmp.jpeg")

attempt_meta %>%
  filter(grepl("TAL", KPMP_celltype)) %>%
  ggplot(aes(visit_treatment, fill = kpmp_tal)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_visit_treatment_proportions_plot_kpmp.jpeg")
```

#### Mixed model (hurdle, nested random effect)

```{r echo = F}
# Subset Seurat object to retain only these genes
expr_matrix <- as.matrix(GetAssayData(attempt_so_tal, layer = "data"))
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix)))
colnames(expr_df) <- c("Gene", "Cell", "Expression")

sc_data <- data.frame(Gene = expr_df$Gene,
                      Cell = expr_df$Cell,
                      Treatment = attempt_so_tal@meta.data$treatment,
                      Subject = attempt_so_tal@meta.data$subject_id,
                      Visit = attempt_so_tal@meta.data$visit,
                      Expression = as.vector(expr_df$Expression))
```


```{r echo = F}
# set up batches (of 1000)
genes_list <- list()
batch_size <- 1000
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1)
for (i in 1:28) {
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)]
}
names(genes_list) <- paste0("genes_", 1:28)
list2env(genes_list, envir = .GlobalEnv)
remove(genes_list)

sc_data_list <- list()
for (i in 1:28) {
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i)))
}
names(sc_data_list) <- paste0("sc_data_", 1:28)
list2env(sc_data_list, envir = .GlobalEnv)
remove(sc_data_list)
```

```{r echo = F}
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("TAL/1/tal_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("TAL/2/tal_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("TAL/3/tal_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("TAL/4/tal_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F}
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'TAL/1/tal_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'TAL/1/tal_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'TAL/2/tal_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'TAL/2/tal_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'TAL/3/tal_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'TAL/3/tal_attempt_scrna_mm_emmeans_combined_3.rds')

# # Model 4
# # Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'TAL/4/tal_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'TAL/4/tal_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)

# Immune Cells

```{r echo = F}
# immune cells: MAC, MON, T, B, NKT/NKC
attempt_so$celltype_immune <- ifelse(attempt_so$celltype %in% c("MON", "MAC", "T", "B", "NKT/NKC"),
                                     "Immune", as.character(attempt_so$celltype))
attempt_so_immune <- subset(attempt_so, celltype_immune == "Immune")
```

#### Proportions
```{r echo = F}
attempt_immune_meta <- attempt_so_immune@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_immune_meta$celltype <- factor(attempt_immune_meta$celltype, levels = c("MON", "MAC", "T", "B", "NKT/NKC"))
attempt_immune_meta$visit_treatment <- factor(attempt_immune_meta$visit_treatment,
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_immune_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_immune_treatment_visit_proportions_plot.jpeg")

attempt_immune_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_immune_treatment_proportions_plot.jpeg")

attempt_immune_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_immune_treatment_visit_proportions_plot.jpeg")
```

#### Mixed model (hurdle, nested random effect)

```{r echo = F}
# Subset Seurat object to retain only these genes
expr_matrix <- as.matrix(GetAssayData(attempt_so_immune, layer = "data"))
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix)))
colnames(expr_df) <- c("Gene", "Cell", "Expression")

sc_data <- data.frame(Gene = expr_df$Gene,
                      Cell = expr_df$Cell,
                      Treatment = attempt_so_immune@meta.data$treatment,
                      Subject = attempt_so_immune@meta.data$subject_id,
                      Visit = attempt_so_immune@meta.data$visit,
                      Expression = as.vector(expr_df$Expression))
```

```{r echo = F}
# set up batches (of 1000)
genes_list <- list()
batch_size <- 1000
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1)
for (i in 1:28) {
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)]
}
names(genes_list) <- paste0("genes_", 1:28)
list2env(genes_list, envir = .GlobalEnv)
remove(genes_list)

sc_data_list <- list()
for (i in 1:28) {
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i)))
}
names(sc_data_list) <- paste0("sc_data_", 1:28)
list2env(sc_data_list, envir = .GlobalEnv)
remove(sc_data_list)
```

```{r echo = F}
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("Immune/1/immune_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("Immune/2/immune_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("Immune/3/immune_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("Immune/4/immune_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F}
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'Immune/1/immune_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'Immune/1/immune_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'Immune/2/immune_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'Immune/2/immune_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune/3/immune_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune/3/immune_attempt_scrna_mm_emmeans_combined_3.rds')

# # Model 4
# # Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'Immune/4/immune_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'Immune/4/immune_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual) 

#### Sum expression (pseudo-bulk within individual) 

# DTL (only ~1000 cells, not running)

```{r echo = F, eval = F} 
# DTL-1 & DTL-2 
attempt_so$celltype_dtl <- ifelse(attempt_so$celltype %in% c("DTL-1", "DTL-2"), 
                                     "DTL", as.character(attempt_so$celltype)) 
attempt_so_dtl <- subset(attempt_so, celltype_dtl == "DTL") 
``` 

#### Proportions 
```{r echo = F, eval = F} 
attempt_dtl_meta <- attempt_so_dtl@meta.data %>% 
  mutate(visit_treatment = paste0(visit, " ", treatment)) 
attempt_dtl_meta$celltype <- factor(attempt_dtl_meta$celltype, levels = c("DTL-1", "DTL-2")) 
attempt_dtl_meta$visit_treatment <- factor(attempt_dtl_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo", 
                                                     "PRE Dapagliflozin", "POST Dapagliflozin")) 
attempt_dtl_meta %>% 
  ggplot(aes(visit, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  ggtitle("Proportion of cells") + 
  scale_fill_manual(values = c("#264653", "#2a9d8f")) 
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_dtl_treatment_visit_proportions_plot.jpeg")

attempt_dtl_meta %>% 
  ggplot(aes(treatment, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  ggtitle("Proportion of cells") + 
  scale_fill_manual(values = c("#264653", "#2a9d8f")) 
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_dtl_treatment_proportions_plot.jpeg")

attempt_dtl_meta %>% 
  ggplot(aes(visit_treatment, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  ggtitle("Proportion of cells") + 
  scale_fill_manual(values = c("#264653", "#2a9d8f")) 
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_dtl_treatment_visit_proportions_plot.jpeg")
``` 

#### Mixed model (hurdle, nested random effect) 

```{r echo = F, eval = F} 
# Subset Seurat object to retain only these genes 
expr_matrix <- as.matrix(GetAssayData(attempt_so_dtl, layer = "data")) 
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix))) 
colnames(expr_df) <- c("Gene", "Cell", "Expression") 

sc_data <- data.frame(Gene = expr_df$Gene, 
                      Cell = expr_df$Cell, 
                      Treatment = attempt_so_dtl@meta.data$treatment, 
                      Subject = attempt_so_dtl@meta.data$subject_id, 
                      Visit = attempt_so_dtl@meta.data$visit, 
                      Expression = as.vector(expr_df$Expression)) 
``` 

```{r echo = F, eval = F} 
# set up batches (of 1000) 
genes_list <- list() 
batch_size <- 1000 
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1) 
for (i in 1:28) { 
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)] 
} 
names(genes_list) <- paste0("genes_", 1:28) 
list2env(genes_list, envir = .GlobalEnv) 
remove(genes_list) 

sc_data_list <- list() 
for (i in 1:28) { 
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i))) 
} 
names(sc_data_list) <- paste0("sc_data_", 1:28) 
list2env(sc_data_list, envir = .GlobalEnv) 
remove(sc_data_list) 
``` 

```{r echo = F, eval = F} 
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("DTL/1/dtl_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("DTL/2/dtl_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("DTL/3/dtl_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("DTL/4/dtl_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F, eval = F} 
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'DTL/1/dtl_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'DTL/1/dtl_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'DTL/2/dtl_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'DTL/2/dtl_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'DTL/3/dtl_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'DTL/3/dtl_attempt_scrna_mm_emmeans_combined_3.rds')

# # Model 4
# # Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'DTL/4/dtl_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'DTL/4/dtl_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual) 

#### Sum expression (pseudo-bulk within individual) 

# PC 

```{r echo = F} 
# PC-1 & PC-2, tPC-IC 
attempt_so$celltype_pc <- ifelse(attempt_so$celltype %in% c("PC-1", "PC-2", "tPC-IC"), 
                                     "PC", as.character(attempt_so$celltype)) 
attempt_so_pc <- subset(attempt_so, celltype_pc == "PC") 
``` 

#### Proportions 
```{r echo = F} 
attempt_pc_meta <- attempt_so_pc@meta.data %>% 
  mutate(visit_treatment = paste0(visit, " ", treatment)) 
attempt_pc_meta$celltype <- factor(attempt_pc_meta$celltype, levels = c("PC-1", "PC-2", "tPC-IC")) 
attempt_pc_meta$visit_treatment <- factor(attempt_pc_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo", 
                                                     "PRE Dapagliflozin", "POST Dapagliflozin")) 
attempt_pc_meta %>% 
  ggplot(aes(visit, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  ggtitle("Proportion of cells") + 
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261")) 
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pc_treatment_visit_proportions_plot.jpeg")

attempt_pc_meta %>% 
  ggplot(aes(treatment, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  ggtitle("Proportion of cells") + 
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261")) 
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pc_treatment_proportions_plot.jpeg")


attempt_pc_meta %>% 
  ggplot(aes(visit_treatment, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  ggtitle("Proportion of cells") + 
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261")) 
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pc_treatment_visit_proportions_plot.jpeg")
``` 

#### Mixed model (hurdle, nested random effect) 

```{r echo = F} 
# Subset Seurat object to retain only these genes 
expr_matrix <- as.matrix(GetAssayData(attempt_so_pc, layer = "data")) 
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix))) 
colnames(expr_df) <- c("Gene", "Cell", "Expression") 

sc_data <- data.frame(Gene = expr_df$Gene, 
                      Cell = expr_df$Cell, 
                      Treatment = attempt_so_pc@meta.data$treatment, 
                      Subject = attempt_so_pc@meta.data$subject_id, 
                      Visit = attempt_so_pc@meta.data$visit, 
                      Expression = as.vector(expr_df$Expression)) 
``` 

```{r echo = F} 
# set up batches (of 1000) 
genes_list <- list() 
batch_size <- 1000 
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1) 
for (i in 1:28) { 
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)] 
} 
names(genes_list) <- paste0("genes_", 1:28) 
list2env(genes_list, envir = .GlobalEnv) 
remove(genes_list) 

sc_data_list <- list() 
for (i in 1:28) { 
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i))) 
} 
names(sc_data_list) <- paste0("sc_data_", 1:28) 
list2env(sc_data_list, envir = .GlobalEnv) 
remove(sc_data_list) 
``` 

```{r echo = F}
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("PC/1/pc_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("PC/2/pc_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("PC/3/pc_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("PC/4/pc_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F}
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PC/1/pc_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PC/1/pc_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PC/2/pc_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PC/2/pc_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PC/3/pc_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PC/3/pc_attempt_scrna_mm_emmeans_combined_3.rds')

# # Model 4
# # Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PC/4/pc_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'PC/4/pc_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)


# IC

```{r echo = F}
# IC-A, IC-B
attempt_so$celltype_ic <- ifelse(attempt_so$celltype %in% c("IC-A", "IC-B"),
                                     "IC", as.character(attempt_so$celltype))
attempt_so_ic <- subset(attempt_so, celltype_ic == "IC")
```

#### Proportions
```{r echo = F}
attempt_ic_meta <- attempt_so_ic@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_ic_meta$celltype <- factor(attempt_ic_meta$celltype, levels = c("IC-A", "IC-B"))
attempt_ic_meta$visit_treatment <- factor(attempt_ic_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_ic_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ic_treatment_visit_proportions_plot.jpeg")

attempt_ic_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ic_treatment_proportions_plot.jpeg")

attempt_ic_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ic_treatment_visit_proportions_plot.jpeg")
```

#### Mixed model (hurdle, nested random effect)

```{r echo = F}
# Subset Seurat object to retain only these genes
expr_matrix <- as.matrix(GetAssayData(attempt_so_ic, layer = "data"))
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix)))
colnames(expr_df) <- c("Gene", "Cell", "Expression")

sc_data <- data.frame(Gene = expr_df$Gene,
                      Cell = expr_df$Cell,
                      Treatment = attempt_so_ic@meta.data$treatment,
                      Subject = attempt_so_ic@meta.data$subject_id,
                      Visit = attempt_so_ic@meta.data$visit,
                      Expression = as.vector(expr_df$Expression))
```

```{r echo = F}
# set up batches (of 1000)
genes_list <- list()
batch_size <- 1000
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1)
for (i in 1:28) {
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)]
}
names(genes_list) <- paste0("genes_", 1:28)
list2env(genes_list, envir = .GlobalEnv)
remove(genes_list)

sc_data_list <- list()
for (i in 1:28) {
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i)))
}
names(sc_data_list) <- paste0("sc_data_", 1:28)
list2env(sc_data_list, envir = .GlobalEnv)
remove(sc_data_list)
```

```{r echo = F}
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("IC/1/ic_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("IC/2/ic_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("IC/3/ic_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("IC/4/ic_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F}
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'IC/1/ic_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'IC/1/ic_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'IC/2/ic_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'IC/2/ic_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'IC/3/ic_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'IC/3/ic_attempt_scrna_mm_emmeans_combined_3.rds')

# # Model 4
# # Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'IC/4/ic_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'IC/4/ic_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)

# EC

```{r echo = F}
attempt_so$celltype_ec <- ifelse(attempt_so$celltype %in% c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"),
                                     "EC", as.character(attempt_so$celltype))
attempt_so_ec <- subset(attempt_so, celltype_ec == "EC")
```

#### Proportions
```{r echo = F}
attempt_ec_meta <- attempt_so_ec@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_ec_meta$celltype <- factor(attempt_ec_meta$celltype, levels = c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"))
attempt_ec_meta$visit_treatment <- factor(attempt_ec_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_ec_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ec_treatment_visit_proportions_plot.jpeg")

attempt_ec_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ec_treatment_proportions_plot.jpeg")

attempt_ec_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ec_treatment_visit_proportions_plot.jpeg")
```

#### Mixed model (hurdle, nested random effect)

```{r echo = F}
# Subset Seurat object to retain only these genes
expr_matrix <- as.matrix(GetAssayData(attempt_so_ec, layer = "data"))
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix)))
colnames(expr_df) <- c("Gene", "Cell", "Expression")

sc_data <- data.frame(Gene = expr_df$Gene,
                      Cell = expr_df$Cell,
                      Treatment = attempt_so_ec@meta.data$treatment,
                      Subject = attempt_so_ec@meta.data$subject_id,
                      Visit = attempt_so_ec@meta.data$visit,
                      Expression = as.vector(expr_df$Expression))
```

```{r echo = F}
# set up batches (of 1000)
genes_list <- list()
batch_size <- 1000
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1)
for (i in 1:28) {
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)]
}
names(genes_list) <- paste0("genes_", 1:28)
list2env(genes_list, envir = .GlobalEnv)
remove(genes_list)

sc_data_list <- list()
for (i in 1:28) {
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i)))
}
names(sc_data_list) <- paste0("sc_data_", 1:28)
list2env(sc_data_list, envir = .GlobalEnv)
remove(sc_data_list)
```

```{r echo = F}
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("EC/1/ec_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("EC/2/ec_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("EC/3/ec_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("EC/4/ec_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F}
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'EC/1/ec_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'EC/1/ec_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'EC/2/ec_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'EC/2/ec_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'EC/3/ec_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'EC/3/ec_attempt_scrna_mm_emmeans_combined_3.rds')

# # Model 4
# # Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'EC/4/ec_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'EC/4/ec_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)

# FIB, VSMC/P

```{r echo = F}
attempt_so$celltype_fibvsmc <- ifelse(attempt_so$celltype %in% c("FIB", "VSMC/P"),
                                     "FIBVSMC", as.character(attempt_so$celltype))
attempt_so_fibvsmc <- subset(attempt_so, celltype_fibvsmc == "FIBVSMC")
```

#### Proportions
```{r echo = F}
attempt_fibvsmc_meta <- attempt_so_fibvsmc@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_fibvsmc_meta$celltype <- factor(attempt_fibvsmc_meta$celltype, levels = c("FIB", "VSMC/P"))
attempt_fibvsmc_meta$visit_treatment <- factor(attempt_fibvsmc_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_fibvsmc_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_fibvsmc_treatment_visit_proportions_plot.jpeg")

attempt_fibvsmc_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_fibvsmc_treatment_proportions_plot.jpeg")

attempt_fibvsmc_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  ggtitle("Proportion of cells") +
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_fibvsmc_treatment_visit_proportions_plot.jpeg")
```

#### Mixed model (hurdle, nested random effect)

```{r echo = F}
# Subset Seurat object to retain only these genes
expr_matrix <- as.matrix(GetAssayData(attempt_so_fibvsmc, layer = "data"))
expr_df <- as.data.frame(as.table(as.matrix(expr_matrix)))
colnames(expr_df) <- c("Gene", "Cell", "Expression")

sc_data <- data.frame(Gene = expr_df$Gene,
                      Cell = expr_df$Cell,
                      Treatment = attempt_so_fibvsmc@meta.data$treatment,
                      Subject = attempt_so_fibvsmc@meta.data$subject_id,
                      Visit = attempt_so_fibvsmc@meta.data$visit,
                      Expression = as.vector(expr_df$Expression))
```

```{r echo = F}
# set up batches (of 1000)
genes_list <- list()
batch_size <- 1000
breakpoints <- c(seq(1, 27001, by = batch_size), length(genes_to_keep) + 1)
for (i in 1:28) {
  genes_list[[i]] <- genes_to_keep[breakpoints[i]:(breakpoints[i + 1] - 1)]
}
names(genes_list) <- paste0("genes_", 1:28)
list2env(genes_list, envir = .GlobalEnv)
remove(genes_list)

sc_data_list <- list()
for (i in 1:28) {
  sc_data_list[[i]] <- subset(sc_data, Gene %in% get(paste0("genes_", i)))
}
names(sc_data_list) <- paste0("sc_data_", 1:28)
list2env(sc_data_list, envir = .GlobalEnv)
remove(sc_data_list)
```

```{r echo = F}
# Set up parallel processing (use 120 cores) # 128 max available on this R installation
plan(multisession, workers = 120)

# Define the number of batches
num_batches <- 28

# # Model 1
# # Initialize lists
# results_list <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("FIBVSMCP/1/fibvsmcp_attempt_scrna_mm_results", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
# 
# # Model 2
# # Initialize lists
# results_list_2 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_2[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_2, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_2[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("FIBVSMCP/2/fibvsmcp_attempt_scrna_mm_results_2_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }

# Model 3
# Initialize lists
results_list_3 <- vector("list", num_batches)

# Start loop
for (i in 1:num_batches) {
  start_time <- Sys.time()

  # Apply the model function to the genes in the current batch
  results_list_3[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_3, sc_dat = get(paste0("sc_data_", i)))

  # Save results temporarily
  temp_file <- tempfile(fileext = "rds")
  saveRDS(results_list_3[[i]], temp_file)

  # Upload results to S3 with dynamic file naming
  s3$upload_file(temp_file, "attempt", paste0("FIBVSMCP/3/fibvsmcp_attempt_scrna_mm_results_3_", i, ".rds"))

  end_time <- Sys.time()
  print(end_time - start_time)  # Print time taken for each batch
}

# # Model 4
# # Initialize lists
# results_list_4 <- vector("list", num_batches)
# 
# # Start loop
# for (i in 1:num_batches) {
#   start_time <- Sys.time()
# 
#   # Apply the model function to the genes in the current batch
#   results_list_4[[i]] <- future_lapply(get(paste0("genes_", i)), fit_model_4, sc_dat = get(paste0("sc_data_", i)))
# 
#   # Save results temporarily
#   temp_file <- tempfile(fileext = "rds")
#   saveRDS(results_list_4[[i]], temp_file)
# 
#   # Upload results to S3 with dynamic file naming
#   s3$upload_file(temp_file, "attempt", paste0("FIBVSMCP/4/fibvsmcp_attempt_scrna_mm_results_4_", i, ".rds"))
# 
#   end_time <- Sys.time()
#   print(end_time - start_time)  # Print time taken for each batch
# }
```


```{r echo = F}
# # Model 1
# # Combine all model data tables into one
# model_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined <- rbindlist(model_df_list, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list <- lapply(results_list, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined <- rbindlist(emmeans_df_list, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'FIBVSMCP/1/fibvsmcp_attempt_scrna_mm_model_combined.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'FIBVSMCP/1/fibvsmcp_attempt_scrna_mm_emmeans_combined.rds')
# 
# # Model 2
# # Combine all model data tables into one
# model_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_2 <- rbindlist(model_df_list_2, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_2 <- lapply(results_list_2, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_2 <- rbindlist(emmeans_df_list_2, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'FIBVSMCP/2/fibvsmcp_attempt_scrna_mm_model_combined_2.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_2, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'FIBVSMCP/2/fibvsmcp_attempt_scrna_mm_emmeans_combined_2.rds')

# Model 3
# Combine all model data tables into one
model_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
model_df_combined_3 <- rbindlist(model_df_list_3, fill = TRUE)

# Combine all emmeans data tables into one
emmeans_df_list_3 <- lapply(results_list_3, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
emmeans_df_combined_3 <- rbindlist(emmeans_df_list_3, fill = TRUE)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(model_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'FIBVSMCP/3/fibvsmcp_attempt_scrna_mm_model_combined_3.rds')

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(emmeans_df_combined_3, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'FIBVSMCP/3/fibvsmcp_attempt_scrna_mm_emmeans_combined_3.rds')

# # Model 4
# # Combine all model data tables into one
# model_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$model), fill = TRUE))
# model_df_combined_4 <- rbindlist(model_df_list_4, fill = TRUE)
# 
# # Combine all emmeans data tables into one
# emmeans_df_list_4 <- lapply(results_list_4, function(x) rbindlist(lapply(x, function(y) y$emmeans), fill = TRUE))
# emmeans_df_combined_4 <- rbindlist(emmeans_df_list_4, fill = TRUE)
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(model_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'FIBVSMCP/4/fibvsmcp_attempt_scrna_mm_model_combined_4.rds')
# 
# temp_file <- tempfile(fileext = "rds") # need to create a temporary file
# saveRDS(emmeans_df_combined_4, temp_file) # save the temp file locally (will delete after R session)
# s3$upload_file(temp_file, "attempt", 'FIBVSMCP/4/fibvsmcp_attempt_scrna_mm_emmeans_combined_4.rds')
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)

# Expression

```{r echo = F}
prefixes <- c("pt", "tal", "pc", "ic", "ec", "fibvsmcp", "immune")
mods <- paste0("mod", 1:4)

nonconverged_genes <- setNames(lapply(prefixes, function(prefix) {
  setNames(lapply(mods, function(mod) {
    s3_key <- paste0("Nonconverged genes/", prefix, "_nonconverged_genes_", mod, ".rds")
    temp_file <- tempfile(fileext = ".rds")
    s3$download_file("attempt", s3_key, temp_file)
    readRDS(temp_file)
  }), mods)
}), prefixes)
```

### PT
```{r echo = F}
percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_pt, features = nonconverged_genes$pt[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_pt, features = nonconverged_genes$pt[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_pt, features = nonconverged_genes$pt[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_pt, features = nonconverged_genes$pt[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
pt_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

pt_nonconverged_summary <- pt_nonconverged_summary[, c(ncol(pt_nonconverged_summary), 1:(ncol(pt_nonconverged_summary)-1))]
colnames(pt_nonconverged_summary) <- gsub("\\.", "", colnames(pt_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(pt_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/pt_nonconverged_summary.rds')


pt_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(pt_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in PT cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/pt_nonconverged_expression_plot.jpeg") 
```

### TAL
```{r echo = F}
percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_tal, features = nonconverged_genes$tal[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_tal, features = nonconverged_genes$tal[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_tal, features = nonconverged_genes$tal[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_tal, features = nonconverged_genes$tal[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
tal_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

tal_nonconverged_summary <- tal_nonconverged_summary[, c(ncol(tal_nonconverged_summary), 1:(ncol(tal_nonconverged_summary)-1))]
colnames(tal_nonconverged_summary) <- gsub("\\.", "", colnames(tal_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(tal_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/tal_nonconverged_summary.rds')


tal_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(tal_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in TAL cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/tal_nonconverged_expression_plot.jpeg") 
```
### immune
```{r echo = F}
percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_immune, features = nonconverged_genes$immune[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_immune, features = nonconverged_genes$immune[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_immune, features = nonconverged_genes$immune[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_immune, features = nonconverged_genes$immune[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
immune_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

immune_nonconverged_summary <- immune_nonconverged_summary[, c(ncol(immune_nonconverged_summary), 1:(ncol(immune_nonconverged_summary)-1))]
colnames(immune_nonconverged_summary) <- gsub("\\.", "", colnames(immune_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(immune_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/immune_nonconverged_summary.rds')


immune_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(immune_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in Immune cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/immune_nonconverged_expression_plot.jpeg") 
```
### PC
```{r echo = F}
attempt_so_pc[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_pc, features = nonconverged_genes$pc[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_pc, features = nonconverged_genes$pc[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_pc, features = nonconverged_genes$pc[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_pc, features = nonconverged_genes$pc[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_pc, features = nonconverged_genes$pc[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
pc_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

pc_nonconverged_summary <- pc_nonconverged_summary[, c(ncol(pc_nonconverged_summary), 1:(ncol(pc_nonconverged_summary)-1))]
colnames(pc_nonconverged_summary) <- gsub("\\.", "", colnames(pc_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(pc_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/pc_nonconverged_summary.rds')


pc_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(pc_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in PC cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/pc_nonconverged_expression_plot.jpeg") 
```

### IC
```{r echo = F}
attempt_so_ic[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_ic, features = nonconverged_genes$ic[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_ic, features = nonconverged_genes$ic[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_ic, features = nonconverged_genes$ic[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_ic, features = nonconverged_genes$ic[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_ic, features = nonconverged_genes$ic[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
ic_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

ic_nonconverged_summary <- ic_nonconverged_summary[, c(ncol(ic_nonconverged_summary), 1:(ncol(ic_nonconverged_summary)-1))]
colnames(ic_nonconverged_summary) <- gsub("\\.", "", colnames(ic_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(ic_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/ic_nonconverged_summary.rds')


ic_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(ic_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in IC cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/ic_nonconverged_expression_plot.jpeg") 
```
### EC
```{r echo = F}
attempt_so_ec[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_ec, features = nonconverged_genes$ec[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_ec, features = nonconverged_genes$ec[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_ec, features = nonconverged_genes$ec[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_ec, features = nonconverged_genes$ec[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_ec, features = nonconverged_genes$ec[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
ec_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

ec_nonconverged_summary <- ec_nonconverged_summary[, c(ncol(ec_nonconverged_summary), 1:(ncol(ec_nonconverged_summary)-1))]
colnames(ec_nonconverged_summary) <- gsub("\\.", "", colnames(ec_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(ec_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/ec_nonconverged_summary.rds')


ec_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(ec_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in EC cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/ec_nonconverged_expression_plot.jpeg") 
```
### FIB, VSMC/P
```{r echo = F}
attempt_so_fibvsmc[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_fibvsmc, features = nonconverged_genes$fibvsmcp[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
fibvsmcp_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

fibvsmcp_nonconverged_summary <- fibvsmcp_nonconverged_summary[, c(ncol(fibvsmcp_nonconverged_summary), 1:(ncol(fibvsmcp_nonconverged_summary)-1))]
colnames(fibvsmcp_nonconverged_summary) <- gsub("\\.", "", colnames(fibvsmcp_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(fibvsmcp_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/fibvsmcp_nonconverged_summary.rds')


fibvsmcp_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(fibvsmcp_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in FIB, VSMC/P cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".jpeg")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/fibvsmcp_nonconverged_expression_plot.jpeg") 
```
