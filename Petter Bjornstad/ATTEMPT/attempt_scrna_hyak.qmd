---
title: "ATTEMPT scRNA analysis on Hyak (mixed model)"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, message = F, warning=F}
#| include: false
library(future)
library(future.apply)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(arsenal)
library(Biobase)
library(msigdbr)
library(kableExtra)
# library(knitr)
library(REDCapR)
# library(data.table)
library(emmeans)
library(NMF)
library(pheatmap)
library(UpSetR)
library(enrichR)
library(WriteXLS)
library(SAVER)
library(readxl)
library(limma)
library(edgeR)
library(BiocGenerics)
library(GSEABase)
library(slingshot)
library(SingleCellExperiment)
library(MAST)
library(muscat)
library(scater)
library(Seurat)
library(jsonlite)
library(dplyr)
library(glmmTMB)
library(reshape2)
library(broom.mixed) 
library(foreach)
library(doParallel)
library(nebula)
library(Matrix)
library(scran)
library(DirichletReg)
library(BiocParallel)
# library(scDC)
library(DoubletFinder)
library(scCustomize)
library(msigdbr)
library(lme4)
library(lmerTest)
source("/mmfs1/gscratch/togo/yejichoi/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
```

```{r include = F}
reticulate::use_python("/mmfs1/gscratch/togo/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")
```

```{r echo = F, eval = F}
# read ATTEMPT Seurat file
temp_file <- tempfile(fileext = ".RDS")
s3$download_file("scrna", "Kidney transcriptomics/Single cell RNA seq/PB_attempt_harmony_rpca_RM_kpmpV1labelled_Sept2024.RDS", temp_file)
attempt_so_raw <- readRDS(temp_file)

# N of cells for Petter (B-cells and POD at baseline)
# attempt_so$celltype_pt <- ifelse(grepl("PT-", attempt_so$celltype),
#                                  "PT", as.character(attempt_so$celltype))
# attempt_so_pt <- subset(attempt_so, celltype_pt == "PT" & celltype != "PT_lowQuality")
# attempt_so_b_bl <- subset(attempt_so, celltype == "B" & Visit == "BL")
# attempt_so_pod_bl <- subset(attempt_so, celltype == "POD" & Visit == "BL")

# Identify mitochondrial genes
mito_genes <- grep("^MT-", rownames(attempt_so_raw), value = TRUE)

# Calculate the percentage of mitochondrial transcripts per cell
attempt_so_raw[["percent.mt"]] <- PercentageFeatureSet(attempt_so_raw, pattern = "^MT-")
hist(attempt_so_raw$percent.mt)
# FeaturePlot(attempt_so_raw, reduction = "umap.harmony", features = "percent.mt", cols = c("lightgray", "blue"), raster = F)
# DimPlot(attempt_so_raw, reduction = "umap.harmony", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
# DimPlot(attempt_so_raw, reduction = "umap.harmony", group.by = "celltype", raster = F, alpha = 0.2, label = T)

# Identify ribosomal genes
ribo_genes <- c(
  "RPL22", "RPL11", "RPS8", "RPL5", "RPS27", "RPS7", "RPS27A", "RPL31", "RPL37A", "RPL32", "RPL15", "RPL14", "RPL29",
  "RPL24", "RPL22L1", "RPL35A", "RPL9", "RPL34", "RPS3A", "RPL37", "RPS23", "RPS14", "RPS18", "RPS10", "RPL10A", 
  "RPS20", "RPL7", "RPL30", "RPL8", "RPS6", "RPL35", "RPL12", "RPL7A", "RPS24", "RPLP2", "RPL27A", "RPS13", "RPS3",
  "RPS25", "RPS26", "RPL41", "RPL6", "RPLP0", "RPL21", "RPS29", "RPL4", "RPLP1", "RPS17", "RPS2", "RPS15A", "RPL13",
  "RPL26", "RPL23A", "RPL23", "RPL19", "RPL27", "RPL38", "RPL17", "RPS15", "RPL36", "RPS28", "RPL18A", "RPS16", 
  "RPS19", "RPL18", "RPL13A", "RPS11", "RPS9", "RPL28", "RPS5", "RPS21", "RPL3", "RPS4X", "RPL36A", "RPL39", 
  "RPL10", "RPS4Y1"
) # grep("^RPL|^RPS", rownames(attempt_so_raw), value = TRUE) captures some none ribosomal genes
attempt_so_raw[["percent.ribo"]] <- PercentageFeatureSet(attempt_so_raw, features = ribo_genes)
hist(attempt_so_raw$percent.ribo)

# attempt_so_raw <- subset(attempt_so_raw, subset = percent.mt < 50) # keep as 50%, it's how it's done with KPMP
FeaturePlot(attempt_so_raw, reduction = "umap.harmony", features = "percent.mt", cols = c("lightgray", "blue"), raster = F)
DimPlot(attempt_so_raw, reduction = "umap.harmony", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
DimPlot(attempt_so_raw, reduction = "umap.harmony", group.by = "celltype", raster = F, alpha = 0.2, label = T)

attempt_so_raw <- subset(attempt_so_raw, features = setdiff(rownames(attempt_so_raw), mito_genes)) # remove MT- genes
attempt_so_raw <- subset(attempt_so_raw, features = setdiff(rownames(attempt_so_raw), ribo_genes)) # remove ribosomal genes

expr_matrix <- as.matrix(GetAssayData(attempt_so_raw, layer = "data"))
# Calculate the proportion of cells expressing each gene
num_cells_per_gene <- rowSums(expr_matrix > 0)  # Count nonzero cells per gene
total_cells <- ncol(expr_matrix)  # Total number of cells
gene_proportion <- num_cells_per_gene / total_cells  # Fraction of cells expressing each gene
length(gene_proportion) # 30625
# Keep genes expressed in at least 5% of cells
genes_to_keep <- names(gene_proportion[gene_proportion  >= 0.05])
length(genes_to_keep) # 8672 ( ~ 28.3% remaining)

remove(expr_matrix)
# attempt_so_raw <- subset(attempt_so_raw, features = genes_to_keep)

# renormalize after filtering
attempt_so_raw <- NormalizeData(attempt_so_raw)

# # # calculate cell library size for offset in NEBULA
# counts_layer <- round(GetAssayData(attempt_so_raw, layer = "counts"))
# library_size <- Matrix::colSums(counts_layer)
# attempt_so_raw$library_size <- library_size
# View(attempt_so_raw@meta.data)
# 
# # TMM offset
# dge <- DGEList(counts = counts_layer)
# dge <- calcNormFactors(dge, method = "TMM")
# tmm_offset <- (dge$samples$lib.size) * (dge$samples$norm.factors)
# attempt_so_raw$tmm_offset <- tmm_offset
# 
# # Pooled offset
# bp <- MulticoreParam(workers = 63)
# sce <- SingleCellExperiment(assays = list(counts = counts_layer))
# # sce <- computeSumFactors(sce)
# sce <- computeSumFactors(sce, BPPARAM = bp)
# # # View size factors
# sizeFactors(sce)
# # Calculate offset â†’ (size factors)
# pooled_offset <- (sizeFactors(sce))
# attempt_so_raw$pooled_offset <- pooled_offset

## want to double check expression of some metallothionines because logFC for them in dapa is near 0
# FindMarkers(subset(attempt_so_raw, grepl("PT-", attempt_so_raw$celltype) & treatment == "Placebo"), features = c("MT1X", "MT2A", "MT1M", "MT1H"), group.by = "visit", 
#             min.pct = 0, logfc.threshold = 0,
#             ident.1 = "POST")
# 
# FindMarkers(subset(attempt_so_raw, grepl("PT-", attempt_so_raw$celltype) & treatment == "Dapagliflozin 5mg"), features = c("MT1X", "MT2A", "MT1M", "MT1H"), group.by = "visit", 
#             min.pct = 0, logfc.threshold = 0,
#             ident.1 = "POST")

# check for expression of TRHDE-AS1 (in immune), FGF14 (in immune), and PSAT1 (in fib/vsmc/p)
FeaturePlot(attempt_so_raw, features = c("TRHDE-AS1", "FGF14", "PSAT1"), raster = F)
DimPlot(attempt_so_raw, group.by = "celltype", raster = F, alpha = 0.2, label = T)

```

```{r echo = F, eval = F}
# read ATTEMPT clinical data file
temp_file <- tempfile(fileext = ".RDS")
s3$download_file("harmonized.dataset", "attempt_clinical_data.RDS", temp_file)
dat <- readRDS(temp_file)

attempt_so_meta <- attempt_so_raw@meta.data %>%
  mutate(subject_id = Subject.ID,
         visit = case_when(Visit == "BL" ~ "PRE", 
                           Visit == "4M" ~ "POST"))
attempt_so_meta <- left_join(attempt_so_meta, dat, by = c("subject_id", "visit"))
rownames(attempt_so_meta) <- attempt_so_meta$barcode
attempt_so_raw <- AddMetaData(attempt_so_raw, attempt_so_meta)
options(future.globals.maxSize = 3000 * 1024^3)

View(subset(attempt_so_meta, select = c(subject_id, visit, treatment, Cryostor_ID)) %>%
       distinct(Cryostor_ID, .keep_all = T))
```


```{r echo = F, eval = T}
# Read in clean seurat object saved from attempt_CROC_analysis.qmd
temp_file <- tempfile(fileext = ".rds")
s3$download_file("attempt", 'cleaned_data/attempt_clean_so.rds', temp_file)
attempt_so <- readRDS(temp_file)

attempt_so$KPMP_celltype_general <- case_when(
  attempt_so$KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT") ~ "PT",
  attempt_so$KPMP_celltype %in% c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL") ~ "TAL",
  attempt_so$KPMP_celltype %in% c("CCD-PC", "CNT-PC", "dCCD-PC", "M-PC", "tPC-IC") ~ "PC",
  attempt_so$KPMP_celltype %in% c("IC-A", "IC-B", "aIC") ~ "IC",
  attempt_so$KPMP_celltype %in% c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC") ~ "EC",
  attempt_so$KPMP_celltype %in% c("MAC", "MON", "cDC", "pDC") ~ "Immune (M)",
  attempt_so$KPMP_celltype %in% c("CD4+ T", "CD8+ T", "B", "NK") ~ "Immune (L)",
  attempt_so$KPMP_celltype %in% c("VSMC/P", "FIB") ~ "VSMC/P, FIB",
  attempt_so$KPMP_celltype %in% c("POD") ~ "POD",
  TRUE ~ "Other"
)
```

```{r}
# module scores
# msigdb Hallmark
library(msigdbr)
library(Seurat)
library(dplyr)

# Get HALLMARK gene sets
msigdb_hallmark <- msigdbr(species = "Homo sapiens", category = "H")

# Define significant pathways per cell type based on your GSEA results (p < 0.05)
celltype_pathways <- list(
  # Endothelial Cells (EC)
  ec_immune = c(
    "HALLMARK_COMPLEMENT",
    "HALLMARK_INTERFERON_ALPHA_RESPONSE", 
    "HALLMARK_INTERFERON_GAMMA_RESPONSE"
  ),
  ec_metabolism = c(
    "HALLMARK_ADIPOGENESIS",
    "HALLMARK_BILE_ACID_METABOLISM",
    "HALLMARK_FATTY_ACID_METABOLISM",
    "HALLMARK_GLYCOLYSIS",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  ),
  
  # Intercalated Cells (IC)
  ic_immune = c(
    "HALLMARK_INTERFERON_ALPHA_RESPONSE",
    "HALLMARK_TNFA_SIGNALING_VIA_NFKB"
  ),
  ic_metabolism = c(
    "HALLMARK_ADIPOGENESIS",
    "HALLMARK_FATTY_ACID_METABOLISM",
    "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  ),
  
  # Immune Cells
  immune_immune = c(
    "HALLMARK_INTERFERON_ALPHA_RESPONSE",
    "HALLMARK_INTERFERON_GAMMA_RESPONSE"
  ),
  immune_metabolism = c(
    "HALLMARK_ADIPOGENESIS",
    "HALLMARK_CHOLESTEROL_HOMEOSTASIS",
    "HALLMARK_FATTY_ACID_METABOLISM",
    "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  ),
  
  # Immune Lymphoid Cells
  immune_lymphoid_metabolism = c(
    "HALLMARK_HEME_METABOLISM"
  ),
  
  # Immune Myeloid Cells
  immune_myeloid_immune = c(
    "HALLMARK_INTERFERON_ALPHA_RESPONSE",
    "HALLMARK_INTERFERON_GAMMA_RESPONSE"
  ),
  immune_myeloid_metabolism = c(
    "HALLMARK_BILE_ACID_METABOLISM",
    "HALLMARK_FATTY_ACID_METABOLISM",
    "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  ),
  
  # Principal Cells (PC)
  pc_immune = c(
    "HALLMARK_INTERFERON_ALPHA_RESPONSE",
    "HALLMARK_INTERFERON_GAMMA_RESPONSE",
    "HALLMARK_TNFA_SIGNALING_VIA_NFKB"
  ),
  pc_metabolism = c(
    "HALLMARK_ADIPOGENESIS",
    "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  ),
  
  # Podocytes (POD)
  pod_immune = c(
    "HALLMARK_INFLAMMATORY_RESPONSE",
    "HALLMARK_INTERFERON_ALPHA_RESPONSE"
  ),
  
  # Proximal Tubule (PT)
  pt_immune = c(
    "HALLMARK_INFLAMMATORY_RESPONSE",
    "HALLMARK_TNFA_SIGNALING_VIA_NFKB"
  ),
  pt_metabolism = c(
    "HALLMARK_BILE_ACID_METABOLISM",
    "HALLMARK_FATTY_ACID_METABOLISM",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  ),
  
  # Thick Ascending Limb (TAL)
  tal_immune = c(
    "HALLMARK_INFLAMMATORY_RESPONSE",
    "HALLMARK_INTERFERON_ALPHA_RESPONSE",
    "HALLMARK_TNFA_SIGNALING_VIA_NFKB"
  ),
  tal_metabolism = c(
    "HALLMARK_FATTY_ACID_METABOLISM",
    "HALLMARK_OXIDATIVE_PHOSPHORYLATION",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  ),
  
  # VSMC/Pericytes/Fibroblasts
  vsmc_p_fib_immune = c(
    "HALLMARK_COMPLEMENT",
    "HALLMARK_INFLAMMATORY_RESPONSE"
  ),
  vsmc_p_fib_metabolism = c(
    "HALLMARK_CHOLESTEROL_HOMEOSTASIS",
    "HALLMARK_FATTY_ACID_METABOLISM",
    "HALLMARK_XENOBIOTIC_METABOLISM"
  )
)

# Function to get genes for pathway sets
get_pathway_genes <- function(pathway_list, msigdb_data) {
  # Get all genes for the pathways in the list
  genes <- msigdb_data %>%
    filter(gs_name %in% pathway_list) %>%
    pull(gene_symbol) %>%
    unique()
  return(genes)
}

# Create gene sets for each cell type and pathway category
kidney_celltype_gene_sets <- lapply(celltype_pathways, function(pathway_list) {
  get_pathway_genes(pathway_list, msigdb_hallmark)
})

# Remove any empty gene sets
kidney_celltype_gene_sets <- kidney_celltype_gene_sets[sapply(kidney_celltype_gene_sets, length) > 0]

# Add module scores to Seurat object
# Note: AddModuleScore will append numbers to the names, which we'll fix later
attempt_so <- AddModuleScore(
  attempt_so, 
  features = kidney_celltype_gene_sets, 
  name = names(kidney_celltype_gene_sets)
)

# Fix the column names to remove the appended numbers
md_names <- colnames(attempt_so@meta.data)

# Build pattern to match the module score names
gene_set_names <- names(kidney_celltype_gene_sets)
pattern <- paste0("^(", paste(gene_set_names, collapse="|"), ")_?\\d+$")

# Apply renaming to remove the numbers
colnames(attempt_so@meta.data) <- ifelse(
  grepl(pattern, md_names),
  sub(pattern, "\\1", md_names),
  md_names
)

# Print summary of what was added
cat("Added module scores for:\n")
cat("Cell-type specific pathways:\n")
for (name in names(kidney_celltype_gene_sets)) {
  cat(sprintf("  %s: %d genes\n", name, length(kidney_celltype_gene_sets[[name]])))
}

# Show the new metadata columns
new_cols <- grep("^(ec_|ic_|immune_|pc_|pod_|pt_|tal_|vsmc_p_fib_)", 
                 colnames(attempt_so@meta.data), value = TRUE)
cat(sprintf("\nNew metadata columns (%d total):\n", length(new_cols)))
cat(paste(new_cols, collapse = ", "))
```
```{r echo = F}
unique_celltypes <- unique(attempt_so@meta.data$KPMP_celltype_general)
celltype_mapping <- c(
  "PT" = "pt",
  "TAL" = "tal", 
  "PC" = "pc",
  "IC" = "ic",
  "POD" = "pod",
  "EC" = "ec",
  "Immune" = "immune",
  "Immune (L)" = "immune_lymphoid",
  "Immune (M)" = "immune_myeloid", 
  "VSMC/P, FIB" = "vsmc_p_fib"
)

# Function to create dynamic scores
create_dynamic_scores <- function(seurat_obj, celltype_col = "KPMP_celltype_general", 
                                 celltype_mapping, score_type = "immune") {
  
  # Initialize score vector
  dynamic_scores <- rep(NA, ncol(seurat_obj))
  
  # Get cell types for each cell
  cell_types <- seurat_obj@meta.data[[celltype_col]]
  
  # For each cell, get the appropriate score
  for (i in seq_along(cell_types)) {
    cell_type <- cell_types[i]
    
    # Skip if cell type is NA
    if (is.na(cell_type)) {
      next
    }
    
    # Get the prefix for this cell type
    if (cell_type %in% names(celltype_mapping)) {
      prefix <- celltype_mapping[cell_type]
      score_col <- paste0(prefix, "_", score_type)
      
      # Check if this score column exists
      if (score_col %in% colnames(seurat_obj@meta.data)) {
        dynamic_scores[i] <- seurat_obj@meta.data[i, score_col]
      } else {
        # If specific score doesn't exist, try combined score as fallback
        combined_col <- paste0(prefix, "_combined")
        if (combined_col %in% colnames(seurat_obj@meta.data) && score_type %in% c("immune", "metabolism")) {
          dynamic_scores[i] <- seurat_obj@meta.data[i, combined_col]
        }
      }
    }
  }
  
  return(dynamic_scores)
}

# Create immune and metabolism scores
attempt_so@meta.data$immune_score <- create_dynamic_scores(
  attempt_so, 
  celltype_mapping = celltype_mapping, 
  score_type = "immune"
)

attempt_so@meta.data$metabolism_score <- create_dynamic_scores(
  attempt_so, 
  celltype_mapping = celltype_mapping, 
  score_type = "metabolism"
)

```

```{r echo = F}
attempt_so_meta <- attempt_so@meta.data

immune_fit <- lmer(immune_score ~ treatment*visit*KPMP_celltype_general + (1|subject_id), data = attempt_so_meta)
immune_emm <- emmeans(immune_fit, ~treatment*visit | KPMP_celltype_general)
immune_contrasts <- contrast(immune_emm, interaction = "trt.vs.ctrl", by = "KPMP_celltype_general")
immune_contrasts_df <- tidy(immune_contrasts) %>%
  filter(KPMP_celltype_general != "Other") %>%
  mutate(
    CI_low = estimate - 1.96*std.error,
    CI_high = estimate + 1.96*std.error)
immune_contrasts_df <- immune_contrasts_df %>% 
  mutate(KPMP_celltype_general = factor(KPMP_celltype_general, levels = rev(immune_contrasts_df$KPMP_celltype_general[order(immune_contrasts_df$estimate)])),
         sig = case_when(p.value < 0.05 & estimate > 0 ~ "+", 
                         p.value < 0.05 & estimate < 0 ~ "-", 
                         T ~ "NS")) 

metabolic_fit <- lmer(metabolism_score ~ treatment*visit*KPMP_celltype_general + (1|subject_id), data = attempt_so_meta)
metabolic_emm <- emmeans(metabolic_fit, ~treatment*visit | KPMP_celltype_general)
metabolic_contrasts <- contrast(metabolic_emm, interaction = "trt.vs.ctrl", by = "KPMP_celltype_general")
metabolic_contrasts_df <- tidy(metabolic_contrasts) %>%
  filter(KPMP_celltype_general != "Other") %>%
  mutate(
    CI_low = estimate - 1.96*std.error,
    CI_high = estimate + 1.96*std.error)
metabolic_contrasts_df <- metabolic_contrasts_df %>% 
  mutate(KPMP_celltype_general = factor(KPMP_celltype_general, levels = rev(metabolic_contrasts_df$KPMP_celltype_general[order(metabolic_contrasts_df$estimate)])),
    sig = case_when(p.value < 0.05 & estimate > 0 ~ "+", 
                    p.value < 0.05 & estimate < 0 ~ "-", 
                    T ~ "NS")) 
```


```{r}
immune_contrasts_df %>%
  ggplot(aes(x = estimate, y = KPMP_celltype_general, color = sig)) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "#adb5bd") +
  geom_point(size = 3, shape = ifelse(immune_contrasts_df$sig != "NS", 15, 0)) +
  geom_errorbarh(aes(xmin = CI_low, xmax = CI_high), height = 0, size = 0.5) +
  scale_color_manual(values = c("+" = "#ee7674",
                                "-" = "#89c2d9",
                                "NS" = "#adb5bd")) +
  theme_minimal(base_size = 14) +
  theme(panel.background = element_blank(),
        panel.grid.major.y =  element_blank(),
        panel.grid.minor.x = element_line(linewidth = 0.2, color = "#e9ecef"),
        panel.grid.major.x = element_line(linewidth = 0.2, color = "#e9ecef"),
        legend.position = "none") +
  labs(x = "DiD (immune score)", y = NULL)

metabolic_contrasts_df %>%
  ggplot(aes(x = estimate, y = KPMP_celltype_general, color = sig)) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "#adb5bd") +
  geom_point(size = 3, shape = ifelse(metabolic_contrasts_df$sig != "NS", 15, 0)) +
  geom_errorbarh(aes(xmin = CI_low, xmax = CI_high), height = 0, size = 0.5) +
  scale_color_manual(values = c("+" = "#ee7674",
                                "-" = "#89c2d9",
                                "NS" = "#adb5bd")) +
  theme_minimal(base_size = 14) +
  theme(panel.background = element_blank(),
        panel.grid.major.y =  element_blank(),
        panel.grid.minor.x = element_line(linewidth = 0.2, color = "#e9ecef"),
        panel.grid.major.x = element_line(linewidth = 0.2, color = "#e9ecef"),
        legend.position = "none") +
  labs(x = "DiD (Metabolic score)", y = NULL)
```

```{r echo = F}
# remove cells with ambient RNA (indicated with high expression of PT biomarkers)
pt_markers <- c("MIOX", "GLYAT", "ALDOB", "GATM", "FABP1", "HPD", "GPX3")
other_markers <- c("MIOX", "GLYAT", "ALDOB", "GATM", "FABP1", "HPD", "GPX3")
# FeaturePlot(subset(attempt_so, celltype %in% c("IC-A", "IC-B")), features = pt_markers)
# FeaturePlot(subset(attempt_so, celltype %in% c("TAL-1", "TAL-2", "TAL-3")), features = pt_markers)

attempt_so <- AddModuleScore(attempt_so, features = list(pt_markers), name = "ambient_score")
Idents(attempt_so) <- attempt_so$celltype
VlnPlot(attempt_so, features = "ambient_score1", pt.size = 0.1, raster = F, alpha = 0.3)

attempt_so <- subset(attempt_so, subset = (ambient_score1 < 0.25 & 
                                                       celltype %nin% c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5")) 
                               | celltype %in% c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))

VlnPlot(attempt_so, features = "ambient_score1", pt.size = 0.1, raster = F, alpha = 0.3)
FeaturePlot(attempt_so, features = pt_markers)

```


```{r echo = F, eval = F}
# Doublet detection (for QC, post Michigan meeting in June '25)
# need to do this in each subject, not on integrated samples, but doublets are not a big issue if we're eliminating cells with ambient rna
# After running standard Seurat workflow (e.g., PCA)
attempt_so$SampleID <- paste0(attempt_so$subject_id, "_", attempt_so$visit)
samp_split <- SplitObject(attempt_so, split.by = "SampleID") 

# Get Doublet/Singlet IDs by DoubletFinder()
samp_split <- lapply(samp_split, run_doubletfinder_custom, multiplet_rate= 0.075) # get singlet/doublet assigned to each of the cell IDs (each element of the list is a different sample)

sglt_dblt_metadata <- data.frame(bind_rows(samp_split)) # merge to a single dataframe
rownames(sglt_dblt_metadata) <- sglt_dblt_metadata$row_names # assign cell IDs to row names to ensure match
sglt_dblt_metadata$row_names <- NULL
head(sglt_dblt_metadata)
attempt_so <- AddMetaData(attempt_so, sglt_dblt_metadata, col.name = 'doublet_finder')

# Check how doublets singlets differ in QC measures per sample.
VlnPlot(attempt_so, group.by = 'SampleID', split.by = "doublet_finder",
        features = c("nFeature_RNA", "nCount_RNA", "percent_mt", "percent_ribo", "percent_hb"), 
        ncol = 3, pt.size = 0) + theme(legend.position = 'right')

doublets_summary <- attempt_so@meta.data %>% 
  group_by(SampleID, doublet_finder) %>% 
  summarise(total_count = n(),.groups = 'drop') %>% as.data.frame() %>% ungroup() %>%
  group_by(SampleID) %>%
  mutate(countT = sum(total_count)) %>%
  group_by(doublet_finder, .add = TRUE) %>%
  mutate(percent = paste0(round(100 * total_count/countT, 2),'%')) %>%
  dplyr::select(-countT)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(doublets_summary, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'cleaned_data/attempt_doublets_summary.rds')

attempt_so <- subset(attempt_so, doublet_finder == 'Singlet') # 208817 -> 196354 (retaining 94%)


temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(attempt_so, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'cleaned_data/attempt_clean_so.rds')
```


```{r echo = F, eval = T}
# Read in clean seurat object saved from attempt_CROC_analysis.qmd
temp_file <- tempfile(fileext = ".rds")
s3$download_file("attempt", 'cleaned_data/attempt_clean_so.rds', temp_file)
attempt_so <- readRDS(temp_file)
```

# All cell types

```{r echo = F}
attempt_so$visit <- factor(attempt_so$visit, levels = c("PRE", "POST"))
attempt_so$treatment <- factor(attempt_so$treatment, levels = c("Placebo", "Dapagliflozin"),
                                  labels = c("Placebo", "Dapagliflozin"))
```

```{r echo = F}
DimPlot(attempt_so, reduction = "umap.harmony", group.by = "visit", raster = F, alpha = 0.2)
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_umap_visit.png") 

DimPlot(attempt_so, reduction = "umap.harmony", group.by = "treatment", raster = F, alpha = 0.2)
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_umap_treat.png") 

DimPlot(attempt_so, reduction = "umap.harmony", group.by = "celltype", raster = F, alpha = 0.2, label = T)
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_umap_celltype.png") 

DimPlot(attempt_so, reduction = "umap.harmony", group.by = "KPMP_celltype", raster = F, alpha = 0.2, label = T)
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_umap_kpmpcelltype.png") 

# custom UMAP
library(ggrepel)
library(RColorBrewer)
library(ggtrace)
my_colors <- colorRampPalette(brewer.pal(12, "Set3"))(43)
umap_df <- as.data.frame(attempt_so@reductions$umap.harmony@cell.embeddings)
umap_df$KPMP_celltype <- attempt_so@meta.data$KPMP_celltype

centers <- umap_df %>%
  group_by(KPMP_celltype) %>%
  summarise(x = median(umapharmony_1),
            y = median(umapharmony_2), .groups = "drop")

ggplot(umap_df,
       aes(x = umapharmony_1, y = umapharmony_2, color = KPMP_celltype)) +
  geom_point(alpha = 0.2) +
  geom_text_repel(data = centers,
                  aes(x = x, y = y, label = KPMP_celltype),
                  inherit.aes = FALSE,
                  size = 4, fontface = "bold", color = "black",
                  family = "arial") +
  scale_color_manual(values = my_colors) +
  theme_minimal() + 
  theme(panel.grid = element_blank(),
        legend.position = "none",
        axis.title.x = element_text(hjust = 0),   # move x label to left
        axis.title.y = element_text(hjust = 0))  + # push y label down to bottom) 
  labs(x = "UMAP1", y = "UMAP2")
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 7, height = 7, dpi = 300)
s3$upload_file(temp_file, "attempt", "Figures/attempt_umap_kpmpcelltype.png") 

```

# Cell type annotations using KPMP Atlas 2

```{r echo = F}
# read in markers
temp_file <- tempfile(fileext = ".csv")
s3$download_file("attempt", "cleaned_data/atlas_v2_markers.csv", temp_file)
atlas2 <- read.csv(temp_file)

markers_df <- atlas2 %>%
  mutate(marker_list = strsplit(Distinct.markers, "[,\\s]+"))

# For each cell type, create a module score
for(i in 1:nrow(markers_df)) {
  cell_type <- markers_df$v2.subclass.l2[i]
  markers <- unlist(markers_df$marker_list[i])
  markers <- markers[markers != ""]  # Remove empty strings
  
  message(paste("Processing", cell_type, "with", length(markers), "markers..."))
  
  tryCatch({
    attempt_so <- AddModuleScore(
      attempt_so,
      features = list(markers),
      name = paste0(cell_type, "_score"),
      search = TRUE
    )
    message(paste("Successfully added score for", cell_type))
  }, error = function(e) {
    message(paste("Skipping", cell_type, "- not enough features present"))
  })
}

# Get all the module score column names
score_cols <- grep("_score1", colnames(attempt_so@meta.data), value = TRUE)

# For each cell, find which score is highest
attempt_so$predicted_celltype <- apply(attempt_so@meta.data[, score_cols], 1, function(x) {
  max_score_idx <- which.max(x)
  # Extract cell type name from column name (remove "_score1" suffix)
  cell_type <- gsub("_score\\d+$", "", score_cols[max_score_idx])
  return(cell_type)
})

# Save the max score as confidence
attempt_so$prediction_confidence <- apply(attempt_so@meta.data[, score_cols], 1, max)

# Also save the margin (difference between top and second-best score)
attempt_so$prediction_margin <- apply(attempt_so@meta.data[, score_cols], 1, function(x) {
  sorted <- sort(x, decreasing = TRUE)
  return(sorted[1] - sorted[2])
})

# Visualize confidence distribution
library(ggplot2)

ggplot(attempt_so@meta.data, aes(x = prediction_confidence)) +
  geom_histogram(bins = 50) +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
  theme_classic() +
  labs(title = "Distribution of prediction confidence scores")

# Look at margin between top and second-best
ggplot(attempt_so@meta.data, aes(x = prediction_margin)) +
  geom_histogram(bins = 50) +
  theme_classic() +
  labs(title = "Margin between 1st and 2nd best cell type")

# Cells with low confidence or low margin might be ambiguous
summary(attempt_so$prediction_confidence)
summary(attempt_so$prediction_margin)

# Define thresholds based on your distributions
confidence_threshold <- 0.05  # Adjust based on your data
margin_threshold <- 0.02      # Adjust based on your data

attempt_so$prediction_quality <- ifelse(
  attempt_so$prediction_confidence > confidence_threshold & 
  attempt_so$prediction_margin > margin_threshold,
  "High_confidence",
  "Low_confidence"
)

# Check how many cells fall into each category
table(attempt_so$prediction_quality)

# You might want to mark very low confidence as "Unassigned"
attempt_so$predicted_celltype_filtered <- ifelse(
  attempt_so$prediction_quality == "Low_confidence",
  "Unassigned",
  attempt_so$predicted_celltype
)

# UMAP with predicted cell types
DimPlot(attempt_so, group.by = "predicted_celltype", label = TRUE, repel = TRUE, 
        reduction = "umap.harmony", raster = F) +
  ggtitle("Predicted Cell Types") + 
  theme(legend.position = "none")

# UMAP colored by confidence
FeaturePlot(attempt_so, features = "prediction_confidence", 
            reduction = "umap.harmony", raster = F) +
  scale_color_viridis_c() +
  ggtitle("Prediction Confidence")

# UMAP colored by margin
FeaturePlot(attempt_so, features = "prediction_margin", 
            reduction = "umap.harmony", raster = F) +
  scale_color_viridis_c() +
  ggtitle("Prediction Margin")

# See distribution of cell types
table(attempt_so$predicted_celltype) %>% sort(decreasing = TRUE)

predicted_pt <- atlas2[atlas2$v2.subclass.l1 == "PT",]$v2.subclass.l2
predicted_tal <- atlas2[atlas2$v2.subclass.l1 == "TAL",]$v2.subclass.l2
predicted_pod <- atlas2[atlas2$v2.subclass.l1 == "POD",]$v2.subclass.l2
attempt_so_meta <- attempt_so@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))

attempt_so_meta$visit_treatment <- factor(attempt_so_meta$visit_treatment,
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))

attempt_so_meta %>%
  filter(predicted_celltype %in% predicted_pt) %>%
  ggplot(aes(visit_treatment, fill = predicted_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("frPT" = "#ef767a")) +
  theme_transparent


attempt_so_meta %>%
  filter(predicted_celltype %in% predicted_tal) %>%
  ggplot(aes(visit_treatment, fill = predicted_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("frTAL" = "#ef767a")) +
  theme_transparent

attempt_so_meta %>%
  filter(predicted_celltype %in% predicted_pod) %>%
  ggplot(aes(visit_treatment, fill = predicted_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  # scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51")) +
  theme_transparent

attempt_so_meta %>%
  filter(predicted_celltype %in% "frTAL") %>%
  ggplot(aes(x = visit_treatment, y = predicted_celltype)) +
  geom_point()

```

```{r}
attempt_so$visit_treatment <- paste0(attempt_so$visit, " ", attempt_so$treatment)
attempt_so$visit_treatment <- factor(attempt_so$visit_treatment, 
                                     levels = c("PRE Placebo", "POST Placebo",
                                                "PRE Dapagliflozin", "POST Dapagliflozin"))
# frPT and frPOD genes only
frPT_n <- rownames(markers_df[markers_df$v2.subclass.l2=="frPT",])
frPT_markers <- unlist(markers_df$marker_list[as.numeric(frPT_n)])
frPT_markers <- frPT_markers[frPT_markers != ""]

# PT subset
attempt_so$kpmp_celltype_pt <- ifelse(attempt_so$KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT"),
                                 "PT", as.character(attempt_so$KPMP_celltype))
attempt_so_pt_kpmp <- subset(attempt_so, kpmp_celltype_pt == "PT" & KPMP_celltype != "PT_lowQuality")
attempt_so_pt_kpmp_frpt <- subset(attempt_so, features = frPT_markers)

Seurat::DotPlot(attempt_so_pt_kpmp, features = frPT_markers, 
                group.by = "visit_treatment", scale = F)

# nebula_frPT <- run_nebula_parallel(
#   seurat_obj = attempt_so_pt_kpmp_frpt,
#   n_cores = 10,
#   s3_bucket = "attempt",
#   s3_key = "frPT/nebula/frpt_attempt_nebula.rds"
# )

FindMarkers(attempt_so_pt_kpmp_frpt, ident.1 = "POST Placebo", ident.2 = "PRE Placebo",
            group.by = "visit_treatment", min.pct = 0, logfc.threshold = 0)

FindMarkers(attempt_so_pt_kpmp_frpt, ident.1 = "POST Dapagliflozin", ident.2 = "PRE Dapagliflozin",
            group.by = "visit_treatment", min.pct = 0, logfc.threshold = 0)
```

```{r}
dPOD_n <- rownames(markers_df[markers_df$v2.subclass.l2=="dPOD",])
dPOD_markers <- unlist(markers_df$marker_list[as.numeric(dPOD_n)])
dPOD_markers <- dPOD_markers[dPOD_markers != ""]

# POD subset
attempt_so$kpmp_celltype_pod <- ifelse(attempt_so$KPMP_celltype %in% c("POD"),
                                 "POD", as.character(attempt_so$KPMP_celltype))
attempt_so_pod_kpmp <- subset(attempt_so, kpmp_celltype_pod == "POD")
attempt_so_pod_kpmp_dpod <- subset(attempt_so, features = dPOD_markers)

Seurat::DotPlot(attempt_so_pod_kpmp, features = dPOD_markers,
                group.by = "visit_treatment", scale = F)

# nebula_dPOD <- run_nebula_parallel(
#   seurat_obj = attempt_so_pod_kpmp_dpod,
#   n_cores = 10,
#   s3_bucket = "attempt",
#   s3_key = "dPOD/nebula/dpod_attempt_nebula.rds"
# )

FindMarkers(attempt_so_pod_kpmp_dpod, ident.1 = "POST Placebo", ident.2 = "PRE Placebo",
            group.by = "visit_treatment", min.pct = 0, logfc.threshold = 0)

FindMarkers(attempt_so_pod_kpmp_dpod, ident.1 = "POST Dapagliflozin", ident.2 = "PRE Dapagliflozin",
            group.by = "visit_treatment", min.pct = 0, logfc.threshold = 0)
```

#### Proportions (Non weighted)

```{r echo = F}
attempt_so$celltype_general <- case_when(
  grepl("PT-", attempt_so$celltype) ~ "PT",
  grepl("TAL-", attempt_so$celltype) ~ "TAL",
  attempt_so$celltype %in% c("MON", "MAC") ~ "Immune_Myeloid",
  attempt_so$celltype %in% c("T", "B", "NKT/NKC") ~ "Immune_Lymphoid",
  attempt_so$celltype %in% c("PC-1", "PC-2", "tPC-IC") ~ "PC",
  attempt_so$celltype %in% c("IC-A", "IC-B") ~ "IC",
  attempt_so$celltype %in% c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM") ~ "EC",
  attempt_so$celltype %in% c("FIB", "VSMC/P") ~ "FIB/VSMC/P",
  attempt_so$celltype %in% c("POD") ~ "POD",
  TRUE ~ "Other - ATL, CNT, DCT, DTL, MC, PEC, lowQ")



attempt_meta <- attempt_so@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_meta$visit_treatment <- factor(attempt_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_meta$celltype <- factor(attempt_meta$celltype,
                                level = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5", 
                                          "TAL-1", "TAL-2", "TAL-3", "TAL_highUMI", 
                                          "DTL-1", "DTL-2", 
                                          "CNT", "PC-1", "PC-2", 
                                          "tPC-IC", "IC-A", "IC-A_lowQuality", "IC-B", 
                                          "ATL", 
                                          "POD", "PEC", 
                                          "DCT",
                                          "MC", 
                                          "EC-PTC", "EC-GC", "EC-AEA", "EC-LYM", 
                                          "VSMC/P", "FIB", 
                                          "MAC", "MON", "NKT/NKC", "T", "B"))

attempt_meta$KPMP_celltype <- factor(attempt_meta$KPMP_celltype,
                                level = c("PT-S1/S2", "PT-S3", "aPT",
                                          "C-TAL-1", "C-TAL-2", "aTAL",
                                          "aDTL", "DTL",
                                          "CNT", "CNT-PC", "CCD-PC", "dCCD-PC", "M-PC",
                                          "tPC-IC", "IC-A", "IC-B",
                                          "ATL",
                                          "POD", "PEC",
                                          "DCT", "dDCT",
                                          "MC",
                                          "EC-PTC", "EC-GC", "EC-AEA", "EC-LYM", "EC-AVR", "EC/VSMC",
                                          "VSMC/P", "FIB",
                                          "MAC", "MON", "NK",
                                          "CD4+ T", "CD8+ T", "cycT",
                                          "B",
                                          "pDC", "cDC",
                                          "aIC", "SchwannCells", "non-specific"))


attempt_meta$KPMP_celltype_general <- factor(attempt_meta$KPMP_celltype_general,
                                levels = c("PT", 
                                           "TAL", 
                                           "EC",
                                           "IC",
                                           "POD",
                                           "PC",
                                           "VSMC/P, FIB", 
                                           "Immune (L)",
                                           "Immune (M)",
                                           "Other"))

# Check counts
table(attempt_so$celltype_general)
# Check counts
table(attempt_so$KPMP_celltype_general)
length(unique(attempt_so$KPMP_celltype))
# count the number of cells in the analyzed celltypes
focus_groups <- list(
  PT = c("PT-S1/S2", "PT-S3", "aPT"),
  TAL = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),
  EC = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC"),
  IC = c("IC-A", "IC-B", "aIC")
)

sum(attempt_so$KPMP_celltype %in% unlist(focus_groups)) / ncol(attempt_so)
```

```{r echo = F}
attempt_meta %>% 
  filter(!grepl("_", celltype)) %>%
  ggplot(aes(celltype, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  ggtitle("Cell type distribution") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_cellcounts_plot.png") 

attempt_meta %>%
  filter(!grepl("_", celltype)) %>%
  ggplot(aes(celltype, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 15)
s3$upload_file(temp_file, "attempt", "Figures/attempt_cellcounts_proportions_plot.png") 

attempt_meta %>% 
  filter(!grepl("_", KPMP_celltype)) %>%
  ggplot(aes(KPMP_celltype, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  ggtitle("Cell type distribution") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_kpmp_cellcounts_plot.png") 

attempt_meta %>%
  filter(!grepl("_", KPMP_celltype)) %>%
  ggplot(aes(KPMP_celltype, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 15)
s3$upload_file(temp_file, "attempt", "Figures/attempt_kpmp_cellcounts_proportions_plot.png") 

attempt_meta %>% 
  ggplot(aes(celltype_general, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  ggtitle("General cell type distribution") +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_plot.png") 

attempt_meta %>%
  ggplot(aes(celltype_general, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_proportions_plot.png") 

celltype_counts <- attempt_meta %>%
  filter(!grepl("Other", as.character(celltype_general))) %>%
  group_by(celltype_general) %>%
  summarise(n = n()) %>%
  ungroup()

kpmp_celltype_counts <- attempt_meta %>%
  filter(!grepl("Other", as.character(KPMP_celltype_general))) %>%
  group_by(KPMP_celltype_general) %>%
  summarise(n = n()) %>%
  ungroup()

attempt_meta %>% 
  filter(!grepl("Other", celltype_general)) %>%
  ggplot(aes(celltype_general, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  geom_text(data = celltype_counts, aes(x = celltype_general, y = n, label = n), 
            vjust = -0.5, size = 4, inherit.aes = FALSE) +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_plot_clean.png") 

attempt_meta %>%
  filter(!grepl("Other", celltype_general)) %>%
  ggplot(aes(celltype_general, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_cellcounts_proportions_plot_clean.png") 


attempt_meta %>% 
  filter(!grepl("Other", KPMP_celltype_general)) %>%
  ggplot(aes(KPMP_celltype_general, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  geom_text(data = kpmp_celltype_counts, aes(x = KPMP_celltype_general, y = n, label = n), 
            vjust = -0.5, size = 4, inherit.aes = FALSE) +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))+
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_kpmp_cellcounts_plot_clean.png") 

attempt_meta %>%
  filter(!grepl("Other", KPMP_celltype_general)) %>%
  ggplot(aes(KPMP_celltype_general, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_general_kpmp_cellcounts_proportions_plot_clean.png") 

attempt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  ggplot(aes(KPMP_celltype, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  scale_fill_manual(values = c("PRE Placebo" = "#fbc4ab", "POST Placebo" ="#f4978e",
                               "PRE Dapagliflozin"= "#aaae8e", "POST Dapagliflozin" ="#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_kpmp_pt_proportions_plot.png") 

attempt_meta$kpmp_tal <- case_when(grepl("TAL", attempt_so$KPMP_celltype) ~ attempt_so$KPMP_celltype)
attempt_meta$kpmp_tal <- factor(attempt_meta$kpmp_tal,
                                levels = c("aTAL", "dTAL", "C-TAL-1", "C-TAL-2"))
attempt_meta %>%
  filter(!is.na(attempt_meta$kpmp_tal)) %>%
  ggplot(aes(kpmp_tal, fill = visit_treatment)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20),
        legend.position = "bottom") +
  guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
  scale_fill_manual(values = c("PRE Placebo" = "#fbc4ab", "POST Placebo" ="#f4978e",
                               "PRE Dapagliflozin"= "#aaae8e", "POST Dapagliflozin" ="#828e82"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file)
s3$upload_file(temp_file, "attempt", "Figures/attempt_kpmp_tal_proportions_plot.png") 

temp_file <- tempfile(fileext = ".Rdata")
save(attempt_meta, file = temp_file)
s3$upload_file(temp_file, "attempt", "cleaned_data/attempt_meta_proportions.Rdata")
```



```{r echo = F}
attempt_so <- FindVariableFeatures(attempt_so, selection.method = "vst", nfeatures = 2000)
hvgs <- VariableFeatures(attempt_so)

#Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg <- subset(attempt_so, features = hvgs)
```

# Descriptive

```{r echo = F}
unique_attempt_meta <- attempt_meta %>%
  dplyr::select(Subject.ID, Visit, age, Sex, treatment_arm , visit_treatment, diabetes_duration) %>%
  dplyr::mutate(Subject.ID = as.character(Subject.ID, Visit)) %>%
  dplyr::summarise(across(where(negate(is.numeric)), ~ ifelse(all(is.na(.x)), NA_character_, last(na.omit(.x)))),
                   across(where(is.numeric), ~ ifelse(all(is.na(.x)), NA_real_, mean(.x, na.rm = TRUE))),
                   .by = c(Subject.ID, Visit))
summary(arsenal::tableby(visit_treatment ~ age + Sex + diabetes_duration + treatment_arm + Visit, data = unique_attempt_meta), test = F, digits = 1)
```


# PT
```{r echo = F}
attempt_so$celltype_pt <- ifelse(grepl("PT-", attempt_so$celltype),
                                 "PT", as.character(attempt_so$celltype))
attempt_so_pt <- subset(attempt_so, celltype_pt == "PT" & celltype != "PT_lowQuality")
```

```{r echo = F}
attempt_so_pt <- FindVariableFeatures(attempt_so_pt, selection.method = "vst", nfeatures = 2000)
hvgs_pt <- VariableFeatures(attempt_so_pt)

#Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_pt <- subset(attempt_so_pt, features = hvgs_pt)
```

#### Proportions
```{r echo = F, eval = F}
theme_transparent <- theme(
  plot.background   = element_rect(fill = "transparent", color = NA),
  panel.background  = element_rect(fill = "transparent", color = NA),
  legend.background = element_rect(fill = "transparent", color = NA)
)
attempt_pt_meta <- attempt_so_hvg_pt@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))

attempt_pt_meta$celltype <- factor(attempt_pt_meta$celltype, levels = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))
attempt_pt_meta$visit_treatment <- factor(attempt_pt_meta$visit_treatment,
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_pt_meta %>%
  filter(celltype != "PT_lowQuality") %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51")) +
  theme_transparent
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, bg = "transparent")
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_visit_proportions_plot.png")

attempt_pt_meta %>%
  filter(celltype != "PT_lowQuality") %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51")) +
  theme_transparent
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, bg = "transparent")
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_treatment_proportions_plot.png")


attempt_pt_meta %>%
  filter(celltype != "PT_lowQuality") %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51")) +
  theme_transparent
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8, bg = "transparent")
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_treatment_visit_proportions_plot.png")

attempt_pt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  ggplot(aes(visit, fill = KPMP_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a")) +
  theme_transparent
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, bg = "transparent")
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_visit_proportions_plot_kpmp.png")

attempt_pt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  ggplot(aes(visit_treatment, fill = KPMP_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a")) +
  theme_transparent
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, bg = "transparent")
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pt_visit_treatment_proportions_plot_kpmp.png")
```

```{r echo = F, eval = F}
# test on proportions using Dirichlet
pt_props <- attempt_meta %>%
  filter(celltype_general %in% c("PT")) %>%
  group_by(subject_id, treatment, visit, celltype) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(subject_id) %>%
  mutate(prop = n / sum(n)) %>%
  dplyr::select(subject_id, treatment, celltype, visit, prop) %>%
  pivot_wider(names_from = celltype, values_from = prop, values_fill = 0)

pt_props <- pt_props %>%
  mutate(prop_sum = rowSums(across(c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))))
# Placebo
pt_props_placebo <- pt_props[pt_props$treatment == "Placebo",]
pt_props_placebo$Y <- DR_data(pt_props_placebo[,4:8])
pt_props_placebo_drichlet <- DirichReg(Y ~ visit, data = pt_props_placebo)
pt_props_placebo_drichlet_summary <- summary(pt_props_placebo_drichlet)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(pt_props_placebo_drichlet_summary, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_dirichlet_placebo.rds')

# Dapa
pt_props_dapa <- pt_props[pt_props$treatment != "Placebo",]
pt_props_dapa$Y <- DR_data(pt_props_dapa[,4:8])
pt_props_dapa_drichlet <- DirichReg(Y ~ visit, data = pt_props_dapa)
pt_props_dapa_drichlet_summary <- summary(pt_props_dapa_drichlet)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(pt_props_dapa_drichlet_summary, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_dirichlet_dapa.rds')

# POST (placebo vs. dapa)
pt_props_post <- pt_props[pt_props$visit == "POST",]
pt_props_post$Y <- DR_data(pt_props_post[,4:8])
pt_props_post_drichlet <- DirichReg(Y ~ treatment, data = pt_props_post)
pt_props_post_drichlet_summary <- summary(pt_props_post_drichlet)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(pt_props_post_drichlet_summary, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_dirichlet_post.rds')

```

```{r echo = F, eval = F}
# test on proportions using Dirichlet (KPMP celltypes)
pt_props <- attempt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  group_by(subject_id, treatment, visit, KPMP_celltype) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(subject_id) %>%
  mutate(prop = n / sum(n)) %>%
  dplyr::select(subject_id, treatment, KPMP_celltype, visit, prop) %>%
  pivot_wider(names_from = KPMP_celltype, values_from = prop, values_fill = 0)

pt_props <- pt_props %>%
  mutate(prop_sum = rowSums(across(c("PT-S1/S2", "PT-S3", "aPT"))))
# Placebo
pt_props_placebo <- pt_props[pt_props$treatment == "Placebo",]
pt_props_placebo$Y <- DR_data(pt_props_placebo[,4:6])
pt_props_placebo_drichlet <- DirichReg(Y ~ visit, data = pt_props_placebo)
pt_props_placebo_drichlet_summary <- summary(pt_props_placebo_drichlet)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(pt_props_placebo_drichlet_summary, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_dirichlet_placebo_kpmp.rds')

# Dapa
pt_props_dapa <- pt_props[pt_props$treatment != "Placebo",]
pt_props_dapa$Y <- DR_data(pt_props_dapa[,4:6])
pt_props_dapa_drichlet <- DirichReg(Y ~ visit, data = pt_props_dapa)
pt_props_dapa_drichlet_summary <- summary(pt_props_dapa_drichlet)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(pt_props_dapa_drichlet_summary, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_dirichlet_dapa_kpmp.rds')

# POST (placebo vs. dapa)
pt_props_post <- pt_props[pt_props$visit == "POST",]
pt_props_post$Y <- DR_data(pt_props_post[,4:6])
pt_props_post_drichlet <- DirichReg(Y ~ treatment, data = pt_props_post)
pt_props_post_drichlet_summary <- summary(pt_props_post_drichlet)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(pt_props_post_drichlet_summary, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_dirichlet_post_kpmp.rds')

```

```{r echo = F, eval = F}
# scDC package (sc differential composition analysis)
attempt_so_pt$celltype <- factor(attempt_so_pt$celltype, levels = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))
exprsMat <- GetAssayData(attempt_so_pt, assay = "RNA", slot = "counts")
attempt_so_pt$treatment_visit <- paste0(attempt_so_pt$treatment, "_", attempt_so_pt$visit)
attempt_so_pt$subject_visit <- paste0(attempt_so_pt$subject_id, "_", attempt_so_pt$visit)
cellTypes <- attempt_so_pt@meta.data$celltype
subject <- attempt_so_pt@meta.data$subject_visit

cond <- data.frame(subject = subject,
                   treatment = attempt_so_pt@meta.data$treatment_visit,
                   visit = attempt_so_pt@meta.data$visit) %>%
  distinct(subject, .keep_all = T)

res_scDC_noClust <- scDC_noClustering(cellTypes, subject, calCI = TRUE, 
                                     calCI_method = c("BCa"), ncores = 20)

# merge treatment and visit information to res_scDC_noClust
res_scDC_noClust$results <- left_join(res_scDC_noClust$results, cond)
```

```{r echo = F}
barplotCI_custom <- function(res, condition){
  res$results$index_original <- seq_len(nrow(res$results))
  df_toPlot <- res$results %>% 
    dplyr::mutate(cond = condition,
                  method = factor(method, levels = c("BCa", "percentile", "multinom"))) %>%
    dplyr::arrange(treatment, visit) 
  thetastar_reordered <- res$thetastar[df_toPlot$index_original, , drop = FALSE]
  
  df_toPlot$median <- apply(thetastar_reordered, 1, median)
  df_toPlot$conf_low <- apply(thetastar_reordered, 1, function(x) quantile(x, 0.025))
  df_toPlot$conf_high <- apply(thetastar_reordered, 1, function(x) quantile(x, 0.975))
  
  df_toPlot$subject <- factor(df_toPlot$subject, levels = unique(df_toPlot$subject))
  
  n_method <- length(unique(df_toPlot$method))
  n_celltype <- length(unique(df_toPlot$cellTypes))
  
  g_bar <- ggplot2::ggplot(df_toPlot, aes(x = subject, y = median, fill = cond)) +
    ggplot2::geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
    ggplot2::theme_bw() +
    ggplot2::scale_fill_brewer(palette = "Set2") +
    ggplot2::ylab("Proportion") +
    ggplot2::xlab("") +
    ggplot2::labs(fill = "") +
    ggplot2::geom_errorbar(aes(ymin = conf_low, ymax = conf_high),
                           width = 0.01, lwd = 1,
                           position = position_dodge(width = 0.5)) +
    ggplot2::theme(axis.text.x = element_text(angle = 90), text = element_text(size = 12)) +
    ggplot2::scale_color_manual(values = RColorBrewer::brewer.pal(n = 3, name = "Dark2")[1:n_method]) +
    ggplot2::facet_wrap(~cellTypes, ncol = n_celltype,
                        labeller = labeller(cellTypes = label_wrap_gen(width = 10, multi_line = TRUE))) +
    ggplot2::coord_flip() +
    ggplot2::ylim(c(0, 1))

  return(g_bar)
}

densityCI_custom <- function(res, condition){
  # Add index and reorder
  res$results$index_original <- seq_len(nrow(res$results))
  res$results <- res$results %>%
    dplyr::arrange(treatment, visit, subject)
  
  # Reorder thetastar
  thetastar_reordered <- res$thetastar[res$results$index_original, , drop = FALSE]

  # Melt the reordered thetastar
  df_toPlot <- reshape2::melt(thetastar_reordered)
  df_toPlot$cellTypes <- res$info[,"cellTypes"][df_toPlot$Var1]
  df_toPlot$subject <- res$info[,"subject"][df_toPlot$Var1]
  df_toPlot$cond <- condition

  # Match subject order to reordered results
  subject_order <- res$results$subject
  df_toPlot$subject <- factor(df_toPlot$subject, levels = unique(subject_order))
  
  # Prepare confidence line data
  conf_line <- res$results
  conf_line$cond <- condition
  conf_line$method <- factor(conf_line$method, levels = c("BCa", "percentile", "multinom"))
  
  n_method <- length(unique(conf_line$method))
  n_celltype <- length(unique(df_toPlot$cellTypes))
  
  # Plot
  if (length(unique(df_toPlot$subject)) == 1){
    g_density <- ggplot2::ggplot(df_toPlot, aes(x = value, y = subject, fill = cond)) +
      ggridges::stat_density_ridges(alpha = 0.5) +
      ggplot2::geom_vline(data = conf_line, aes(xintercept = conf_low),
                          lwd = 1, alpha = 0.8) +
      ggplot2::geom_vline(data = conf_line, aes(xintercept = conf_high),
                          lwd = 1, alpha = 0.8)
  } else {
    g_density <- ggplot2::ggplot(df_toPlot, aes(x = value, y = subject, fill = cond)) +
      ggridges::stat_density_ridges(alpha = 0.5) +
      ggplot2::geom_segment(data = conf_line, aes(x = conf_low, xend = conf_low, y = as.numeric(subject),
                                                  yend = as.numeric(subject) + .9,
                                                  color = method, linetype = method),
                            lwd = 1, alpha = 0.8) +
      ggplot2::geom_segment(data = conf_line, aes(x = conf_high, xend = conf_high, y = as.numeric(subject),
                                                  yend = as.numeric(subject) + .9,
                                                  color = method, linetype = method),
                            lwd = 1, alpha = 0.8)
  }

  g_density <- g_density +
    ggplot2::theme_bw() +
    ggplot2::theme(axis.text.x = element_text(angle = 90), text = element_text(size = 12)) +
    ggplot2::scale_fill_brewer(palette = "Set2") +
    ggplot2::xlab("Proportion") +
    ggplot2::ylab("") +
    ggplot2::labs(fill = "") +
    ggplot2::guides(color = "none") +
    ggplot2::facet_wrap(~cellTypes, ncol = n_celltype , scales = "free_x",
                        labeller = labeller(cellTypes  = label_wrap_gen(width = 10,  multi_line = TRUE)))

  return(g_density)
}

barplotCI_custom(res_scDC_noClust, res_scDC_noClust$results$treatment)

densityCI_custom(res_scDC_noClust, res_scDC_noClust$results$treatment)

```


```{r echo = F}
# lots of non-convergence, long time to compute, and need contrasts to do comparisons between other PT cells other than the ref group (PT-1)
# # GLM in Placebo only
# attempt_so_pt_placebo <- subset(attempt_so_pt, treatment == "Placebo")
# attempt_so_pt_placebo$celltype <- factor(attempt_so_pt_placebo$celltype, levels = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))
# exprsMat <- GetAssayData(attempt_so_pt_placebo, assay = "RNA", slot = "counts")
# attempt_so_pt_placebo$treatment_visit <- paste0(attempt_so_pt_placebo$treatment, "_", attempt_so_pt_placebo$visit)
# attempt_so_pt_placebo$subject_visit <- paste0(attempt_so_pt_placebo$subject_id, "_", attempt_so_pt_placebo$visit)
# cellTypes <- attempt_so_pt_placebo@meta.data$celltype
# subject <- attempt_so_pt_placebo@meta.data$subject_visit
# 
# cond <- data.frame(subject = subject,
#                    treatment = attempt_so_pt_placebo@meta.data$treatment_visit,
#                    visit = attempt_so_pt_placebo@meta.data$visit) %>%
#   distinct(subject, .keep_all = T)
# 
# res_scDC_placebo <- scDC_noClustering(cellTypes, subject, calCI = TRUE, 
#                                      calCI_method = c("BCa"), ncores = 20, nboot = 1000)
# 
# res_scDC_placebo$results$subject <- sub("_.*", "", res_scDC_placebo$results$subject)
# res_scDC_placebo$info$subject <- sub("_.*", "", res_scDC_placebo$info$subject)
# cond$subject <- sub("_.*", "", cond$subject)
# 
# 
# res_GLM_placebo <- fitGLM(res_scDC_placebo, cond$visit, 
#                   pairwise = T)
# 
# summary(res_GLM_placebo$pool_res_random)
```

```{r echo = F}
# # GLM in Dapa only
# attempt_so_pt_dapa <- subset(attempt_so_pt, treatment != "Placebo")
# attempt_so_pt_dapa$celltype <- factor(attempt_so_pt_dapa$celltype, levels = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))
# exprsMat <- GetAssayData(attempt_so_pt_dapa, assay = "RNA", slot = "counts")
# attempt_so_pt_dapa$treatment_visit <- paste0(attempt_so_pt_dapa$treatment, "_", attempt_so_pt_dapa$visit)
# attempt_so_pt_dapa$subject_visit <- paste0(attempt_so_pt_dapa$subject_id, "_", attempt_so_pt_dapa$visit)
# cellTypes <- attempt_so_pt_dapa@meta.data$celltype
# subject <- attempt_so_pt_dapa@meta.data$subject_visit
# 
# cond <- data.frame(subject = subject,
#                    treatment = attempt_so_pt_dapa@meta.data$treatment_visit,
#                    visit = attempt_so_pt_dapa@meta.data$visit) %>%
#   distinct(subject, .keep_all = T)
# 
# res_scDC_dapa <- scDC_noClustering(cellTypes, subject, calCI = TRUE, 
#                                      calCI_method = c("BCa"), ncores = 20, nboot = 1000)
# 
# res_scDC_dapa$results$subject <- sub("_.*", "", res_scDC_dapa$results$subject)
# res_scDC_dapa$info$subject <- sub("_.*", "", res_scDC_dapa$info$subject)
# cond$subject <- sub("_.*", "", cond$subject)
# 
# 
# res_GLM_dapa <- fitGLM(res_scDC_dapa, cond$visit, 
#                   pairwise = T)
# 
# summary(res_GLM_dapa$pool_res_random)
# summary(res_GLM_dapa$pool_res_fixed)
```


```{r echo = F}
# Method using glmmTMB
# library(glmmTMB)
# 
# # Placebo only
# attempt_so_pt_meta_placebo <- attempt_so_pt_placebo@meta.data
# # Loop through PT subtypes
# pt_subtypes <- paste0("PT-", 1:5)
# 
# pt_prop_placebo <- lapply(pt_subtypes, function(pt) {
#   attempt_so_pt_meta_placebo$binary <- as.integer(attempt_so_pt_meta_placebo$celltype == pt)
# 
#   model <- glmmTMB(binary ~ visit + (1 | subject_id), 
#                    family = binomial(), 
#                    data = attempt_so_pt_meta_placebo)
#   
#   summary_out <- summary(model)
#   est <- summary_out$coefficients$cond["visitPOST", ]
#   data.frame(
#     subtype = pt,
#     logOR = est["Estimate"],
#     SE = est["Std. Error"],
#     p_value = est["Pr(>|z|)"]
#   )
# }) %>% bind_rows()
# 
# print(pt_prop_placebo)
```


```{r echo = F}
# attempt_so_pt_meta_dapa <- attempt_so_pt_dapa@meta.data
# # Loop through PT subtypes
# pt_subtypes <- paste0("PT-", 1:5)
# 
# pt_prop_dapa <- lapply(pt_subtypes, function(pt) {
#   attempt_so_pt_meta_dapa$binary <- as.integer(attempt_so_pt_meta_dapa$celltype == pt)
# 
#   model <- glmmTMB(binary ~ visit + (1 | subject_id), 
#                    family = binomial(), 
#                    data = attempt_so_pt_meta_dapa)
#   
#   summary_out <- summary(model)
#   est <- summary_out$coefficients$cond["visitPOST", ]
#   data.frame(
#     subtype = pt,
#     logOR = est["Estimate"],
#     SE = est["Std. Error"],
#     p_value = est["Pr(>|z|)"]
#   )
# }) %>% bind_rows()
# 
# print(pt_prop_dapa)

```

```{r echo = F}
# using propeller
library(speckle)

# Placebo

attempt_so_pt_placebo <- subset(attempt_so_pt, treatment == "Placebo")
attempt_so_pt_placebo$celltype <- factor(attempt_so_pt_placebo$celltype, levels = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))
attempt_so_pt_meta_placebo <- attempt_so_pt_placebo@meta.data

transformed_props <- getTransformedProps(clusters = attempt_so_pt_meta_placebo$celltype,
                    sample = paste0(attempt_so_pt_meta_placebo$subject_id, "_", attempt_so_pt_meta_placebo$visit))
visit <- ifelse(grepl("_PRE$", colnames(transformed_props$Counts)), "PRE", "POST")
design <- model.matrix(~ 0 + visit)
colnames(design) <- gsub("visit", "", colnames(design)) 

contrasts <- c(POST = 1, PRE = -1)

propeller_res_placebo <- propeller.ttest(prop.list = transformed_props,
                                 design = design,
                                 contrasts = contrasts,
                                 robust=TRUE,
  trend=FALSE, sort=TRUE)
propeller_res_placebo

# Dapagliflozin
attempt_so_pt_dapa <- subset(attempt_so_pt, treatment == "Dapagliflozin")
attempt_so_pt_dapa$celltype <- factor(attempt_so_pt_dapa$celltype, levels = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"))
attempt_so_pt_meta_dapa <- attempt_so_pt_dapa@meta.data

transformed_props <- getTransformedProps(clusters = attempt_so_pt_meta_dapa$celltype,
                    sample = paste0(attempt_so_pt_meta_dapa$subject_id, "_", attempt_so_pt_meta_dapa$visit))
visit <- ifelse(grepl("_PRE$", colnames(transformed_props$Counts)), "PRE", "POST")
design <- model.matrix(~ 0 + visit)
colnames(design) <- gsub("visit", "", colnames(design)) 

contrasts <- c(POST = 1, PRE = -1)

propeller_res_dapa <- propeller.ttest(prop.list = transformed_props,
                                 design = design,
                                 contrasts = contrasts,
                                 robust=TRUE,
  trend=FALSE, sort=TRUE)
propeller_res_dapa

propeller_res_placebo$treatment <- "Placebo"
propeller_res_placebo$celltype <- rownames(propeller_res_placebo)
propeller_res_dapa$treatment <- "Dapagliflozin"
propeller_res_dapa$celltype <- rownames(propeller_res_dapa)

combined <- rbind(propeller_res_placebo, propeller_res_dapa)

combined
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(combined, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_propeller_combined.rds')
```

```{r echo = F}
# using propeller (KPMP celltype)
# Placebo

attempt_so_pt_placebo <- subset(attempt_so_pt, treatment == "Placebo")
attempt_so_pt_placebo$KPMP_celltype <- factor(attempt_so_pt_placebo$KPMP_celltype, levels = c("PT-S1/S2", "PT-S3", "aPT"))
attempt_so_pt_meta_placebo <- attempt_so_pt_placebo@meta.data

transformed_props <- getTransformedProps(clusters = attempt_so_pt_meta_placebo$KPMP_celltype,
                    sample = paste0(attempt_so_pt_meta_placebo$subject_id, "_", attempt_so_pt_meta_placebo$visit))
visit <- ifelse(grepl("_PRE$", colnames(transformed_props$Counts)), "PRE", "POST")
design <- model.matrix(~ 0 + visit)
colnames(design) <- gsub("visit", "", colnames(design)) 

contrasts <- c(POST = 1, PRE = -1)

propeller_res_placebo <- propeller.ttest(prop.list = transformed_props,
                                 design = design,
                                 contrasts = contrasts,
                                 robust=TRUE,
  trend=FALSE, sort=TRUE)
propeller_res_placebo

# Dapagliflozin
attempt_so_pt_dapa <- subset(attempt_so_pt, treatment == "Dapagliflozin")
attempt_so_pt_dapa$KPMP_celltype <- factor(attempt_so_pt_dapa$KPMP_celltype, levels = c("PT-S1/S2", "PT-S3", "aPT"))
attempt_so_pt_meta_dapa <- attempt_so_pt_dapa@meta.data

transformed_props <- getTransformedProps(clusters = attempt_so_pt_meta_dapa$KPMP_celltype,
                    sample = paste0(attempt_so_pt_meta_dapa$subject_id, "_", attempt_so_pt_meta_dapa$visit))
visit <- ifelse(grepl("_PRE$", colnames(transformed_props$Counts)), "PRE", "POST")
design <- model.matrix(~ 0 + visit)
colnames(design) <- gsub("visit", "", colnames(design)) 

contrasts <- c(POST = 1, PRE = -1)

propeller_res_dapa <- propeller.ttest(prop.list = transformed_props,
                                 design = design,
                                 contrasts = contrasts,
                                 robust=TRUE,
  trend=FALSE, sort=TRUE)
propeller_res_dapa

propeller_res_placebo$treatment <- "Placebo"
propeller_res_placebo$KPMP_celltype <- rownames(propeller_res_placebo)
propeller_res_dapa$treatment <- "Dapagliflozin"
propeller_res_dapa$KPMP_celltype <- rownames(propeller_res_dapa)

combined_kpmp <- rbind(propeller_res_placebo, propeller_res_dapa)

temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(combined_kpmp, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_propeller_combined_kpmp.rds')
```

```{r echo = F}
# Mann whitney u testing
# Define function to run Mann-Whitney + effect size pipeline
run_mwu_effect_size <- function(meta_df, group_label, celltype = "celltype") {
  
  celltype_sym <- rlang::sym(celltype)   # create symbol from string
  
  # Count cells per sample and per PT subtype
  prop_df <- meta_df %>%
    group_by(subject_id, visit, sample_id = paste0(subject_id, "_", visit)) %>%
    dplyr::count(!!celltype_sym) %>%
    group_by(subject_id, visit, sample_id) %>%
    mutate(proportion = n / sum(n)) %>%
    ungroup()
  
  # Make wide format
  prop_wide <- prop_df %>%
    dplyr::select(sample_id, visit, !!celltype_sym, proportion) %>%
    tidyr::pivot_wider(names_from = !!celltype_sym, values_from = proportion, values_fill = 0)
  
  # Get list of PT subtypes
  celltypes <- setdiff(colnames(prop_wide), c("sample_id", "visit"))
  
  # Run Mann-Whitney + effect size per subtype
  effect_results <- lapply(celltypes, function(ct) {
    
    test_res <- wilcox.test(prop_wide[[ct]] ~ prop_wide$visit)
    
    # Effect direction â†’ median difference
    medians <- prop_wide %>%
      group_by(visit) %>%
      summarise(median_prop = median(.data[[ct]], na.rm = TRUE)) %>%
      arrange(visit)
    
    median_diff <- medians$median_prop[medians$visit == "POST"] - 
                   medians$median_prop[medians$visit == "PRE"]
    
    # Rank-biserial correlation
    n1 <- sum(prop_wide$visit == "PRE")
    n2 <- sum(prop_wide$visit == "POST")
    U <- test_res$statistic
    rbc <- (2 * U) / (n1 * n2) - 1
    
    tibble(
      celltype = ct,
      p.value = test_res$p.value,
      W = test_res$statistic,
      median_PRE = medians$median_prop[medians$visit == "PRE"],
      median_POST = medians$median_prop[medians$visit == "POST"],
      median_diff = median_diff,
      rank_biserial_corr = rbc,
      group = group_label
    )
  })
  
  # Combine results
  bind_rows(effect_results)
}
```

```{r echo = F}
# For dapagliflozin
effect_results_dapa <- run_mwu_effect_size(attempt_so_pt_meta_dapa, "dapa")

# For placebo (replace this with your placebo meta dataframe)
effect_results_placebo <- run_mwu_effect_size(attempt_so_pt_meta_placebo, "placebo")

# Combine both
combined_effect_results <- bind_rows(effect_results_dapa, effect_results_placebo)

# Save as RDS
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(combined_effect_results, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_mwu_combined.rds')
```

```{r echo = F}
# For dapagliflozin
effect_results_dapa_kpmp <- run_mwu_effect_size(attempt_so_pt_meta_dapa, "dapa", celltype = "KPMP_celltype")

# For placebo (replace this with your placebo meta dataframe)
effect_results_placebo_kpmp <- run_mwu_effect_size(attempt_so_pt_meta_placebo, "placebo", celltype = "KPMP_celltype")

# Combine both
combined_effect_results_kpmp <- bind_rows(effect_results_dapa_kpmp, effect_results_placebo_kpmp)

# Save as RDS
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(combined_effect_results_kpmp, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PT/pt_mwu_combined_kpmp.rds')
```

```{r echo = F}
count_df_dapa <- attempt_so_pt_meta_dapa %>%
  group_by(subject_id, visit, sample_id = paste0(subject_id, "_", visit)) %>%
  dplyr::count(celltype) %>%
  tidyr::pivot_wider(names_from = celltype, values_from = n, values_fill = 0) %>%
  ungroup()
count_df_dapa_py <- reticulate::r_to_py(count_df_dapa)

count_df_placebo <- attempt_so_pt_meta_placebo %>%
  group_by(subject_id, visit, sample_id = paste0(subject_id, "_", visit)) %>%
  dplyr::count(celltype) %>%
  tidyr::pivot_wider(names_from = celltype, values_from = n, values_fill = 0) %>%
  ungroup()
count_df_placebo_py <- reticulate::r_to_py(count_df_placebo)
reticulate::repl_python()
```

```{python}
import pandas as pd
import numpy as np
import sccoda
from sccoda.util import cell_composition_data as dat
from sccoda.util import data_visualization as viz

# Load data
count_df_placebo = r.count_df_placebo
count_df_dapa = r.count_df_dapa

# Convert data to anndata object
print(count_df_placebo)
data_all = dat.from_pandas(count_df_placebo, covariate_columns=["sample_id"])

# Extract condition from mouse name and add it as an extra column to the covariates
data_all.obs["visit"] = data_all.obs["subject_id"].str.replace(r"_[0-9]", "", regex=True)
print(data_all)
```


```{r}
# logistic mixed effects with time*visit
fit_model <- function(df, subtype_name) {
  df_sub <- df %>% filter(KPMP_celltype == subtype_name)

  # Logistic mixed model with time x treatment interaction
  # Note: you might need to convert proportions to counts if available
  # or use a beta regression if proportions
  
  model <- lmer(
    proportion ~ visit * treatment + (1 | subject_id),
    data = df_sub
  )
  
  # Extract the treatment x time interaction effect
  # This is the difference-in-differences estimate
  emm <- emmeans(model, ~ treatment | visit)
  contrast_result <- contrast(emm, "pairwise", by = "visit")
  
  # Get the difference in changes (interaction)
  emm_interaction <- emmeans(model, ~ treatment * visit)
  did_contrast <- contrast(
    emm_interaction, 
    interaction = c("pairwise", "pairwise"),
    by = NULL
  )
  
 # Convert to dataframe and extract relevant comparison
  did_df <- as.data.frame(did_contrast)

  tibble(
    subtype = subtype_name,
    estimate = did_df$estimate[1],
    se = did_df$SE[1],
    ci_lower = did_df$estimate[1] - 1.96 * did_df$SE[1],  # 95% CI
    ci_upper = did_df$estimate[1] + 1.96 * did_df$SE[1],
    p_value = did_df$p.value[1]
  )
}

# Say outcome is PT-S1/2 proportion. You can treat it as
# (successes / total cells) ~ predictors with a binomial GLMM.

pt_subtypes <- c("PT-S1/S2", "PT-S3", "aPT")
attempt_so_meta <- attempt_so@meta.data
pt_prop_df <- attempt_so_meta %>%
  filter(KPMP_celltype %in% pt_subtypes) %>%
  group_by(subject_id, visit, sample_id = paste0(subject_id, "_", visit), treatment) %>%
  dplyr::count(KPMP_celltype) %>%
  group_by(subject_id, visit, sample_id, treatment) %>%
  mutate(proportion = n / sum(n)) %>%
  ungroup()  %>%
  mutate(
    # Relevel so Dapagliflozin and POST are reference levels
    treatment = fct_relevel(treatment, "Dapagliflozin", "Placebo"),
    visit = fct_relevel(visit, "POST", "PRE")
    )
pt_results <- map_df(pt_subtypes, ~fit_model(pt_prop_df, .x))

ggplot(pt_results, aes(x = subtype, y = estimate)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
  geom_point(size = 3) +
  geom_errorbar(
    aes(ymin = ci_lower, ymax = ci_upper),
    width = 0.2,
    linewidth = 0.8
  ) +
  coord_flip() +
  labs(
    x = NULL,
    y = "Change in DiD Proportion",
    caption = paste("P-values:", 
                   paste(pt_results$subtype, 
                         format.pval(pt_results$p_value, digits = 3), 
                         sep = " = ", collapse = "; "))
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold"),
    panel.grid.major.y = element_blank()
  )


# Step 1: Extract metadata and filter to PT cells
pt_cells <- attempt_so@meta.data %>%
  rownames_to_column("cell_id") %>%
  filter(KPMP_celltype %in% c("aPT", "PT-S1/S2", "PT-S3"))

# Step 2: Count cells per subject/timepoint/treatment/subtype
cell_counts <- pt_cells %>%
  group_by(subject_id, treatment, visit, KPMP_celltype) %>%
  summarise(n_subtype = n(), .groups = "drop")

# Step 3: Get total PT cells per subject/timepoint/treatment
total_pt <- pt_cells %>%
  group_by(subject_id, treatment, visit) %>%
  summarise(n_total_pt = n(), .groups = "drop")

# Step 4: Join and create full dataset
df_counts <- cell_counts %>%
  left_join(total_pt, by = c("subject_id", "treatment", "visit")) %>%
  mutate(
    # Create the complement (cells that are NOT this subtype)
    n_other = n_total_pt - n_subtype,
    # Rename for clarity
    PT_subtype = KPMP_celltype
  )

# Step 5: Fit logistic mixed model for each PT subtype
fit_logistic_model <- function(df, subtype_name) {
  df_sub <- df %>% 
    filter(PT_subtype == subtype_name) %>%
    mutate(
      treatment = factor(treatment),
      visit = factor(visit)
    )
  
  # Logistic regression with cell counts
  model <- glmer(
    cbind(n_subtype, n_other) ~ visit * treatment + (1 | subject_id),
    family = binomial,
    data = df_sub,
    control = glmerControl(optimizer = "bobyqa")
  )
  
  # Extract the interaction coefficient directly
  # This is the log-odds ratio for the difference-in-differences
  coef_summary <- summary(model)$coefficients
  
  # Find the interaction term row
  interaction_row <- grep("visit.*:.*treatment|treatment.*:.*visit", 
                          rownames(coef_summary))
  
  interaction_coef <- coef_summary[interaction_row, ]
  
  tibble(
    subtype = subtype_name,
    log_odds_ratio = interaction_coef["Estimate"],
    se = interaction_coef["Std. Error"],
    ci_lower = interaction_coef["Estimate"] - 1.96 * interaction_coef["Std. Error"],
    ci_upper = interaction_coef["Estimate"] + 1.96 * interaction_coef["Std. Error"],
    p_value = interaction_coef["Pr(>|z|)"],
    # Also provide odds ratio (exponentiated)
    odds_ratio = exp(interaction_coef["Estimate"]),
    or_ci_lower = exp(interaction_coef["Estimate"] - 1.96 * interaction_coef["Std. Error"]),
    or_ci_upper = exp(interaction_coef["Estimate"] + 1.96 * interaction_coef["Std. Error"])
  )
}

# Step 6: Run for each PT subtype
pt_subtypes <- c("PT-S1/S2", "PT-S3", "aPT")
results_logistic <- map_df(pt_subtypes, ~fit_logistic_model(df_counts, .x))

print(results_logistic)
```

```{r}
# McNemar's test
# Step 1: Extract metadata and filter to PT cells
pt_cells <- attempt_so@meta.data %>%
  rownames_to_column("cell_id") %>%
  filter(KPMP_celltype %in% c("aPT", "PT-S1/S2", "PT-S3"))

# Step 2: Calculate proportions for each subject/timepoint/treatment/subtype
proportions <- pt_cells %>%
  # Get total PT cells per subject/timepoint
  group_by(subject_id, treatment, visit) %>%
  mutate(n_total_pt = n()) %>%
  ungroup() %>%
  # Get counts per subtype
  group_by(subject_id, treatment, visit, KPMP_celltype, n_total_pt) %>%
  summarise(n_subtype = n(), .groups = "drop") %>%
  mutate(proportion = n_subtype / n_total_pt) %>%
  rename(PT_subtype = KPMP_celltype)

# Step 3: Reshape to wide format for paired analysis
df_wide <- proportions %>%
  select(subject_id, treatment, visit, PT_subtype, proportion) %>%
  pivot_wider(
    names_from = visit,
    values_from = proportion,
    values_fill = 0
  ) %>%
  mutate(
    # Calculate change in proportions
    delta = POST - PRE  # Adjust based on your actual visit values
  )

# Step 4: Function to compare deltas between treatments
compare_deltas_mcnemar <- function(df, subtype_name) {
  df_sub <- df %>% filter(PT_subtype == subtype_name)
  
  # Separate by treatment
  placebo_delta <- df_sub %>% 
    filter(treatment == "Placebo") %>% 
    pull(delta)
  
  dapa_delta <- df_sub %>% 
    filter(treatment == "Dapagliflozin") %>% 
    pull(delta)
  
  # Mean difference-in-differences
  mean_placebo <- mean(placebo_delta, na.rm = TRUE)
  mean_dapa <- mean(dapa_delta, na.rm = TRUE)
  diff_in_diff <- mean_dapa - mean_placebo
  
  # Wilcoxon rank-sum test (comparing deltas between groups)
  wilcox_result <- wilcox.test(dapa_delta, placebo_delta)
  
  # Bootstrap 95% CI for the difference-in-differences
  set.seed(123)
  n_boot <- 10000
  boot_diffs <- replicate(n_boot, {
    placebo_boot <- sample(placebo_delta, replace = TRUE)
    dapa_boot <- sample(dapa_delta, replace = TRUE)
    mean(dapa_boot) - mean(placebo_boot)
  })
  
  ci_lower <- quantile(boot_diffs, 0.025)
  ci_upper <- quantile(boot_diffs, 0.975)
  
  tibble(
    subtype = subtype_name,
    mean_delta_placebo = mean_placebo,
    mean_delta_dapa = mean_dapa,
    diff_in_diff = diff_in_diff,
    ci_lower = ci_lower,
    ci_upper = ci_upper,
    p_value = wilcox_result$p.value,
    method = "Wilcoxon"
  )
}

# Step 5: Run for each PT subtype
pt_subtypes <- c("PT-S1/S2", "PT-S3", "aPT")
results_mcnemar <- map_df(pt_subtypes, ~compare_deltas_mcnemar(df_wide, .x))

print(results_mcnemar)


compare_deltas_ttest <- function(df, subtype_name) {
  df_sub <- df %>% filter(PT_subtype == subtype_name)
  
  # Separate by treatment
  placebo_delta <- df_sub %>% 
    filter(treatment == "Placebo") %>% 
    pull(delta)
  
  dapa_delta <- df_sub %>% 
    filter(treatment == "Dapagliflozin") %>% 
    pull(delta)
  
  # Mean difference-in-differences
  mean_placebo <- mean(placebo_delta, na.rm = TRUE)
  mean_dapa <- mean(dapa_delta, na.rm = TRUE)
  diff_in_diff <- mean_dapa - mean_placebo
  
  # Two-sample t-test comparing deltas
  ttest_result <- t.test(dapa_delta, placebo_delta)
  
  tibble(
    subtype = subtype_name,
    mean_delta_placebo = mean_placebo,
    mean_delta_dapa = mean_dapa,
    diff_in_diff = diff_in_diff,
    ci_lower = ttest_result$conf.int[1],
    ci_upper = ttest_result$conf.int[2],
    p_value = ttest_result$p.value,
    method = "t-test"
  )
}

results_ttest <- map_df(pt_subtypes, ~compare_deltas_ttest(df_wide, .x))
results_ttest
```


#### Mixed model (hurdle, no nested random effect)

##### nebula

###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
nebula_pt_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_hvg_pt,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "PT/nebula/pt_attempt_hvg_nebula_res_reml_pooled.rds"
)
```

```{r echo = F, eval = F}
# PT subtypes
celltype_vec <- paste0("PT-", 1:5)

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_pt, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("PT/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```


###### REML (not reduced to HVG)

```{r echo = F, eval = T}
nebula_pt_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_pt,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "PT/nebula/pt_attempt_nebula_res_reml_pooled.rds"
)
```

```{r echo = F}
# PT subtypes
celltype_vec <- paste0("PT-", 1:5)

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_pt, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("PT/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

##### KPMP celltype
```{r echo = F}
attempt_so$celltype_pt_kpmp <- ifelse(grepl("PT", attempt_so$KPMP_celltype),
                                 "PT", as.character(attempt_so$KPMP_celltype))
attempt_so_pt_kpmp <- subset(attempt_so, celltype_pt_kpmp == "PT" & KPMP_celltype != "EC-PTC")
```

```{r echo = F}
attempt_so_pt_kpmp <- FindVariableFeatures(attempt_so_pt_kpmp, selection.method = "vst", nfeatures = 2000)
hvgs_pt_kpmp <- VariableFeatures(attempt_so_pt_kpmp)

#Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_pt_kpmp <- subset(attempt_so_pt_kpmp, features = hvgs_pt_kpmp)
```


###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
nebula_pt_kpmp_hvg_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_hvg_pt_kpmp,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "PT/nebula/pt_kpmp_attempt_hvg_nebula_res_reml_pooled.rds"
)
```


###### REML (not reduced to HVG)

```{r echo = F, eval = F}
nebula_pt_kpmp_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_pt_kpmp,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "PT/nebula/pt_kpmp_attempt_nebula_res_reml_pooled.rds"
)
```


#### Sum expression (pseudo-bulk within individual)

* # of genes up/down
* upset plots of overlap in cell types
* pathways (IPA and GSEA - GO/KEGG/one that Long used from Broad)
* pseudotime (call with Kelly)
* BOLD MRI stuff in the PPT so that we show everything in one slide

# TAL

```{r echo = F}
attempt_so$celltype_tal <- ifelse(grepl("TAL-", attempt_so$celltype),
                                 "TAL", as.character(attempt_so$celltype))
attempt_so_tal <- subset(attempt_so, celltype_tal == "TAL" & celltype != "TAL_highUMI")
```

```{r echo = F}
attempt_so_tal <- FindVariableFeatures(attempt_so_tal, selection.method = "vst", nfeatures = 2000)
hvgs_tal <- VariableFeatures(attempt_so_tal)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_tal <- subset(attempt_so_tal, features = hvgs_tal)
```

#### Proportions
```{r echo = F, eval = F}
attempt_tal_meta <- attempt_so_hvg_tal@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_tal_meta$celltype <- factor(attempt_tal_meta$celltype, levels = c("TAL-1", "TAL-2", "TAL-3"))
attempt_tal_meta$visit_treatment <- factor(attempt_tal_meta$visit_treatment,
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_tal_meta %>%
  filter(celltype != "TAL_highUMI") %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_visit_proportions_plot.png")

attempt_tal_meta %>%
  filter(celltype != "tal_lowQuality") %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_proportions_plot.png")

attempt_tal_meta %>%
  filter(celltype != "tal_lowQuality") %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_visit_proportions_plot.png")

attempt_meta %>%
  filter(grepl("TAL", KPMP_celltype)) %>%
  ggplot(aes(visit, fill = kpmp_tal)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_visit_proportions_plot_kpmp.png")

attempt_meta %>%
  filter(grepl("TAL", KPMP_celltype)) %>%
  ggplot(aes(treatment, fill = kpmp_tal)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_treatment_proportions_plot_kpmp.png")

attempt_meta %>%
  filter(grepl("TAL", KPMP_celltype)) %>%
  ggplot(aes(visit_treatment, fill = kpmp_tal)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_tal_visit_treatment_proportions_plot_kpmp.png")
```

#### Mixed model (hurdle, nested random effect)
##### nebula

###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_tal <- round(GetAssayData(attempt_so_hvg_tal, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_tal)

# meta_hvg_tal <- attempt_so_hvg_tal@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_tal)
# data_g_hvg_tal = group_cell(count=counts_hvg_tal, id=meta_hvg_tal$subject, pred=pred)
# offset_hvg_tal = Matrix::colSums(data_g_hvg_tal$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_tal_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_tal[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_tal, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_tal_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_tal_results_list_reml_pooled) <- sapply(nebula_tal_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_tal_results_list_reml_pooled <- lapply(nebula_tal_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_tal_results_list_reml_pooled <- Filter(Negate(is.null), nebula_tal_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_tal_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_tal_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'TAL/nebula/tal_attempt_hvg_nebula_res_reml_pooled.rds')
```

```{r echo = F, eval = F}
# TAL subtypes
celltype_vec <- paste0("TAL-", 1:3)

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_tal, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("TAL/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

###### REML (not reduced to HVG)

```{r echo = F, eval = T}
counts_tal <- round(GetAssayData(attempt_so_tal, layer = "counts")) # load counts and round
genes_list <- rownames(counts_tal)

# meta_tal <- attempt_so_tal@meta.data
# pred = model.matrix(~treatment*visit, data = meta_tal)
# data_g_tal = group_cell(count=counts_tal, id=meta_tal$subject, pred=pred)
# offset_tal = Matrix::colSums(data_g_tal$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_tal_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_tal[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_tal, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_tal_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_tal_results_list_reml_pooled) <- sapply(nebula_tal_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_tal_results_list_reml_pooled <- lapply(nebula_tal_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_tal_results_list_reml_pooled <- Filter(Negate(is.null), nebula_tal_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_tal_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_tal_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'TAL/nebula/tal_attempt_nebula_res_reml_pooled.rds')
```

```{r echo = F}
# TAL subtypes
celltype_vec <- paste0("TAL-", 1:3)

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_tal, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("TAL/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

##### KPMP celltype

```{r echo = F}
attempt_so$celltype_tal_kpmp <- ifelse(grepl("TAL", attempt_so$KPMP_celltype),
                                 "TAL", as.character(attempt_so$KPMP_celltype))
unique(subset(attempt_so, celltype_tal_kpmp == "TAL")$KPMP_celltype)
attempt_so_tal_kpmp <- subset(attempt_so, celltype_tal_kpmp == "TAL" & KPMP_celltype != "EC-PTC")
```

```{r echo = F}
attempt_so_tal_kpmp <- FindVariableFeatures(attempt_so_tal_kpmp, selection.method = "vst", nfeatures = 2000)
hvgs_tal_kpmp <- VariableFeatures(attempt_so_tal_kpmp)

#Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_tal_kpmp <- subset(attempt_so_tal_kpmp, features = hvgs_tal_kpmp)
```


###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
nebula_tal_kpmp_hvg_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_hvg_tal_kpmp,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "TAL/nebula/tal_kpmp_attempt_hvg_nebula_res_reml_pooled.rds"
)
```

###### REML (not reduced to HVG)

```{r echo = F, eval = F}
nebula_tal_kpmp_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_tal_kpmp,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "TAL/nebula/tal_kpmp_attempt_hvg_nebula_res_reml_pooled.rds"
)
```

#### Sum expression (pseudo-bulk within individual)

# Immune Cells

```{r echo = F}
# immune cells: MAC, MON, T, B, NKT/NKC
attempt_so$celltype_immune <- ifelse(attempt_so$celltype %in% c("MON", "MAC", "T", "B", "NKT/NKC"),
                                     "Immune", as.character(attempt_so$celltype))
attempt_so_immune <- subset(attempt_so, celltype_immune == "Immune")
```

```{r echo = F}
attempt_so_immune <- FindVariableFeatures(attempt_so_immune, selection.method = "vst", nfeatures = 2000)
hvgs_immune <- VariableFeatures(attempt_so_immune)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_immune <- subset(attempt_so_immune, features = hvgs_immune)
```


#### Proportions
```{r echo = F, eval = F}
attempt_immune_meta <- attempt_so_hvg_immune@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_immune_meta$celltype <- factor(attempt_immune_meta$celltype, levels = c("MON", "MAC", "T", "B", "NKT/NKC"))
attempt_immune_meta$visit_treatment <- factor(attempt_immune_meta$visit_treatment,
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_immune_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_immune_treatment_visit_proportions_plot.png")

attempt_immune_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_immune_treatment_proportions_plot.png")

attempt_immune_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261", "#e76f51"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_immune_treatment_visit_proportions_plot.png")
```

#### Mixed model (hurdle, nested random effect)
##### nebula

###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_immune <- round(GetAssayData(attempt_so_hvg_immune, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_immune)

# meta_hvg_immune <- attempt_so_hvg_immune@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_immune)
# data_g_hvg_immune = group_cell(count=counts_hvg_immune, id=meta_hvg_immune$subject, pred=pred)
# offset_hvg_immune = Matrix::colSums(data_g_hvg_immune$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_immune_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_immune[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_immune, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_immune_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_immune_results_list_reml_pooled) <- sapply(nebula_immune_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_immune_results_list_reml_pooled <- lapply(nebula_immune_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_immune_results_list_reml_pooled <- Filter(Negate(is.null), nebula_immune_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_immune_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_immune_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune/nebula/immune_attempt_hvg_nebula_res_reml_pooled.rds')
```

###### REML (not reduced to HVG)

```{r echo = F, eval = T}
counts_immune <- round(GetAssayData(attempt_so_immune, layer = "counts")) # load counts and round
genes_list <- rownames(counts_immune)

# meta_immune <- attempt_so_immune@meta.data
# pred = model.matrix(~treatment*visit, data = meta_immune)
# data_g_immune = group_cell(count=counts_immune, id=meta_immune$subject, pred=pred)
# offset_immune = Matrix::colSums(data_g_immune$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_immune_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_immune[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_immune, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_immune_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_immune_results_list_reml_pooled) <- sapply(nebula_immune_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_immune_results_list_reml_pooled <- lapply(nebula_immune_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_immune_results_list_reml_pooled <- Filter(Negate(is.null), nebula_immune_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_immune_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_immune_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune/nebula/immune_attempt_nebula_res_reml_pooled.rds')
```


##### KPMP celltype

```{r echo = F}
attempt_so$celltype_immune_kpmp <- ifelse(grepl("TAL", attempt_so$KPMP_celltype),
                                 "TAL", as.character(attempt_so$KPMP_celltype))
unique(subset(attempt_so, celltype_immune_kpmp == "TAL")$KPMP_celltype)
attempt_so_immune_kpmp <- subset(attempt_so, celltype_immune_kpmp == "TAL" & KPMP_celltype != "EC-PTC")
```

```{r echo = F}
attempt_so_immune_kpmp <- FindVariableFeatures(attempt_so_immune_kpmp, selection.method = "vst", nfeatures = 2000)
hvgs_immune_kpmp <- VariableFeatures(attempt_so_immune_kpmp)

#Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_immune_kpmp <- subset(attempt_so_immune_kpmp, features = hvgs_immune_kpmp)
```


###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
nebula_immune_kpmp_hvg_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_hvg_immune_kpmp,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "TAL/nebula/immune_kpmp_attempt_hvg_nebula_res_reml_pooled.rds"
)
```

###### REML (not reduced to HVG)

```{r echo = F, eval = F}
nebula_immune_kpmp_results_list_reml_pooled <- run_nebula_parallel(
  seurat_obj = attempt_so_immune_kpmp,
  n_cores = 100,
  s3_bucket = "attempt",
  s3_key = "TAL/nebula/immune_kpmp_attempt_hvg_nebula_res_reml_pooled.rds"
)
```

#### Average expression (pseudo-bulk within individual) 

#### Sum expression (pseudo-bulk within individual) 


# Immune Cells (Myeloid)

```{r echo = F}
# immune_myeloid cells: MAC, MON
attempt_so$celltype_immune_myeloid <- ifelse(attempt_so$celltype %in% c("MON", "MAC"),
                                     "immune_myeloid", as.character(attempt_so$celltype))
attempt_so_immune_myeloid <- subset(attempt_so, celltype_immune_myeloid == "immune_myeloid")
```

```{r echo = F}
attempt_so_immune_myeloid <- FindVariableFeatures(attempt_so_immune_myeloid, selection.method = "vst", nfeatures = 2000)
hvgs_immune_myeloid <- VariableFeatures(attempt_so_immune_myeloid)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_immune_myeloid <- subset(attempt_so_immune_myeloid, features = hvgs_immune_myeloid)
```

#### Mixed model (hurdle, nested random effect)
##### nebula

###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_immune_myeloid <- round(GetAssayData(attempt_so_hvg_immune_myeloid, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_immune_myeloid)

# meta_hvg_immune_myeloid <- attempt_so_hvg_immune_myeloid@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_immune_myeloid)
# data_g_hvg_immune_myeloid = group_cell(count=counts_hvg_immune_myeloid, id=meta_hvg_immune_myeloid$subject, pred=pred)
# offset_hvg_immune_myeloid = Matrix::colSums(data_g_hvg_immune_myeloid$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_immune_myeloid_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_immune_myeloid[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_immune_myeloid, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_immune_myeloid_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_immune_myeloid_results_list_reml_pooled) <- sapply(nebula_immune_myeloid_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_immune_myeloid_results_list_reml_pooled <- lapply(nebula_immune_myeloid_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_immune_myeloid_results_list_reml_pooled <- Filter(Negate(is.null), nebula_immune_myeloid_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_immune_myeloid_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_immune_myeloid_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune_Myeloid/nebula/immune_myeloid_attempt_hvg_nebula_res_reml_pooled.rds')
```


```{r echo = F, eval = F}
# Immune Myeloid subtypes
celltype_vec <- c("MON", "MAC")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_immune_myeloid, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("Immune_Myeloid/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

###### REML (not reduced to HVG)

```{r echo = F, eval = T}
counts_immune_myeloid <- round(GetAssayData(attempt_so_immune_myeloid, layer = "counts")) # load counts and round
genes_list <- rownames(counts_immune_myeloid)

# meta_immune_myeloid <- attempt_so_immune_myeloid@meta.data
# pred = model.matrix(~treatment*visit, data = meta_immune_myeloid)
# data_g_immune_myeloid = group_cell(count=counts_immune_myeloid, id=meta_immune_myeloid$subject, pred=pred)
# offset_immune_myeloid = Matrix::colSums(data_g_immune_myeloid$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_immune_myeloid_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_immune_myeloid[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_immune_myeloid, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_immune_myeloid_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_immune_myeloid_results_list_reml_pooled) <- sapply(nebula_immune_myeloid_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_immune_myeloid_results_list_reml_pooled <- lapply(nebula_immune_myeloid_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_immune_myeloid_results_list_reml_pooled <- Filter(Negate(is.null), nebula_immune_myeloid_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_immune_myeloid_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_immune_myeloid_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune_Myeloid/nebula/immune_myeloid_attempt_nebula_res_reml_pooled.rds')
```


```{r echo = F}
# Immune Myeloid subtypes
celltype_vec <- c("MON", "MAC")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_immune_myeloid, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("Immune_Myeloid/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```


# Immune Cells (Lymphoid)

```{r echo = F}
# immune_lymphoid cells: "T", "B", "NKT/NKC"
attempt_so$celltype_immune_lymphoid <- ifelse(attempt_so$celltype %in% c("T", "B", "NKT/NKC"),
                                     "immune_lymphoid", as.character(attempt_so$celltype))
attempt_so_immune_lymphoid <- subset(attempt_so, celltype_immune_lymphoid == "immune_lymphoid")
```

```{r echo = F}
attempt_so_immune_lymphoid <- FindVariableFeatures(attempt_so_immune_lymphoid, selection.method = "vst", nfeatures = 2000)
hvgs_immune_lymphoid <- VariableFeatures(attempt_so_immune_lymphoid)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_immune_lymphoid <- subset(attempt_so_immune_lymphoid, features = hvgs_immune_lymphoid)
```

#### Mixed model (hurdle, nested random effect)
##### nebula

###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_immune_lymphoid <- round(GetAssayData(attempt_so_hvg_immune_lymphoid, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_immune_lymphoid)

# meta_hvg_immune_lymphoid <- attempt_so_hvg_immune_lymphoid@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_immune_lymphoid)
# data_g_hvg_immune_lymphoid = group_cell(count=counts_hvg_immune_lymphoid, id=meta_hvg_immune_lymphoid$subject, pred=pred)
# offset_hvg_immune_lymphoid = Matrix::colSums(data_g_hvg_immune_lymphoid$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_immune_lymphoid_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_immune_lymphoid[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_immune_lymphoid, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_immune_lymphoid_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_immune_lymphoid_results_list_reml_pooled) <- sapply(nebula_immune_lymphoid_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_immune_lymphoid_results_list_reml_pooled <- lapply(nebula_immune_lymphoid_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_immune_lymphoid_results_list_reml_pooled <- Filter(Negate(is.null), nebula_immune_lymphoid_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_immune_lymphoid_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_immune_lymphoid_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune_Lymphoid/nebula/immune_lymphoid_attempt_hvg_nebula_res_reml_pooled.rds')
```

```{r echo = F, eval = F}
# Immune Lymphoid subtypes
celltype_vec <- c("T", "B", "NKT/NKC")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_immune_lymphoid, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("Immune_Lymphoid/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```


###### REML (not reduced to HVG)

```{r echo = F, eval = T}
counts_immune_lymphoid <- round(GetAssayData(attempt_so_immune_lymphoid, layer = "counts")) # load counts and round
genes_list <- rownames(counts_immune_lymphoid)

# meta_immune_lymphoid <- attempt_so_immune_lymphoid@meta.data
# pred = model.matrix(~treatment*visit, data = meta_immune_lymphoid)
# data_g_immune_lymphoid = group_cell(count=counts_immune_lymphoid, id=meta_immune_lymphoid$subject, pred=pred)
# offset_immune_lymphoid = Matrix::colSums(data_g_immune_lymphoid$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_immune_lymphoid_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_immune_lymphoid[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_immune_lymphoid, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_immune_lymphoid_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_immune_lymphoid_results_list_reml_pooled) <- sapply(nebula_immune_lymphoid_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_immune_lymphoid_results_list_reml_pooled <- lapply(nebula_immune_lymphoid_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_immune_lymphoid_results_list_reml_pooled <- Filter(Negate(is.null), nebula_immune_lymphoid_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_immune_lymphoid_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_immune_lymphoid_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'Immune_Lymphoid/nebula/immune_lymphoid_attempt_nebula_res_reml_pooled.rds')
```

```{r echo = F}
# Immune Lymphoid subtypes
celltype_vec <- c("T", "B", "NKT/NKC")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_immune_lymphoid, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("Immune_Lymphoid/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```
# PC 

```{r echo = F} 
# PC-1 & PC-2, tPC-IC 
attempt_so$celltype_pc <- ifelse(attempt_so$celltype %in% c("PC-1", "PC-2", "tPC-IC"), 
                                     "PC", as.character(attempt_so$celltype)) 
attempt_so_pc <- subset(attempt_so, celltype_pc == "PC") 
``` 

```{r echo = F}
attempt_so_pc <- FindVariableFeatures(attempt_so_pc, selection.method = "vst", nfeatures = 2000)
hvgs_pc <- VariableFeatures(attempt_so_pc)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_pc <- subset(attempt_so_pc, features = hvgs_pc)
```

#### Proportions 
```{r echo = F, eval = F}
attempt_pc_meta <- attempt_so_hvg_pc@meta.data %>% 
  mutate(visit_treatment = paste0(visit, " ", treatment)) 
attempt_pc_meta$celltype <- factor(attempt_pc_meta$celltype, levels = c("PC-1", "PC-2", "tPC-IC")) 
attempt_pc_meta$visit_treatment <- factor(attempt_pc_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo", 
                                                     "PRE Dapagliflozin", "POST Dapagliflozin")) 
attempt_pc_meta %>% 
  ggplot(aes(visit, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261")) 
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pc_treatment_visit_proportions_plot.png")

attempt_pc_meta %>% 
  ggplot(aes(treatment, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261")) 
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pc_treatment_proportions_plot.png")


attempt_pc_meta %>% 
  ggplot(aes(visit_treatment, fill = celltype)) + 
  geom_bar(stat = "count", position = "fill") + 
  theme_classic() + 
  labs(x = NULL, 
       y = "Proportion", 
       fill = "Cell type") + 
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + 
  theme(plot.title = element_text(hjust=0.5, face="bold"), 
        text = element_text(size = 20)) + 
   
  scale_fill_manual(values = c("#264653", "#e9c46a", "#f4a261")) 
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pc_treatment_visit_proportions_plot.png")
``` 

#### Mixed model (hurdle, nested random effect) 
##### nebula

###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_pc <- round(GetAssayData(attempt_so_hvg_pc, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_pc)

# meta_hvg_pc <- attempt_so_hvg_pc@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_pc)
# data_g_hvg_pc = group_cell(count=counts_hvg_pc, id=meta_hvg_pc$subject, pred=pred)
# offset_hvg_pc = Matrix::colSums(data_g_hvg_pc$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_pc_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_pc[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_pc, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_pc_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_pc_results_list_reml_pooled) <- sapply(nebula_pc_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_pc_results_list_reml_pooled <- lapply(nebula_pc_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_pc_results_list_reml_pooled <- Filter(Negate(is.null), nebula_pc_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_pc_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_pc_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PC/nebula/pc_attempt_hvg_nebula_res_reml_pooled.rds')
```


```{r echo = F, eval = F}
# PC subtypes
celltype_vec <- c("tPC-IC", "PC-1", "PC-2")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_pc, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("PC/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

###### REML (not reduced to HVG)

```{r echo = F, eval = T}
counts_pc <- round(GetAssayData(attempt_so_pc, layer = "counts")) # load counts and round
genes_list <- rownames(counts_pc)

# meta_pc <- attempt_so_pc@meta.data
# pred = model.matrix(~treatment*visit, data = meta_pc)
# data_g_pc = group_cell(count=counts_pc, id=meta_pc$subject, pred=pred)
# offset_pc = Matrix::colSums(data_g_pc$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_pc_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_pc[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_pc, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_pc_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_pc_results_list_reml_pooled) <- sapply(nebula_pc_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_pc_results_list_reml_pooled <- lapply(nebula_pc_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_pc_results_list_reml_pooled <- Filter(Negate(is.null), nebula_pc_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_pc_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_pc_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'PC/nebula/pc_attempt_nebula_res_reml_pooled.rds')
```


```{r echo = F}
# PC subtypes
celltype_vec <- c("tPC-IC", "PC-1", "PC-2")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_pc, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("PC/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```


#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)


# IC

```{r echo = F}
# IC-A, IC-B
attempt_so$celltype_ic <- ifelse(attempt_so$celltype %in% c("IC-A", "IC-B"),
                                     "IC", as.character(attempt_so$celltype))
attempt_so_ic <- subset(attempt_so, celltype_ic == "IC")
```

```{r echo = F}
attempt_so_ic <- FindVariableFeatures(attempt_so_ic, selection.method = "vst", nfeatures = 2000)
hvgs_ic <- VariableFeatures(attempt_so_ic)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_ic <- subset(attempt_so_ic, features = hvgs_ic)
```

#### Proportions
```{r echo = F, eval = F}
attempt_ic_meta <- attempt_so_hvg_ic@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_ic_meta$celltype <- factor(attempt_ic_meta$celltype, levels = c("IC-A", "IC-B"))
attempt_ic_meta$visit_treatment <- factor(attempt_ic_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_ic_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ic_treatment_visit_proportions_plot.png")

attempt_ic_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ic_treatment_proportions_plot.png")

attempt_ic_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ic_treatment_visit_proportions_plot.png")
```

#### Mixed model (hurdle, nested random effect)
##### nebula
###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_ic <- round(GetAssayData(attempt_so_hvg_ic, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_ic)

# meta_hvg_ic <- attempt_so_hvg_ic@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_ic)
# data_g_hvg_ic = group_cell(count=counts_hvg_ic, id=meta_hvg_ic$subject, pred=pred)
# offset_hvg_ic = Matrix::colSums(data_g_hvg_ic$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_ic_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_ic[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_ic, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_ic_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_ic_results_list_reml_pooled) <- sapply(nebula_ic_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_ic_results_list_reml_pooled <- lapply(nebula_ic_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_ic_results_list_reml_pooled <- Filter(Negate(is.null), nebula_ic_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_ic_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_ic_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'IC/nebula/ic_attempt_hvg_nebula_res_reml_pooled.rds')
```

```{r echo = F, eval = F}
# IC subtypes
celltype_vec <- c("IC-A", "IC-B")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_ic, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("IC/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

###### REML (not reduced to HVG)

```{r echo = F, eval = T}
counts_ic <- round(GetAssayData(attempt_so_ic, layer = "counts")) # load counts and round
genes_list <- rownames(counts_ic)

# meta_ic <- attempt_so_ic@meta.data
# pred = model.matrix(~treatment*visit, data = meta_ic)
# data_g_ic = group_cell(count=counts_ic, id=meta_ic$subject, pred=pred)
# offset_ic = Matrix::colSums(data_g_ic$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_ic_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_ic[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_ic, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_ic_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_ic_results_list_reml_pooled) <- sapply(nebula_ic_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_ic_results_list_reml_pooled <- lapply(nebula_ic_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_ic_results_list_reml_pooled <- Filter(Negate(is.null), nebula_ic_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_ic_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_ic_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'IC/nebula/ic_attempt_nebula_res_reml_pooled.rds')
```

```{r echo = F}
# IC subtypes
celltype_vec <- c("IC-A", "IC-B")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_ic, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("IC/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)

# EC

```{r echo = F}
attempt_so$celltype_ec <- ifelse(attempt_so$celltype %in% c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"),
                                     "EC", as.character(attempt_so$celltype))
attempt_so_ec <- subset(attempt_so, celltype_ec == "EC")
```

```{r echo = F}
attempt_so_ec <- FindVariableFeatures(attempt_so_ec, selection.method = "vst", nfeatures = 2000)
hvgs_ec <- VariableFeatures(attempt_so_ec)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_ec <- subset(attempt_so_ec, features = hvgs_ec)
```

#### Proportions
```{r echo = F, eval = F}
attempt_ec_meta <- attempt_so_hvg_ec@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_ec_meta$celltype <- factor(attempt_ec_meta$celltype, levels = c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"))
attempt_ec_meta$visit_treatment <- factor(attempt_ec_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_ec_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ec_treatment_visit_proportions_plot.png")

attempt_ec_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ec_treatment_proportions_plot.png")

attempt_ec_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a", "#f4a261"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_ec_treatment_visit_proportions_plot.png")
```

#### Mixed model (hurdle, nested random effect)
##### nebula
###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_ec <- round(GetAssayData(attempt_so_hvg_ec, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_ec)

# meta_hvg_ec <- attempt_so_hvg_ec@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_ec)
# data_g_hvg_ec = group_cell(count=counts_hvg_ec, id=meta_hvg_ec$subject, pred=pred)
# offset_hvg_ec = Matrix::colSums(data_g_hvg_ec$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_ec_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_ec[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_ec, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_ec_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_ec_results_list_reml_pooled) <- sapply(nebula_ec_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_ec_results_list_reml_pooled <- lapply(nebula_ec_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_ec_results_list_reml_pooled <- Filter(Negate(is.null), nebula_ec_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_ec_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_ec_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'EC/nebula/ec_attempt_hvg_nebula_res_reml_pooled.rds')
```


```{r echo = F, eval = F}
# EC subtypes
celltype_vec <- c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_ec, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("EC/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

###### REML (not reduced to HVG)

```{r echo = F, eval = T}
counts_ec <- round(GetAssayData(attempt_so_ec, layer = "counts")) # load counts and round
genes_list <- rownames(counts_ec)

# meta_ec <- attempt_so_ec@meta.data
# pred = model.matrix(~treatment*visit, data = meta_ec)
# data_g_ec = group_cell(count=counts_ec, id=meta_ec$subject, pred=pred)
# offset_ec = Matrix::colSums(data_g_ec$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_ec_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_ec[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_ec, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_ec_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_ec_results_list_reml_pooled) <- sapply(nebula_ec_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_ec_results_list_reml_pooled <- lapply(nebula_ec_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_ec_results_list_reml_pooled <- Filter(Negate(is.null), nebula_ec_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_ec_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_ec_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'EC/nebula/ec_attempt_nebula_res_reml_pooled.rds')
```


```{r echo = F}
# EC subtypes
celltype_vec <- c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_ec, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("EC/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)

# FIB, VSMC/P

```{r echo = F}
attempt_so$celltype_fibvsmc <- ifelse(attempt_so$celltype %in% c("FIB", "VSMC/P"),
                                     "FIBVSMC", as.character(attempt_so$celltype))
attempt_so_fibvsmc <- subset(attempt_so, celltype_fibvsmc == "FIBVSMC")
```

```{r echo = F}
attempt_so_fibvsmc <- FindVariableFeatures(attempt_so_fibvsmc, selection.method = "vst", nfeatures = 2000)
hvgs_fibvsmc <- VariableFeatures(attempt_so_fibvsmc)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_fibvsmc <- subset(attempt_so_fibvsmc, features = hvgs_fibvsmc)
```

#### Proportions
```{r echo = F, eval = F}
attempt_fibvsmc_meta <- attempt_so_hvg_fibvsmc@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_fibvsmc_meta$celltype <- factor(attempt_fibvsmc_meta$celltype, levels = c("FIB", "VSMC/P"))
attempt_fibvsmc_meta$visit_treatment <- factor(attempt_fibvsmc_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_fibvsmc_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_fibvsmc_treatment_visit_proportions_plot.png")

attempt_fibvsmc_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_fibvsmc_treatment_proportions_plot.png")

attempt_fibvsmc_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_fibvsmc_treatment_visit_proportions_plot.png")
```

#### Mixed model (hurdle, nested random effect)
##### nebula
###### REML with rounded counts & pooled offset

```{r echo = F, eval = F}
counts_hvg_fibvsmc <- round(GetAssayData(attempt_so_hvg_fibvsmc, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_fibvsmc)

# meta_hvg_fibvsmc <- attempt_so_hvg_fibvsmc@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_fibvsmc)
# data_g_hvg_fibvsmc = group_cell(count=counts_hvg_fibvsmc, id=meta_hvg_fibvsmc$subject, pred=pred)
# offset_hvg_fibvsmc = Matrix::colSums(data_g_hvg_fibvsmc$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_fibvsmc_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_fibvsmc[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_fibvsmc, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_fibvsmc_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_fibvsmc_results_list_reml_pooled) <- sapply(nebula_fibvsmc_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_fibvsmc_results_list_reml_pooled <- lapply(nebula_fibvsmc_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_fibvsmc_results_list_reml_pooled <- Filter(Negate(is.null), nebula_fibvsmc_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_fibvsmc_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_fibvsmc_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'FIBVSMCP/nebula/fibvsmc_attempt_hvg_nebula_res_reml_pooled.rds')
```


```{r echo = F, eval = F}
# FIBVSMCP subtypes
celltype_vec <- c("FIB", "VSMC/P")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_hvg_fibvsmc, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("FIBVSMCP/%s/nebula/%s_nebula_res_reml_pooled.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

###### REML with rounded counts & pooled offset

```{r echo = F, eval = T}
counts_fibvsmc <- round(GetAssayData(attempt_so_fibvsmc, layer = "counts")) # load counts and round
genes_list <- rownames(counts_fibvsmc)

# meta_fibvsmc <- attempt_so_fibvsmc@meta.data
# pred = model.matrix(~treatment*visit, data = meta_fibvsmc)
# data_g_fibvsmc = group_cell(count=counts_fibvsmc, id=meta_fibvsmc$subject, pred=pred)
# offset_fibvsmc = Matrix::colSums(data_g_fibvsmc$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_fibvsmc_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_fibvsmc[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_fibvsmc, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_fibvsmc_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_fibvsmc_results_list_reml_pooled) <- sapply(nebula_fibvsmc_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_fibvsmc_results_list_reml_pooled <- lapply(nebula_fibvsmc_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_fibvsmc_results_list_reml_pooled <- Filter(Negate(is.null), nebula_fibvsmc_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_fibvsmc_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_fibvsmc_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'FIBVSMCP/nebula/fibvsmc_attempt_nebula_res_reml_pooled.rds')
```


```{r echo = F}
# FIBVSMCP subtypes
celltype_vec <- c("FIB", "VSMC/P")

cl <- makeCluster(100)
registerDoParallel(cl)

overall_start_time <- Sys.time()
nebula_results_by_subtype <- vector("list", length(celltype_vec))
names(nebula_results_by_subtype) <- celltype_vec

for (ct in celltype_vec) {

  message("===== Running Nebula for ", ct, " =====")

  so_ct <- subset(attempt_so_fibvsmc, celltype == ct)

  counts_ct   <- round(GetAssayData(so_ct, layer = "counts"))
  genes_list  <- rownames(counts_ct)
  meta_ct     <- so_ct@meta.data

  ## Run your original foreach loop
  nebula_res_list <- foreach(
    g = genes_list, .packages = c("nebula", "Matrix"),
    .errorhandling = "pass"
  ) %dopar% {

    warn <- err <- res <- NULL
    tryCatch({
      meta_gene <- subset(so_ct, features = g)@meta.data
      count_gene <- counts_ct[g, , drop = FALSE]
      pred_gene  <- model.matrix(~ treatment * visit, data = meta_gene)
      data_gene  <- group_cell(count = count_gene,
                               id    = meta_gene$subject_id,
                               pred  = pred_gene)

      res <- withCallingHandlers(
        nebula(
          count  = data_gene$count,
          id     = data_gene$id,
          pred   = data_gene$pred,
          ncore  = 1,
          output_re  = TRUE,
          covariance = TRUE,
          reml   = 1,
          model  = "NBLMM",
          offset = meta_gene$pooled_offset
        ),
        warning = function(w) {
          warn <<- conditionMessage(w)
          invokeRestart("muffleWarning")
        }
      )
    }, error = function(e) {
      err <<- conditionMessage(e)
    })
    list(gene = g, result = res, warning = warn, error = err)
  }

  ## Post-process & save
  names(nebula_res_list) <- vapply(nebula_res_list, `[[`, "", "gene")
  nebula_res_list <- lapply(nebula_res_list, `[[`, "result")
  nebula_res_list <- Filter(Negate(is.null), nebula_res_list)

  nebula_results_by_subtype[[ct]] <- nebula_res_list

  pct_nonconv <- (length(genes_list) - length(nebula_res_list)) / length(genes_list)
  message(sprintf("%.2f%% models failed to converge for %s",
                  100 * pct_nonconv, ct))

  tmp <- tempfile(fileext = ".rds")
  saveRDS(nebula_res_list, tmp)
  s3_key <- sprintf("FIBVSMCP/%s/nebula/%s_nebula_res_reml_pooled_full.rds", ct, ct)
  s3$upload_file(tmp, "attempt", s3_key)
}

stopCluster(cl)
overall_end_time <- Sys.time()
print(overall_end_time - overall_start_time)
```

#### Average expression (pseudo-bulk within individual)

#### Sum expression (pseudo-bulk within individual)


# POD

```{r echo = F}
attempt_so$celltype_pod <- ifelse(attempt_so$celltype %in% c("POD"),
                                     "POD", as.character(attempt_so$celltype))
attempt_so_pod <- subset(attempt_so, celltype_pod == "POD")
```

```{r echo = F}
attempt_so_pod <- FindVariableFeatures(attempt_so_pod, selection.method = "vst", nfeatures = 2000)
hvgs_pod <- VariableFeatures(attempt_so_pod)

# Perform remaining steps on top 2000 hvgs
# Subset Seurat object to only HVGs
attempt_so_hvg_pod <- subset(attempt_so_pod, features = hvgs_pod)
```

#### Proportions
```{r echo = F, eval = T}
attempt_pod_meta <- attempt_so_hvg_pod@meta.data %>%
  mutate(visit_treatment = paste0(visit, " ", treatment))
attempt_pod_meta$celltype <- factor(attempt_pod_meta$celltype, levels = c("POD"))
attempt_pod_meta$visit_treatment <- factor(attempt_pod_meta$visit_treatment, 
                                          levels = c("PRE Placebo", "POST Placebo",
                                                     "PRE Dapagliflozin", "POST Dapagliflozin"))
attempt_pod_meta %>%
  ggplot(aes(visit, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pod_treatment_visit_proportions_plot.png")

attempt_pod_meta %>%
  ggplot(aes(treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pod_treatment_proportions_plot.png")

attempt_pod_meta %>%
  ggplot(aes(visit_treatment, fill = celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = "Cell type") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 20)) +
  
  scale_fill_manual(values = c("#264653", "#2a9d8f"))
temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, height = 10, width = 8)
s3$upload_file(temp_file, "attempt", "Figures/Proportions/attempt_pod_treatment_visit_proportions_plot.png")
```

#### Mixed model (hurdle, nested random effect)
##### nebula
###### REML with rounded counts & pooled offset

```{r echo = F, eval = T}
counts_hvg_pod <- round(GetAssayData(attempt_so_hvg_pod, layer = "counts")) # load counts and round
genes_list <- rownames(counts_hvg_pod)

# meta_hvg_pod <- attempt_so_hvg_pod@meta.data
# pred = model.matrix(~treatment*visit, data = meta_hvg_pod)
# data_g_hvg_pod = group_cell(count=counts_hvg_pod, id=meta_hvg_pod$subject, pred=pred)
# offset_hvg_pod = Matrix::colSums(data_g_hvg_pod$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_pod_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_hvg_pod[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_hvg_pod, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_pod_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_pod_results_list_reml_pooled) <- sapply(nebula_pod_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_pod_results_list_reml_pooled <- lapply(nebula_pod_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_pod_results_list_reml_pooled <- Filter(Negate(is.null), nebula_pod_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_pod_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_pod_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'POD/nebula/pod_attempt_hvg_nebula_res_reml_pooled.rds')
```

###### REML with rounded counts & pooled offset

```{r echo = F, eval = T}
counts_pod <- round(GetAssayData(attempt_so_pod, layer = "counts")) # load counts and round
genes_list <- rownames(counts_pod)

# meta_pod <- attempt_so_pod@meta.data
# pred = model.matrix(~treatment*visit, data = meta_pod)
# data_g_pod = group_cell(count=counts_pod, id=meta_pod$subject, pred=pred)
# offset_pod = Matrix::colSums(data_g_pod$count) 

cl <- makeCluster(100)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_pod_results_list_reml_pooled <- foreach(g = genes_list, .packages = c("nebula", "Matrix"),
                                       .errorhandling = "pass") %dopar% {
  warn <- NULL
  err <- NULL
  res <- NULL
  
  tryCatch({
    count_gene <- counts_pod[g, , drop = FALSE]
    meta_gene <- subset(attempt_so_pod, features = g)@meta.data
    pred_gene <- model.matrix(~treatment * visit, data = meta_gene)
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$subject_id, pred = pred_gene)

    res <- withCallingHandlers({
      nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred,
             ncore = 1, output_re = TRUE, covariance = TRUE, reml = 1, model = "NBLMM", 
             offset = meta_gene$pooled_offset)
    }, warning = function(w) {
      warn <<- conditionMessage(w)
      invokeRestart("muffleWarning")
    })

  }, error = function(e) {
    err <<- conditionMessage(e)
  })

  list(gene = g, result = res, warning = warn, error = err)
}

## After the loop:
for (res in nebula_pod_results_list_reml_pooled) {
  if (!is.null(res$warning)) cat(sprintf("Warning for gene %s: %s\n", res$gene, res$warning))
  if (!is.null(res$error)) cat(sprintf("Error for gene %s: %s\n", res$gene, res$error))
}


# set the names of results based on gene names
names(nebula_pod_results_list_reml_pooled) <- sapply(nebula_pod_results_list_reml_pooled, function(x) x$gene)  # set names
nebula_pod_results_list_reml_pooled <- lapply(nebula_pod_results_list_reml_pooled, function(x) x$result)  # clean list back to just results
nebula_pod_results_list_reml_pooled <- Filter(Negate(is.null), nebula_pod_results_list_reml_pooled)  # remove NULLs first

end_time <- Sys.time()
print(end_time - start_time)
stopCluster(cl)

nebula_nonconverged_percent <- (length(genes_list)-length(nebula_pod_results_list_reml_pooled))/length(genes_list)
print(paste0(nebula_nonconverged_percent*100, "% filtered due to low expression"))
temp_file <- tempfile(fileext = "rds") # need to create a temporary file
saveRDS(nebula_pod_results_list_reml_pooled, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, "attempt", 'POD/nebula/pod_attempt_nebula_res_reml_pooled.rds')
```


# KPMP Cell types Nebula

```{r echo = F}
source("/mmfs1/gscratch/togo/yejichoi/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
# --- cell type groups
celltype_groups <- list(
  # PT = c("PT-S1/S2", "PT-S3", "aPT"),
  TAL = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),
  PC = c("CCD-PC", "CNT-PC", "dCCD-PC", "M-PC", "tPC-IC"),
  # EC = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC"),
  # IC = c("IC-A", "IC-B", "aIC"),
  # Immune = c("MAC", "MON", "cDC", "pDC", "CD4+ T", "CD8+ T", "B", "NK"),
  # Immune_myeloid = c("MAC", "MON", "cDC", "pDC"),
  # Immune_lymphoid = c("CD4+ T", "CD8+", "T", "B", "NK"),
  # VSMC_P_FIB = c("VSMC/P", "FIB"),
  # POD = "POD"
)

all_listed_celltypes <- unique(unlist(celltype_groups))

# --- Initialize result list
nebula_kpmp_results_list_reml_pooled <- list()

# --- Helper function to run HVG + ALL analysis
run_for_subset <- function(so_subset, label) {
  # --- HVG selection for this subset
  # so_hvg <- FindVariableFeatures(so_subset, selection.method = "vst", nfeatures = 2000)
  # hvgs <- VariableFeatures(so_hvg)
  # so_hvg <- subset(so_subset, features = hvgs)

  # # --- HVG run
  # res_hvg <- run_nebula_parallel(
  #   seurat_obj = so_hvg,
  #   n_cores = 100,
  #   s3_bucket = "attempt",
  #   s3_key = paste0(label, "/HVG/nebula/", gsub("/", "_", tolower(label)),
  #                   "_kpmp_attempt_nebula_res_reml_pooled.rds")
  # )

  # --- ALL run
  res_all <- run_nebula_parallel(
    seurat_obj = so_subset,
    n_cores = 50,
    s3_bucket = "attempt",
    s3_key = paste0(label, "/ALL/nebula/", gsub("/", "_", tolower(label)),
                    "_kpmp_attempt_nebula_res_reml_pooled.rds")
  )

  list(
    # HVG = res_hvg, 
       ALL = res_all)
}

# --- Loop through each cell type group
for (grp_name in names(celltype_groups)) {
  message("Processing group: ", grp_name)

  so_subset <- subset(attempt_so, idents = celltype_groups[[grp_name]])
  res_list <- run_for_subset(so_subset, paste0("grouped/", grp_name))

  nebula_kpmp_results_list_reml_pooled[[paste0(grp_name, "_group")]] <- res_list
}

# # --- Loop through each individual cell type
# for (ct in all_listed_celltypes) {
#   message("Processing individual cell type: ", ct)
#   
#   so_subset <- subset(attempt_so, idents = ct)
#   res_list <- run_for_subset(so_subset, paste0("individual/", ct))
#   
#   nebula_kpmp_results_list_reml_pooled[[paste0(ct, "_individual")]] <- res_list
# }
```

```{r echo = F}
# --- cell type groups
celltype_groups <- list(
  EPI_combined = c("PT-S1/S2", "PT-S3", "aPT", "ATL", "DTL", "aDTL", "dTAL", "aTAL", "C-TAL-1", "C-TAL-2", "DCT", "dDCT", "CNT", "CNT-PC", "CCD-PC", "dCCD-PC", "M-PC", "IC-A", "IC-B", "aIC", "tPC-IC", "POD", "PEC", "MC"),
  ENDO_GLOM_VSMC_combined = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC", "POD", "MC", "VSMC/P")
)

all_listed_celltypes <- unique(unlist(celltype_groups))

# --- Initialize result list
nebula_kpmp_results_list_reml_pooled <- list()

# --- Helper function to run HVG + ALL analysis
run_for_subset <- function(so_subset, label) {
  # --- HVG selection for this subset
  so_hvg <- FindVariableFeatures(so_subset, selection.method = "vst", nfeatures = 2000)
  hvgs <- VariableFeatures(so_hvg)
  so_hvg <- subset(so_subset, features = hvgs)

  # --- HVG run
  res_hvg <- run_nebula_parallel(
    seurat_obj = so_hvg,
    n_cores = 50,
    s3_bucket = "attempt",
    s3_key = paste0(label, "/HVG/nebula/", gsub("/", "_", tolower(label)),
                    "_kpmp_attempt_nebula_res_reml_pooled.rds")
  )

  # --- ALL run
  res_all <- run_nebula_parallel(
    seurat_obj = so_subset,
    n_cores = 50,
    s3_bucket = "attempt",
    s3_key = paste0(label, "/ALL/nebula/", gsub("/", "_", tolower(label)),
                    "_kpmp_attempt_nebula_res_reml_pooled.rds")
  )

  list(
    # HVG = res_hvg, 
       ALL = res_all)
}

# --- Loop through each cell type group
for (grp_name in names(celltype_groups)) {
  message("Processing group: ", grp_name)

  so_subset <- subset(attempt_so, idents = celltype_groups[[grp_name]])
  res_list <- run_for_subset(so_subset, paste0("grouped/", grp_name))

  nebula_kpmp_results_list_reml_pooled[[paste0(grp_name, "_group")]] <- res_list
}

# --- Loop through each individual cell type
for (ct in all_listed_celltypes) {
  message("Processing individual cell type: ", ct)

  so_subset <- subset(attempt_so, idents = ct)
  res_list <- run_for_subset(so_subset, paste0("individual/", ct))

  nebula_kpmp_results_list_reml_pooled[[paste0(ct, "_individual")]] <- res_list
}
```

# Proteomics specific cell types
```{r echo = F}
urine_celltype_groups <- list(
  PT = c("PT-S1/S2", "PT-S3", "aPT"),  # Proximal tubule
  TAL = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),  # Thick ascending limb
  DCT = c("DCT", "dDCT"),  # Distal convoluted tubule
  CD = c("CCD-PC", "dCCD-PC", "CNT-PC", "tPC-IC", "MC", "aIC", "IC-A", "IC-B", "CNT"),  # Collecting duct & connecting tubule
  POD = c("POD")  # Podocytes
)
urine_celltype_groups$Combined_u <- c(
  urine_celltype_groups$PT,
  urine_celltype_groups$TAL,
  urine_celltype_groups$DCT,
  urine_celltype_groups$CD,
  urine_celltype_groups$POD
)
urine_celltype_groups <- urine_celltype_groups[!(names(urine_celltype_groups) %in% c("PT", "DCT", "TAL", "POD"))]

attempt_so_urine_subsets <- make_subsets(attempt_so, urine_celltype_groups, celltype_col = "KPMP_celltype", prefix = "attempt_so_")

plasma_celltype_groups <- list(
  EC = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC/VSMC", "EC-LYM"),
  Glom  = c("POD", "MC", "M-PC"),
  VSMC        = c("VSMC/P", "EC/VSMC"),
  Immune      = c("CD4+ T", "CD8+ T", "B", "NK", "MAC", "MON", "cDC", "pDC")
)
# Now add combined group
plasma_celltype_groups$Combined_p <- c(
  plasma_celltype_groups$EC,
  plasma_celltype_groups$Glom,
  plasma_celltype_groups$VSMC,
  plasma_celltype_groups$Immune
)

plasma_celltype_groups <- plasma_celltype_groups[!(names(plasma_celltype_groups) %in% c("EC", "Immune"))]

attempt_so_plasma_subsets <- make_subsets(attempt_so, plasma_celltype_groups, celltype_col = "KPMP_celltype", prefix = "attempt_so_")

proteomics_celltypes <- c(urine_celltype_groups, plasma_celltype_groups)
```

```{r echo = F}
# --- Initialize result list
nebula_kpmp_proteomics_specific <- list()

# --- Helper function to run HVG + ALL analysis
run_for_subset <- function(so_subset, label) {
  # # --- HVG selection for this subset
  # so_hvg <- FindVariableFeatures(so_subset, selection.method = "vst", nfeatures = 2000)
  # hvgs <- VariableFeatures(so_hvg)
  # so_hvg <- subset(so_subset, features = hvgs)
  # 
  # # --- HVG run
  # res_hvg <- run_nebula_parallel(
  #   seurat_obj = so_hvg,
  #   n_cores = 50,
  #   s3_bucket = "attempt",
  #   s3_key = paste0(label, "/HVG/nebula/", gsub("/", "_", tolower(label)),
  #                   "_kpmp_attempt_nebula_res_reml_pooled.rds")
  # )

  # --- ALL run
  res_all <- run_nebula_parallel(
    seurat_obj = so_subset,
    n_cores = 10,
    s3_bucket = "attempt",
    s3_key = paste0(label, "/ALL/nebula/", gsub("/", "_", tolower(label)),
                    "_kpmp_attempt_nebula_res_reml_pooled.rds")
  )

  list(
    # HVG = res_hvg, 
       ALL = res_all)
}

# --- Loop through each cell type group
for (grp_name in "Combined_p") {
  message("Processing group: ", grp_name)

  so_subset <- subset(attempt_so, idents = proteomics_celltypes[[grp_name]])
  res_list <- run_for_subset(so_subset, paste0("grouped/", grp_name))

  nebula_kpmp_proteomics_specific[[paste0(grp_name, "_group")]] <- res_list
  gc()
}


```

# Expression

```{r echo = F}
prefixes <- c("pt", "tal", "pc", "ic", "ec", "fibvsmcp", "immune")
mods <- paste0("mod", 1:4)

nonconverged_genes <- setNames(lapply(prefixes, function(prefix) {
  setNames(lapply(mods, function(mod) {
    s3_key <- paste0("Nonconverged genes/", prefix, "_nonconverged_genes_", mod, ".rds")
    temp_file <- tempfile(fileext = ".rds")
    s3$download_file("attempt", s3_key, temp_file)
    readRDS(temp_file)
  }), mods)
}), prefixes)
```

### PT
```{r echo = F}
percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_hvg_pt, features = nonconverged_genes$pt[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_hvg_pt, features = nonconverged_genes$pt[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_hvg_pt, features = nonconverged_genes$pt[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_hvg_pt, features = nonconverged_genes$pt[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
pt_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

pt_nonconverged_summary <- pt_nonconverged_summary[, c(ncol(pt_nonconverged_summary), 1:(ncol(pt_nonconverged_summary)-1))]
colnames(pt_nonconverged_summary) <- gsub("\\.", "", colnames(pt_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(pt_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/pt_nonconverged_summary.rds')


pt_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(pt_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in PT cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/pt_nonconverged_expression_plot.png") 
```

### TAL
```{r echo = F}
percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_hvg_tal, features = nonconverged_genes$tal[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_hvg_tal, features = nonconverged_genes$tal[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_hvg_tal, features = nonconverged_genes$tal[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_hvg_tal, features = nonconverged_genes$tal[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
tal_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

tal_nonconverged_summary <- tal_nonconverged_summary[, c(ncol(tal_nonconverged_summary), 1:(ncol(tal_nonconverged_summary)-1))]
colnames(tal_nonconverged_summary) <- gsub("\\.", "", colnames(tal_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(tal_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/tal_nonconverged_summary.rds')


tal_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(tal_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in TAL cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/tal_nonconverged_expression_plot.png") 
```
### immune
```{r echo = F}
percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_hvg_immune, features = nonconverged_genes$immune[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_hvg_immune, features = nonconverged_genes$immune[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_hvg_immune, features = nonconverged_genes$immune[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_hvg_immune, features = nonconverged_genes$immune[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
immune_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

immune_nonconverged_summary <- immune_nonconverged_summary[, c(ncol(immune_nonconverged_summary), 1:(ncol(immune_nonconverged_summary)-1))]
colnames(immune_nonconverged_summary) <- gsub("\\.", "", colnames(immune_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(immune_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/immune_nonconverged_summary.rds')


immune_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(immune_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in Immune cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/immune_nonconverged_expression_plot.png") 
```
### PC
```{r echo = F}
attempt_so_hvg_pc[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_hvg_pc, features = nonconverged_genes$pc[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_hvg_pc, features = nonconverged_genes$pc[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_hvg_pc, features = nonconverged_genes$pc[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_hvg_pc, features = nonconverged_genes$pc[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_hvg_pc, features = nonconverged_genes$pc[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
pc_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

pc_nonconverged_summary <- pc_nonconverged_summary[, c(ncol(pc_nonconverged_summary), 1:(ncol(pc_nonconverged_summary)-1))]
colnames(pc_nonconverged_summary) <- gsub("\\.", "", colnames(pc_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(pc_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/pc_nonconverged_summary.rds')


pc_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(pc_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in PC cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/pc_nonconverged_expression_plot.png") 
```

### IC
```{r echo = F}
attempt_so_hvg_ic[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_hvg_ic, features = nonconverged_genes$ic[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_hvg_ic, features = nonconverged_genes$ic[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_hvg_ic, features = nonconverged_genes$ic[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_hvg_ic, features = nonconverged_genes$ic[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_hvg_ic, features = nonconverged_genes$ic[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
ic_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

ic_nonconverged_summary <- ic_nonconverged_summary[, c(ncol(ic_nonconverged_summary), 1:(ncol(ic_nonconverged_summary)-1))]
colnames(ic_nonconverged_summary) <- gsub("\\.", "", colnames(ic_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(ic_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/ic_nonconverged_summary.rds')


ic_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(ic_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in IC cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/ic_nonconverged_expression_plot.png") 
```
### EC
```{r echo = F}
attempt_so_hvg_ec[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_hvg_ec, features = nonconverged_genes$ec[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_hvg_ec, features = nonconverged_genes$ec[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_hvg_ec, features = nonconverged_genes$ec[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_hvg_ec, features = nonconverged_genes$ec[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_hvg_ec, features = nonconverged_genes$ec[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
ec_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

ec_nonconverged_summary <- ec_nonconverged_summary[, c(ncol(ec_nonconverged_summary), 1:(ncol(ec_nonconverged_summary)-1))]
colnames(ec_nonconverged_summary) <- gsub("\\.", "", colnames(ec_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(ec_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/ec_nonconverged_summary.rds')


ec_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(ec_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in EC cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/ec_nonconverged_expression_plot.png") 
```
### FIB, VSMC/P
```{r echo = F}
attempt_so_hvg_fibvsmc[["percent.nonconverged.mod1"]] <- PercentageFeatureSet(attempt_so_hvg_fibvsmc, features = nonconverged_genes$fibvsmcp[[1]])

percent.nonconverged.mod1 <- PercentageFeatureSet(attempt_so_hvg_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod1"]])
percent.nonconverged.mod2 <- PercentageFeatureSet(attempt_so_hvg_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod2"]])
percent.nonconverged.mod3 <- PercentageFeatureSet(attempt_so_hvg_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod3"]])
percent.nonconverged.mod4 <- PercentageFeatureSet(attempt_so_hvg_fibvsmc, features = nonconverged_genes$fibvsmcp[["mod4"]])

summary_list <- list(
  "Model 1" = summary(percent.nonconverged.mod1),
  "Model 2" = summary(percent.nonconverged.mod2),
  "Model 3" = summary(percent.nonconverged.mod3),
  "Model 4" = summary(percent.nonconverged.mod4)
)

# Convert each summary vector to a one-row data frame
fibvsmcp_nonconverged_summary <- do.call(rbind, lapply(names(summary_list), function(model_name) {
  stats <- summary_list[[model_name]]
  # Coerce named vector to data.frame (one row)
  df <- as.data.frame(as.list(stats))
  df$Model <- model_name
  return(df)
}))

fibvsmcp_nonconverged_summary <- fibvsmcp_nonconverged_summary[, c(ncol(fibvsmcp_nonconverged_summary), 1:(ncol(fibvsmcp_nonconverged_summary)-1))]
colnames(fibvsmcp_nonconverged_summary) <- gsub("\\.", "", colnames(fibvsmcp_nonconverged_summary))
temp_file <- tempfile(fileext = "rds")
saveRDS(fibvsmcp_nonconverged_summary, temp_file)
s3$upload_file(temp_file, "attempt", 'Nonconverged genes/fibvsmcp_nonconverged_summary.rds')


fibvsmcp_nonconverged_df <- rbind(data.frame(expression = percent.nonconverged.mod1, model = "Model 1"), 
                            data.frame(expression = percent.nonconverged.mod2, model = "Model 2"), 
                            data.frame(expression = percent.nonconverged.mod3, model = "Model 3"), 
                            data.frame(expression = percent.nonconverged.mod4, model = "Model 4"))

ggplot(fibvsmcp_nonconverged_df, aes(x = model, y = expression, color = model)) +
  geom_hline(yintercept = 5, linetype = "dashed", color = "#fca311") +
  geom_jitter(alpha = 0.1, shape = 21, stroke = 0, size = 5, aes(fill = model)) + 
  geom_boxplot(outliers = F, width = 0.6, linewidth = 1.25, aes(fill = model)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        text = element_text(size = 15)) +
  labs(x = "Model", y = "% Expression",
       title = "% Expression of nonconverged genes in FIB, VSMC/P cells") +
  guides(color = "none",
         fill = "none") +
  scale_color_manual(values = c("#588157", "#55828b", 
                                "#f79d65", "#e26d5c")) +
  scale_fill_manual(values = c("#7BA179", "#76A0A9", 
                                "#FAB889", "#EB8B7E"))

temp_file <- tempfile(fileext = ".png")
ggsave(temp_file, width = 10)
s3$upload_file(temp_file, "attempt", "Figures/nonconverged/fibvsmcp_nonconverged_expression_plot.png") 
```

# HVGs (union)
```{r echo = F}
hvgs_union <- unique(c(hvgs_ec, hvgs_fibvsmc, hvgs_ic, hvgs_immune, hvgs_pc, hvgs_pt, hvgs_tal))
length(hvgs_union)
```

# Dot plot of markers
```{r echo = F}
FindMarkers(subset(attempt_so_raw, treatment == "Placebo"), group.by = "visit",
            ident.1 = "POST", ident.2 = "PRE", features = "HAVCR1", min.pct = 0, logfc.threshold = 0)

FindMarkers(subset(attempt_so_raw, treatment == "Dapagliflozin 5mg"), group.by = "visit",
            ident.1 = "POST", ident.2 = "PRE", features = "HAVCR1", min.pct = 0, logfc.threshold = 0)

attempt_so$treatment_visit <- paste0(attempt_so$treatment, "_", attempt_so$visit)

markers <- c("CD24", "PROM1", "VCAM1", "CST3")

DotPlot(object = subset(attempt_so, KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")),
        features = markers,
        group.by = "treatment_visit")

DotPlot(object = subset(attempt_so, KPMP_celltype %in% c("PT-S1/S2")),
        features = markers,
        group.by = "treatment_visit")

DotPlot(object = subset(attempt_so, KPMP_celltype %in% c("PT-S3")),
        features = markers,
        group.by = "treatment_visit")

DotPlot(object = subset(attempt_so, KPMP_celltype %in% c( "aPT")),
        features = markers,
        group.by = "treatment_visit")
```
