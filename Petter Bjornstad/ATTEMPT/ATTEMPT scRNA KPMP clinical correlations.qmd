---
title: "ATTEMPT scRNA (KPMP) correlations"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r echo = F, include = F}
library(arsenal)
library(Biobase)
library(BiocGenerics)
library(BiocParallel)
library(broom.mixed)
library(colorspace)
library(cowplot)
library(data.table)
library(DirichletReg)
library(dplyr)
library(edgeR)
library(emmeans)
library(enrichR)
library(foreach)
library(future)
library(future.apply)
library(GSEABase)
library(ggdendro)
library(ggpubr)
library(glmmTMB)
library(harmony)
library(jsonlite)
library(kableExtra)
library(limma)
library(MAST)
library(Matrix)
library(msigdbr)
library(muscat)
library(NMF)
library(nebula)
library(patchwork)
library(pheatmap)
library(readxl)
library(REDCapR)
library(reshape2)
library(rstatix)
library(SAVER)
# library(scDC)
library(scater)
library(scran)
library(Seurat)
library(SingleCellExperiment)
library(slingshot)
library(tidyverse)
library(UpSetR)
library(WriteXLS)
library(parallel)
library(doParallel)
library(quantreg)
source("/mmfs1/gscratch/togo/yejichoi/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
```


```{r include = F}
reticulate::use_python("/mmfs1/gscratch/togo/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")
```


```{r echo = F, eval = T}
# Read in clean seurat object saved
temp_file <- tempfile(fileext = ".rds")
s3$download_file("attempt", 'cleaned_data/attempt_clean_so.rds', temp_file)
attempt_so <- readRDS(temp_file)
``` 

```{r echo = F}
celltype_groups <- list(
  PT = c("PT-S1/S2", "PT-S3", "aPT"),
  TAL = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),
  PC = c("CCD-PC", "CNT-PC", "dCCD-PC", "M-PC", "tPC-IC"),
  EC = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC"),
  IC = c("IC-A", "IC-B", "aIC"),
  Immune = c("MAC", "MON", "cDC", "pDC", "CD4+ T", "CD8+ T", "B", "NK"),
  Immune_myeloid = c("MAC", "MON", "cDC", "pDC"),
  Immune_lymphoid = c("CD4+ T", "CD8+ T", "B", "NK"),
  VSMC_P_FIB = c("VSMC/P", "FIB"),
  POD = "POD"
)

clin_vars <- c("mgfr_jodal_delta", "mgfr_jodal_bsa_delta", "tir_delta", 
               "hba1c_delta", "weight_delta", "avg_c_r2_delta", "avg_k_r2_delta",
               "avg_ketones_delta")

attempt_so_subsets <- make_subsets(attempt_so, celltype_groups, celltype_col = "KPMP_celltype", prefix = "attempt_so_")
```

# PT

```{r echo = F, eval = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_pt,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["PT"]],
    s3 = s3, s3_bucket = "attempt"
  )

  assign(paste0(vars, "_pt_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

# TAL

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_tal,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["TAL"]],
    s3 = s3, s3_bucket = "attempt"
  )

  assign(paste0(vars, "_tal_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```


# PC

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_pc,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["PC"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_pc_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

# IC

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_ic,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["IC"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_ic_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

# POD

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_pod,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["POD"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_pod_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```


# VSMC_P_FIB

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_vsmc_p_fib,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["VSMC_P_FIB"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_vsmc_p_fib_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

# EC

```{r echo = F}
clin_vars <- c("mgfr_jodal_delta", "mgfr_jodal_bsa_delta")

start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_ec,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["EC"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_ec_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

```{r echo = F}
# EC-GC
attempt_so_ec_gc <- subset(attempt_so, KPMP_celltype == "EC-GC")
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_ec_gc,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = "EC-GC",
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_ec_gc_res"), nb_results)
  
  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}

```

# Immune

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_immune,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["Immune"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_immune_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

# Immune myeloid

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_immune_myeloid,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["Immune_myeloid"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_immune_myeloid_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

# Immune lymphoid

```{r echo = F}
start_time <- Sys.time()

for (vars in clin_vars) {
  iter_start <- Sys.time()
  message("[", format(iter_start, "%Y-%m-%d %H:%M:%S"), "] Processing: ", vars)

  nb_results <- run_nebula_for_clinvar(
    seurat_obj = attempt_so_immune_lymphoid,
    clinical_var = vars,
    celltype_var = "KPMP_celltype",
    celltype_values = celltype_groups[["Immune_lymphoid"]],
    s3 = s3, s3_bucket = "attempt",
    workers = 100
  )

  assign(paste0(vars, "_immune_lymphoid_res"), nb_results)

  iter_end <- Sys.time()
  message("    Finished: ", vars,
          " | Elapsed: ", round(as.numeric(difftime(iter_end, iter_start, units = "mins")), 2), " min",
          " | Total runtime: ", round(as.numeric(difftime(iter_end, start_time, units = "mins")), 2), " min")
}
```

