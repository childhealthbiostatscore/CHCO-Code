---
title: "ATTEMPT CROCODILE comparison nebula visualization (KPMP celltype)"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r echo = F, include = F}
library(dplyr)
library(kableExtra)
library(knitr)
library(ggplot2)
library(purrr)
library(tidyr)
library(stats)
library(patchwork)
library(UpSetR)
library(readxl)
library(fgsea)
library(ReactomeGSA)
library(GSEABase)
library(enrichplot)
library(enrichR)
library(ggrepel)
library(forcats)
library(stringr)
library(jsonlite)
library(aws.s3)
source("~/GitHub/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
```

```{r include = F}
## Create an S3 client
keys <- fromJSON("/Users/choiyej/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Bjornstad Pyle Lab/keys.json")

Sys.setenv(
  "AWS_ACCESS_KEY_ID" = keys$MY_ACCESS_KEY,
  "AWS_SECRET_ACCESS_KEY" = keys$MY_SECRET_KEY,
  "AWS_DEFAULT_REGION" = "",
  "AWS_REGION" = "",
  "AWS_S3_ENDPOINT" = "s3.kopah.uw.edu"
)
```


```{r echo = F}
## read mixed model results dataframe (rendered in Hyak)
# process and read all results from CROCODILE (limited to significant results from ATTEMPT non-HVG model)

celltype_groups <- list(
  PT = c("PT-S1/S2", "PT-S3", "aPT"),
  TAL = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),
  PC = c("CCD-PC", "CNT-PC", "dCCD-PC", "M-PC", "tPC-IC"),
  EC = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC"),
  IC = c("IC-A", "IC-B", "aIC"),
  Immune = c("MAC", "MON", "cDC", "pDC", "CD4+ T", "CD8+ T", "B", "NK"),
  Immune_myeloid = c("MAC", "MON", "cDC", "pDC"),
  Immune_lymphoid = c("CD4+ T", "CD8+ T", "B", "NK"),
  VSMC_P_FIB = c("VSMC/P", "FIB"),
  POD = "POD"
)

# Top 2000 HVG
for (cell in names(celltype_groups))  {
  input_path <- paste0("/CROCODILE comparison analysis/", toupper(cell), "/nebula/", tolower(cell),"_kpmp_croc_hvg.rds")
  cell_df <- s3readRDS(input_path, bucket = "attempt", region = "")
  
  processed <- process_nebula_results(cell_df, pval_col = "p_groupType_1_Diabetes")
  lower_cell <- tolower(cell)
  var_name <- paste0(lower_cell, "_croc_untargeted_res_hvg")
  
  assign(var_name, processed$results)
  
  write.csv(processed$results, paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/nebula/", tolower(cell), "_kpmp_croc_hvg_res.csv"), row.names = F)
}

# Targeted
for (cell in names(celltype_groups))  {
  input_path <- paste0("/CROCODILE comparison analysis/", toupper(cell), "/nebula/", tolower(cell),"_kpmp_croc_attempt_targeted.rds")
  cell_df <- s3readRDS(input_path, bucket = "attempt", region = "")
  
  processed <- process_nebula_results(cell_df, pval_col = "p_groupType_1_Diabetes")
  lower_cell <- tolower(cell)
  var_name <- paste0(lower_cell, "_croc_targeted_res")
  
  assign(var_name, processed$results)
  
  write.csv(processed$results, paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/nebula/", tolower(cell), "_kpmp_croc_targeted_res.csv"), row.names = F)
}
```

```{r echo = F}
## read mixed model results dataframe (rendered in Hyak)
# process and read all results from ATTEMPT
celltype_groups <- list(
  PT = c("PT-S1/S2", "PT-S3", "aPT"),
  TAL = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),
  PC = c("CCD-PC", "CNT-PC", "dCCD-PC", "M-PC", "tPC-IC"),
  EC = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC"),
  IC = c("IC-A", "IC-B", "aIC"),
  Immune = c("MAC", "MON", "cDC", "pDC", "CD4+ T", "CD8+ T", "B", "NK"),
  Immune_myeloid = c("MAC", "MON", "cDC", "pDC"),
  Immune_lymphoid = c("CD4+ T", "CD8+ T", "B", "NK"),
  VSMC_P_FIB = c("VSMC/P", "FIB"),
  POD = "POD"
)
for (cell in names(celltype_groups))  {
  input_path <- paste0("grouped/", cell, "/ALL/nebula/", "grouped_", tolower(cell), "_kpmp_attempt_nebula_res_reml_pooled.rds")
  cell_df <- s3readRDS(input_path, bucket = "attempt", region = "")

  processed <- process_nebula_results(cell_df)
  
  # Join annotation
  annotated_df <- processed$results

  # Assign to variable dynamically
  var_name <- paste0(tolower(cell), "_kpmp")
  assign(var_name, annotated_df, envir = .GlobalEnv)

}
```

## Volcano plots

### Targeted

```{r echo = F}
for (cell in names(celltype_groups)) {
  message("Processing: ", cell)
  plot_croc_attempt_volcano(
    attempt_df = get(paste0(tolower(cell), "_kpmp")),
    croc_df = get(paste0(tolower(cell), "_croc_targeted_res")),
    cell_type = cell,
    top_n = 20,
    save_path = paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/CROCODILE comparison/Volcano Plots/kpmp_", tolower(cell), "_targeted_volcano_attempt_directions_labeled.png")
  )
}
```

```{r echo = F}
for (cell in names(celltype_groups)) {
  message("Processing: ", cell)
  plot_volcano(
    data = get(paste0(tolower(cell), "_croc_targeted_res")),
    fc = "logFC_groupType_1_Diabetes", 
    p_col = "p_groupType_1_Diabetes",
    title = NULL,
    x_axis = "logFC group (Type 1 Diabetes)", 
    y_axis = "-log10(p-value)",
    file_suffix = paste0("CROCODILE comparison analysis/kpmp_", tolower(cell), "_croc_pvalue_nebula_reml_offset"), 
    cell_type = cell
  )
  
    plot_volcano(
    data = get(paste0(tolower(cell), "_croc_targeted_res")),
    fc = "logFC_groupType_1_Diabetes", 
    p_col = "fdr",
    title = NULL,
    x_axis = "logFC group (Type 1 Diabetes)", 
    y_axis = "-log10(FDR adjusted p-value)",
    file_suffix = paste0("CROCODILE comparison analysis/kpmp_", tolower(cell), "_croc_fdr_nebula_reml_offset"), 
    cell_type = cell
  )
}
```

### Untargeted

```{r echo = F}
for (cell in names(celltype_groups)) {
  message("Processing: ", cell)
  plot_croc_attempt_volcano(
    attempt_df = get(paste0(tolower(cell), "_kpmp")),
    croc_df = get(paste0(tolower(cell), "_croc_untargeted_res_hvg")),
    cell_type = cell,
    top_n = 20,
    save_path = paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/CROCODILE comparison/Volcano Plots/kpmp_", tolower(cell), "_untargeted_volcano_attempt_directions_labeled.png")
  )
}
```

```{r echo = F}
for (cell in names(celltype_groups)) {
  message("Processing: ", cell)
  plot_volcano(
    data = get(paste0(tolower(cell), "_croc_untargeted_res_hvg")),
    fc = "logFC_groupType_1_Diabetes", 
    p_col = "p_groupType_1_Diabetes",
    title = NULL,
    x_axis = "logFC group (Type 1 Diabetes)", 
    y_axis = "-log10(p-value)",
    file_suffix = paste0("CROCODILE comparison analysis/kpmp_", tolower(cell), "_croc_pvalue_nebula_reml_offset"), 
    cell_type = cell
  )
  
    plot_volcano(
    data = get(paste0(tolower(cell), "_croc_untargeted_res_hvg")),
    fc = "logFC_groupType_1_Diabetes", 
    p_col = "fdr",
    title = NULL,
    x_axis = "logFC group (Type 1 Diabetes)", 
    y_axis = "-log10(FDR adjusted p-value)",
    file_suffix = paste0("CROCODILE comparison analysis/kpmp_", tolower(cell), "_croc_fdr_nebula_reml_offset"), 
    cell_type = cell
  )
}
```
# Dot plots

```{r echo = F}
for (cell in names(celltype_groups)) {
  message("Processing: ", cell)
  
  top_n = 50
  target_n = top_n*2
  croc_attempt_df <- create_croc_attempt_df(attempt_df = get(paste0(tolower(cell), "_kpmp")),
                                            croc_df = get(paste0(tolower(cell), "_croc_targeted_res")),
                                            cell_type = cell)
  
  n_reversed = croc_attempt_df %>%
    filter(direction == "reversed") %>%
    nrow()
  
  n_nonreversed = croc_attempt_df %>%
    filter(direction == "non-reversed") %>%
    nrow()
  
  croc_attempt_df <- croc_attempt_df %>%
    filter(direction == "reversed") %>%
    arrange(p.val_croc) %>%
    head(n = top_n) %>%
    pivot_longer(
      cols = c(logFC_attempt, p.val_attempt, logFC_croc, p.val_croc),
      names_to = c(".value", "study"),
      names_pattern = "(logFC|p.val)_(.*)"
    ) %>%
    group_by(Gene) %>%
    mutate(diff_logFC = logFC[study == "attempt"] - logFC[study == "croc"]) %>%
    ungroup() 
  
if (nrow(croc_attempt_df) < target_n) {
  n_add <- (target_n - nrow(croc_attempt_df))/2
  placeholder_genes <- paste0(seq_len(n_add))
  # keep types stable, esp. for factor `study`
  study_pad <- if (is.factor(croc_attempt_df$study)) {
    factor(rep("croc", n_add), levels = levels(croc_attempt_df$study))
  } else {
    rep("croc", n_add)
  }
  
  pad_rows <- tibble(
    Gene       = placeholder_genes,
    direction  = rep("", n_add),
    cell_type  = rep("", n_add),
    study      = study_pad,
    logFC      = rep(NA, n_add),
    p.val      = rep(NA, n_add),
    diff_logFC = rep(min(croc_attempt_df$diff_logFC) - 1, n_add)  # <- Fixed here
  )
  
  plot_df <- bind_rows(croc_attempt_df, pad_rows) %>%
    dplyr::mutate(Gene = reorder(Gene, diff_logFC),
                  study = case_when(
                    study == "croc" ~ "T1D\nvs.\nHC",
                    study == "attempt" ~ "Dapagliflozin\nvs.\nPlacebo"
                  ))
} else {
  # Don't forget to handle the case when no padding is needed!
  plot_df <- croc_attempt_df %>%
    dplyr::mutate(Gene = reorder(Gene, diff_logFC),
                  study = case_when(
                    study == "croc" ~ "T1D\nvs.\nHC",
                    study == "attempt" ~ "Dapagliflozin\nvs.\nPlacebo"
                  ))
}  
  
  p <- ggplot(plot_df, aes(x = study, y = Gene, fill = logFC)) +
    geom_tile() +
    scale_fill_gradient2(
      low = "#89c2d9", mid = "white", high = "#ee7674", midpoint = 0, na.value = "#00000000"
    ) +
    geom_text(label = plot_df$Gene, aes(x = 1.5),
              color = ifelse(plot_df$direction == "", "#00000000", "black")
              ) +
    theme_minimal() +
    theme(axis.text.y = element_blank(),
          panel.grid = element_blank(),
          plot.subtitle = element_text(hjust = 0.5, color = "black"),
          text = element_text(size = 15),
          legend.text = element_text(angle = 60, hjust = 1)) +
    labs(x = NULL, y = NULL,
         subtitle = paste0("Cell type: ", cell,
                          "\n", n_reversed, "/", n_reversed+n_nonreversed, " reversed to\nHC state")) +
    scale_x_discrete(position = "top")
  
  assign(paste0(tolower(cell), "_croc_attempt_heat"), p)
}

ggarrange(pt_croc_attempt_heat, tal_croc_attempt_heat, ec_croc_attempt_heat,
          ic_croc_attempt_heat, pod_croc_attempt_heat, labels = "AUTO",
          common.legend = T, nrow = 1, hjust = 0, vjust = 0.8)


ggsave(file.path(root_path, "ATTEMPT/Results/Figures/Panels/croc_attempt_rev_heatmap.png"), width = 12, height = 12)
```