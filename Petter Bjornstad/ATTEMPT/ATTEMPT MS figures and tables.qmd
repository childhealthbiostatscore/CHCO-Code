---
title: "ATTEMPT MS figures and tables"
author: "Ye Ji Choi"
format:
  docx:
    reference-doc: custom-reference.docx
    fig-cap-location: top
    tbl-cap-location: top
execute:
  echo: false
  warning: false
  message: false
---

```{r echo = F}
library(dplyr)
library(tidyr)
library(knitr)
library(patchwork)
library(magick)
library(ggplot2)
library(purrr)
library(Hmisc)
library(jsonlite)
library(aws.s3)
library(knitr)
library(dplyr)
library(kableExtra)
library(tidyverse)
library(lmerTest)
library(emmeans)
library(broom)
library(ggbeeswarm)
library(lemon)
library(quantreg)
library(arsenal)
library(ggpubr)
library(magick)
library(ggrounded)
library(gridExtra)
library(ggplotify)
library(gridExtra)
library(grid)
library(gtable)
library(extrafont)
```

```{r include = F}
## Create an S3 client
keys <- fromJSON("/Users/choiyej/Library/CloudStorage/OneDrive-TheUniversityofColoradoDenver/Bjornstad Pyle Lab/keys.json")

Sys.setenv(
  "AWS_ACCESS_KEY_ID" = keys$MY_ACCESS_KEY,
  "AWS_SECRET_ACCESS_KEY" = keys$MY_SECRET_KEY,
  "AWS_DEFAULT_REGION" = "",
  "AWS_REGION" = "",
  "AWS_S3_ENDPOINT" = "s3.kopah.uw.edu"
)
```


```{r echo = F}
user <- Sys.info()[["user"]]

if (user == "choiyej") { # local version
  root_path <- "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive"
  git_path <- "/Users/choiyej/GitHub/CHCO-Code/Petter Bjornstad"
} else if (user == "yejichoi") { # hyak version
  root_path <- ""
  git_path <- "/mmfs1/gscratch/togo/yejichoi/CHCO-Code/Petter Bjornstad"
} else if (user == "pylell") {
  root_path <- "/Users/pylell/Library/CloudStorage/OneDrive-SharedLibraries-UW/Bjornstad/Biostatistics Core Shared Drive"
  git_path <- "/Users/pylell/Documents/GitHub/CHCO-Code/Petter Bjornstad"
} else {
  stop("Unknown user: please specify root path for this user.")
}

base_path <- paste0(root_path, "/ATTEMPT/Results/Figures")
source(file.path(git_path, "Resources/YC/R Functions/correlation_function.R"))
source(file.path(git_path, "ATTEMPT/attempt_functions.R"))
```


```{r echo = F}
attempt_dat <- s3readRDS(object = "cleaned_data/attempt_dat.rds", bucket = "attempt", region = "")
delta_df <- s3readRDS(object = "cleaned_data/attempt_delta_df.rds", bucket = "attempt", region = "")
harm_dat_collapsed <- s3readRDS(object = "cleaned_data/harm_dat_collapsed.rds", bucket = "attempt", region = "")

table_labs <- list(
  age = "Age (years)",
  sex = "Sex",
  weight = "Weight (kg)",
  height = "Height (cm)",
  bmi = "BMI (kg/m²)",
  hba1c = "HbA1c (%)",
  emu_urine_acr_mean = "Urine ACR (mg/g)",
  creatinine_s = "Serum creatinine (mg/dL)",
  cystatin_c_s = "Serum cystatin C (mg/L)",
  albumin_serum_gl = "Serum albumin (g/L)",
  cgm_tir = "CGM time in range (%)",
  diabetes_dx_duration = "Diabetes duration (years)",
  sbp = "Systolic BP (mmHg)",
  dbp = "Diastolic BP (mmHg)",
  cholesterol_serum_mmoll = "Total cholesterol (mmol/L)",
  triglycerides_serum_mmoll = "Triglycerides (mmol/L)",
  pulse = "Pulse (bpm)",
  ldl_serum_mmoll = "LDL cholesterol (mmol/L)",
  hdl_serum_mmoll = "HDL cholesterol (mmol/L)",
  mgfr_jodal_bsa = "mGFR BSA-adjusted (mL/min/1.73m²)",
  mgfr_jodal = "mGFR (mL/min)",
  mri_r2_cortex_l = "MRI R2* left cortex",
  mri_r2_cortex_r = "MRI R2* right cortex",
  avg_c_r2 = "Cortical R2*",
  mri_r2_kidney_l = "MRI R2* left kidney",
  mri_r2_kidney_r = "MRI R2* right kidney",
  avg_k_r2 = "Kidney R2*",
  mri_r2_medulla_l = "MRI R2* left medulla",
  mri_r2_medulla_r = "MRI R2* right medulla",
  avg_m_r2 = "Medulla R2*"
)

# Apply labels to your data
for(var in names(table_labs)) {
  if(var %in% names(attempt_dat)) {
    label(attempt_dat[[var]]) <- table_labs[[var]]
  }
}

table_controls <-tableby.control(
  total = FALSE,
  numeric.stats = c("meansd"),
  cat.stats = c("countpct"),
  digits = 1, 
  numeric.simplify = T
)

# List of variables to copy
vars_to_copy <- c('mgfr_jodal_bsa', 'mgfr_jodal', 'mri_r2_cortex_l', 
                  'mri_r2_cortex_r', 'avg_c_r2', 'mri_r2_kidney_l', 
                  'mri_r2_kidney_r', 'avg_k_r2', 'avg_m_r2')

# Get values from visit -4
visit_minus4_values <- attempt_dat[attempt_dat$visit == -4, c('subject_id', vars_to_copy)]

# For each subject, copy their visit -4 values to visit 0
for(subject in unique(visit_minus4_values$subject_id)) {
  # Get the values for this subject at visit -4
  patient_values <- visit_minus4_values[visit_minus4_values$subject_id == subject, vars_to_copy]
  
  # Update visit 0 for this subject
  for(var in vars_to_copy) {
    attempt_dat[attempt_dat$subject_id == subject & attempt_dat$visit == 0, var] <- patient_values[[var]]
  }
}
```

```{r include = F}
celltype_groups <- list(
  PT = c("PT-S1/S2", "PT-S3", "aPT"),
  TAL = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),
  PC = c("CCD-PC", "CNT-PC", "dCCD-PC", "M-PC", "tPC-IC"),
  EC = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC"),
  IC = c("IC-A", "IC-B", "aIC"),
  Immune = c("MAC", "MON", "cDC", "pDC", "CD4+ T", "CD8+ T", "B", "NK"),
  Immune_myeloid = c("MAC", "MON", "cDC", "pDC"),
  Immune_lymphoid = c("CD4+ T", "CD8+ T", "B", "NK"),
  VSMC_P_FIB = c("VSMC/P", "FIB"),
  POD = "POD"
)

## read mixed model results dataframe (rendered in Hyak)
# process and read all results from ATTEMPT
# Top 2000 HVG
for (cell in names(celltype_groups))  {
  print(paste0("Processing: ", cell))
  cell <- gsub("/", "_", cell)
  
  annotated_df <- read.csv(file.path(root_path, "ATTEMPT/Results/nebula", paste0(tolower(cell), "_kpmp_hvg_res.csv")))
  colnames(annotated_df) <- gsub("\\.", ":", colnames(annotated_df))
  cell <- gsub("-", "_", cell)
  cell <- gsub("\\+\\s", "_", cell)
  lower_cell <- tolower(cell)
  var_name <- paste0(lower_cell, "_hvg_kpmp")
  print(var_name)
  assign(var_name, annotated_df)
  
  
  annotated_df <- read.csv(file.path(root_path, "ATTEMPT/Results/nebula", paste0(tolower(cell), "_kpmp_res.csv")))
  colnames(annotated_df) <- gsub("\\.", ":", colnames(annotated_df))
  cell <- gsub("-", "_", cell)
  cell <- gsub("\\+\\s", "_", cell)
  lower_cell <- tolower(cell)
  var_name <- paste0(lower_cell, "_kpmp")
  print(var_name)
  assign(var_name, annotated_df)
}

for (cell in unlist(celltype_groups))  {
  print(paste0("Processing: ", cell))
  cell <- gsub("/", "_", cell)
  cell <- gsub("-", "_", cell)
  cell <- gsub("\\+\\s", "_", cell)
  
  annotated_df <- read.csv(file.path(root_path, "ATTEMPT/Results/nebula", paste0(tolower(cell), "_kpmp_hvg_res.csv")))
  colnames(annotated_df) <- gsub("\\.", ":", colnames(annotated_df))
  cell <- gsub("-", "_", cell)
  cell <- gsub("\\+\\s", "_", cell)
  lower_cell <- tolower(cell)
  var_name <- paste0(lower_cell, "_hvg_kpmp")
  print(var_name)
  assign(var_name, annotated_df)
  
}

# Top 2000 HVG w/ clinical var
clin_vars <- c("mgfr_jodal_delta", "mgfr_jodal_bsa_delta", "tir_delta", 
               "hba1c_delta", "weight_delta", "avg_c_r2_delta", "avg_k_r2_delta",
               "avg_ketones_delta")
for (cell in names(celltype_groups))  {
  for(var in clin_vars) {
    print(paste0("Processing: ", cell, " - ", var))
    annotated_df <- read.csv(file.path(root_path, "ATTEMPT/Results/nebula", paste0(cell, "_", var, ".csv")))
    colnames(annotated_df) <- gsub("\\.", ":", colnames(annotated_df))
    # Assign to variable dynamically
    var_name <- paste0(tolower(cell), "_", var, "_hvg_kpmp")
    assign(var_name, annotated_df, envir = .GlobalEnv)
  }
}

clinical_directions <- data.frame(variable = 
                                    c("mgfr_jodal", "mgfr_jodal_bsa", 
                                      "tir","hba1c", "weight", 
                                      "avg_c_r2", "avg_k_r2", "avg_ketones"),
                                  direction = 
                                    c("-", "-", 
                                      "+", "-", "-", 
                                      "+","+", "+"))

# s3$upload_file(temp_file, "attempt", "cleaned_data/attempt_meta_proportions.Rdata")

# Read in results for CROC targeted analysis
for (cell in names(celltype_groups))  {
  print(paste0("Processing: ", cell))
  cell <- gsub("/", "_", cell)
  
  annotated_df <- read.csv(file.path(root_path, "ATTEMPT/Results/nebula", paste0(tolower(cell), "_kpmp_croc_targeted_res.csv")))
  colnames(annotated_df) <- gsub("\\.", "", colnames(annotated_df))
  cell <- gsub("-", "_", cell)
  cell <- gsub("\\+\\s", "_", cell)
  lower_cell <- tolower(cell)
  var_name <- paste0(lower_cell, "_croc_targeted_res")
  print(var_name)
  assign(var_name, annotated_df)
}
```

# Tables

## Section 2A

```{r echo = F}
#| label: tbl-full-baseline
#| tbl-cap: "Participant characteristics at baseline."

kable(summary(arsenal::tableby(
  treatment ~ 
    age + 
    sex + 
    weight + 
    height + 
    bmi + 
    hba1c + 
    kwt(emu_urine_acr_mean, "medianq1q3") + 
    creatinine_s + 
    cystatin_c_s + 
    albumin_serum_gl + 
    cgm_tir + 
    diabetes_dx_duration + 
    sbp + 
    dbp + 
    cholesterol_serum_mmoll + 
    triglycerides_serum_mmoll + 
    pulse + 
    ldl_serum_mmoll + 
    hdl_serum_mmoll +
    mgfr_jodal_bsa + mgfr_jodal + 
    avg_c_r2 + avg_k_r2, 
  data = subset(attempt_dat, visit == 0),
  control = table_controls
)), digits = 1)

```

```{r echo = F}
#| label: tbl-co-baseline
#| tbl-cap: "Participant characteristics at baseline in biopsy eligible cohort."
#| tbl-subcap: "Baseline biopsies were available for 78% (7/9) of placebo and 100% (9/9) of dapagliflozin participants."

kable(summary(arsenal::tableby(
  treatment ~ 
    age + 
    sex + 
    weight + 
    height + 
    bmi + 
    hba1c + 
    kwt(emu_urine_acr_mean, "medianq1q3") + 
    creatinine_s + 
    cystatin_c_s + 
    albumin_serum_gl + 
    cgm_tir + 
    diabetes_dx_duration + 
    sbp + 
    dbp + 
    cholesterol_serum_mmoll + 
    triglycerides_serum_mmoll + 
    pulse + 
    ldl_serum_mmoll + 
    hdl_serum_mmoll +
    mgfr_jodal_bsa + mgfr_jodal + avg_c_r2 + avg_k_r2 + avg_m_r2, 
  data = subset(attempt_dat, visit == 0 & site == "Denver"),
  control = table_controls
)), digits = 1)
```

## Section 2D

```{r}
#| label: tbl-histology
#| tbl-cap: "Qualitative histology assessment of baseline kidney biopsies."

cols_to_factor <- c("Glomeruli sclerosed", "Global", "Segmental", 
                    "GBM thickening", "Mild", "Moderate", "Severe",
                    "Tubular atrophy", "Vessel pathology",
                    "arteriolosclerosis", "arteriolohyalinosis")

# Convert them to factors with No/Yes levels
for(col in cols_to_factor) {
  attempt_dat[[col]] <- factor(
    ifelse(attempt_dat[[col]] == "Yes", "Yes", "No"), 
    levels = c("No", "Yes")
  )
}

table_controls <- tableby.control(
  total = FALSE,
  numeric.stats = c("meansd"),
  cat.stats = c("countpct"),
  digits = 1, 
  numeric.simplify = TRUE,
  cat.simplify = T
)

kable(summary(arsenal::tableby(
  treatment ~ 
    `Glomeruli number` +
    `Glomeruli sclerosed` +
    Global + Segmental + 
    `GBM thickening` + Mild + Moderate + Severe +
    `Tubular atrophy` + `Vessel pathology` +
    arteriolosclerosis + arteriolohyalinosis, 
  data = subset(attempt_dat, visit == 0 & site == "Denver" & biopsy_yn == "Yes"),
  control = table_controls
)), digits = 1)
```

# Figures

## Section 2A

```{r}
#| label: fig-consort
#| fig-cap: "CONSORT flow diagram showing participant enrollment, allocation, follow-up, and analysis. The left panel (pink background) illustrates the ancillary study within the parent trial conducted in Toronto, London, and Colorado (total n=98), with participants randomized to either placebo (n=49) or dapagliflozin 5 mg (n=49). The right panel (green background) highlights the kidney biopsy-eligible cohort, a subset of participants from Colorado (n=18), randomized to placebo (n=9) or dapagliflozin 5 mg (n=9). "

knitr::include_graphics(file.path(base_path, "ATTEMPT_FU_Consort_diagram.png"))
```

## Section 2B

```{r, include = F}
# create panels
attempt_dat2 <- attempt_dat %>%
  mutate(treatment = case_when(treatment == "Dapagliflozin 5mg" ~ "Dapa",
                               T ~ treatment))
# (A) Change in mGFR by baseline mGFR
mgfr_jodal_bsa_category_bars <- plot_delta_by_category(
  data = attempt_dat2,
  id_var = "subject_id",
  treatment_var = "treatment",
  value_var = "mgfr_jodal_bsa",
  visit_var = "visit",
  visit_baseline = -4,
  visit_pre = -4,
  visit_post = 16,
  bin_by_tertiles = F,
  bin_breaks = c(-Inf, 90, 110, Inf),
  bin_labels = c("<90", "90-110", "\u2265110"),
  proper_name =  "mGFR (BSA)",
  treatment_levels = c("Dapa", "Placebo"),
  fill_colors = c("Placebo" = "#f8ae9d", 
                  "Dapa" = "#a7b298",
                  "DiD" = "#669bbc")
) + theme(axis.text.x = element_text(angle = 60, hjust = 1))

# (B)
delta_mgfr_jodal_bsa_denver <- plot_mean_ci_stars(subset(delta_df, visit %in% c(-4,16) & site == "Denver"),
                                                  y_var = mgfr_jodal_bsa, 
                                                  y_axis_title = "\u0394 mGFR (BSA)",
                                                  legend_position = c(0.3,0.2),
                                                  visits_to_plot = c(-4, 16),
                                                  baseline_visit = -4,
                                                  covariates = "site")

# (C)
delta_hba1c_overtime_2_denver <- plot_mean_ci_stars(data = subset(delta_df, site == "Denver"), y_var = hba1c, 
                                                    y_axis_title = "\u0394 HbA1c (%)",
                                                    legend_position = c(0.3,0.2),
                                                    visits_to_plot = c(0, 4, 16)) +
  geom_hline(yintercept = 0, linetype = "dashed", linewidth = 0.1)

# (D)
delta_tir_overtime_denver <- plot_mean_ci_stars(data = subset(delta_df, visit %in% c(0,16) & site == "Denver", test_method = "ancova"), 
                                                y_var = tir, y_axis_title = "\u0394 Time in Range (%)",
                                                legend_position = c(0.3,0.8),
                                                visits_to_plot = c(0, 16)) +
  geom_hline(yintercept = 0, linetype = "dashed", linewidth = 0.1)


# (A) Change in mGFR by baseline mGFR
delta_avg_k_r2_overtime <- plot_mean_ci_stars(data = delta_df, 
                                              visits_to_plot = c(-4, 16), baseline_visit = -4,
                                              y_var = avg_k_r2, y_axis_title = "\u0394 Kidney R2*",
                                              legend_position = c(0.3,0.8)) +
  geom_hline(yintercept = 0, linetype = "dashed", linewidth = 0.1)

# # (B)
# avg_k_r2_category_bars <- plot_delta_by_category(
#   data = attempt_dat,
#   id_var = "subject_id",
#   treatment_var = "treatment",
#   value_var = "avg_k_r2",
#   visit_var = "visit",
#   visit_baseline = -4,
#   visit_pre = -4,
#   visit_post = 16,
#   bin_by_tertiles = T,
#   top_padding = 0.5,
#   proper_name =  "Kidney R2*",
#   output_path = "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Plot over time/avg_k_r2_category_bars.png"
# )

# (C)
avg_k_r2_by_mgfr_category_bars <- plot_delta_by_category(
  data = attempt_dat2,
  id_var = "subject_id",
  treatment_var = "treatment",
  x_var = "mgfr_jodal_bsa",
  value_var = "avg_k_r2",
  visit_var = "visit",
  visit_baseline = -4,
  visit_pre = -4,
  visit_post = 16,
  bin_by_tertiles = F,
  proper_name =  "Kidney R2*",
  x_label = "\nBaseline mGFR (BSA)",
  bin_breaks = c(-Inf, 90, 110, Inf),
  treatment_levels = c("Dapa", "Placebo"),
  bin_labels = c("<90", "90-110", "\u2265110"),
  output_path = "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Plot over time/avg_k_r2_by_mgfr_category_bars.png",
  fill_colors = c("Placebo" = "#f8ae9d", 
                  "Dapa" = "#a7b298",
                  "DiD" = "#669bbc")
) + theme(axis.text.x = element_text(angle = 60, hjust = 1))

# (D) 
delta_avg_k_r2_overtime_denver <- plot_mean_ci_stars(data = subset(delta_df, 
                                                                   site == "Denver"), 
                                                     visits_to_plot = c(-4, 16),
                                                     y_var = avg_k_r2, y_axis_title = "\u0394 Kidney R2*",
                                                     legend_position = c(0.3,0.8)) +
  geom_hline(yintercept = 0, linetype = "dashed", linewidth = 0.1)

# (E) 
delta_avg_m_r2_overtime_denver <- plot_mean_ci_stars(data = subset(delta_df, 
                                                                   site == "Denver"), 
                                                     visits_to_plot = c(-4, 16),
                                                     y_var = avg_m_r2, y_axis_title = "\u0394 Medulla R2*",
                                                     legend_position = c(0.3,0.8)) +
  geom_hline(yintercept = 0, linetype = "dashed", linewidth = 0.1)

# (F)
delta_avg_c_r2_overtime_denver <- plot_mean_ci_stars(data = subset(delta_df, 
                                                                   site == "Denver"), 
                                                     visits_to_plot = c(-4, 16),
                                                     y_var = avg_c_r2, y_axis_title = "\u0394 Cortical R2*",
                                                     legend_position = c(0.3,0.8)) +
  geom_hline(yintercept = 0, linetype = "dashed", linewidth = 0.1)


```

```{r echo = F, eval = F}
ggarrange(mgfr_jodal_bsa_category_bars, delta_avg_k_r2_overtime, avg_k_r2_by_mgfr_category_bars,
          ncol=3, nrow=1, common.legend = TRUE, legend="bottom", labels = "AUTO")

ggsave(file.path(base_path, "Panels/full_mgfr_r2.png"), width = 10, height = 4, dpi = 600)
```


```{r, out.width="100%"}
#| label: fig-mgfr-tertiles-panel
#| fig-cap: "Clinical endpoints of full cohort. (A) Mean change in mGFR stratified by baseline mGFR categories. Participants were categorized by baseline mGFR. Bars show mean change from baseline to week 16 with 95% CI, and individual dots represent participant-level changes. Paired t-tests assessed within-arm change. Difference-in-differences (DiD) between dapagliflozin and placebo within each category was estimated using pairwise contrasts from a linear model including treatment, baseline category, and their interaction (emmeans framework). (B) Longitudinal change in kidney R2* by treatment. Visit-specific means and 95% CIs are shown for dapagliflozin and placebo at baseline and week 16. Stars above panels indicate between-arm differences at each visit from a linear mixed-effects model with treatment × visit interaction and subject-level random intercepts (emmeans pairwise contrasts; Bonferroni adjusted; * P<0.05, ** P<0.01, *** P<0.001). (C) Mean change in kidney R2* stratified by baseline kidney R2* categories. Participants were categorized by baseline kidney R2*. Same methods applied as (A)."

knitr::include_graphics(file.path(base_path, "Panels/full_mgfr_r2.png")) 
```

## Section 2C

```{r, include = F}
# create panels
ggarrange(delta_mgfr_jodal_bsa_denver, delta_hba1c_overtime_2_denver, delta_tir_overtime_denver,
          delta_avg_k_r2_overtime_denver, delta_avg_m_r2_overtime_denver, delta_avg_c_r2_overtime_denver, ncol=3, nrow=2, common.legend = TRUE, legend="bottom", labels = "AUTO")

ggsave("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/Figures/Panels/denver_mgfr_r2_panel.png", width = 12, height = 7, dpi = 300)
```


```{r, out.width="100%"}
#| label: fig-r2star-timeline
#| fig-cap: "(A-F) Longitudinal change in mGFR, HbA1c, TIR, and R2* in kidney, medulla, and cortex by treatment in biopsy eligible cohort. Visit-specific means and 95% CIs are shown for dapagliflozin and placebo at baseline and week 16. Stars above panels indicate between-arm differences at each visit from a linear mixed-effects model with treatment × visit interaction and subject-level random intercepts (emmeans pairwise contrasts; Bonferroni adjusted; * P<0.05, ** P<0.01, *** P<0.001). "

knitr::include_graphics(file.path(base_path, "Panels/denver_mgfr_r2_panel.png"))
```

## Section 2E

```{r, eval = F}
# s3load(object = "cleaned_data/attempt_meta_proportions.Rdata", bucket = "attempt", region = "")

img1 <- image_read(file.path(base_path, "UMAP/attempt_umap_kpmpcelltype.png"))
img2 <- image_read(file.path(base_path, "Proportions/attempt_general_kpmp_cellcounts_plot_clean.png"))

kpmp_celltype_counts <- attempt_meta %>%
  filter(!grepl("Other", as.character(KPMP_celltype_general))) %>%
  group_by(KPMP_celltype_general) %>%
  dplyr::summarise(n = n()) %>%
  ungroup()

p2 <- attempt_meta %>% 
  filter(!grepl("Other", KPMP_celltype_general)) %>%
  ggplot(aes(KPMP_celltype_general, fill = visit_treatment)) + 
  geom_bar(stat = "count") +
  geom_text(data = kpmp_celltype_counts, aes(x = KPMP_celltype_general, y = n, label = n), 
            vjust = -0.5, size = 3, inherit.aes = FALSE) +
  theme_classic() +
  labs(x = NULL,
       y = "Cell count",
       fill = NULL) +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1),
        plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 10),
        legend.position = "right",
        legend.text = element_text(size = 8),
        axis.ticks.x = element_blank()) +
  guides(fill = guide_legend(ncol = 1)) +
  scale_fill_manual(values = c("#fbc4ab", "#f4978e",
                               "#aaae8e", "#828e82"))+
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
ggsave(file.path(base_path, "Proportions/attempt_general_kpmp_cellcounts_plot_clean.png"), p2,
       width = 8, height = 4)
# temp_file <- tempfile(fileext = ".png")
# ggsave(temp_file)
# s3$upload_file(temp_file, "attempt", "Figures/attempt_general_kpmp_cellcounts_plot_clean.png") 


# Convert to ggplot objects
p1 <- image_ggplot(img1)
# p2 <- image_ggplot(img2)

# Your table as a data frame
cell_table <- data.frame(
  `General type` = c("PT", "TAL","EC", "IC", "POD",  "PC",  "VSMC/P, FIB",
                     "Immune (L)","Immune (M)", "Other"),
  `KPMP Sub type` = c("PT-S1/S2, PT-S3, aPT",
                      "C-TAL-1, C-TAL-2, aTAL, dTAL",
                      "EC-AVR, EC-GC, EC-PTC,\nEC-AEA, EC-LYM, EC/VSMC",
                      "IC-A, IC-B, aIC",
                      "POD",
                      "CCD-PC, CNT-PC, dCCD-PC, M-PC, tPC-IC",
                      "VSMC/P, FIB",
                      "CD4+ T, CD8+ T, B, NK",
                      "MAC, MON, cDC, pDC",
                      "aDTL, DTL, CNT, ATL, PEC, DCT, dDCT,\nMC, cycT, SchwannCells, non-specific"
  )
)

table_plot <- 
  ggtexttable(cell_table,
              rows = NULL,
              cols = c("General type", "KPMP Subtype"),
              theme = ttheme("light", base_size = 8)) 

final_plot <- ggarrange(
  ggarrange(p1, table_plot, ncol = 2, labels = c("A", "B")),
  p2,
  nrow = 2,
  labels = c("", "C"),
  heights = c(3, 2),
  label.x = 0,  # Move label closer to the left edge (0-1 scale)
  label.y = 1  # Adjust vertical position if needed
)

ggsave(file.path(base_path, "Panels/scrna_desc_panel.png"), final_plot, dpi = 600, height = 5.5)

```

```{r, out.width="100%", out.height = NULL}
#| label: fig-umap
#| fig-cap: '(A) UMAP dimensionality reduction of single-cell RNA sequencing data from kidney biopsies. (B) Table of cell subtype groupings into general cell types. (C) Counts of each general cell types in each treatment and visit groups. "Other" cell types not shown.'
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/scrna_desc_panel.png"))
```

```{r, include = F}
# Read images
img1 <- image_read(file.path(base_path, "Cell type comparison/celltype_deg_upset_kpmp.png"))
img2 <- image_read(file.path(base_path, "Cell type comparison/celltype_deg_stacked_barplot_kpmp.png"))
img3 <- image_read(file.path(base_path, "Cell type comparison/celltype_deg_combined_kpmp.png"))

# Convert to ggplot objects
p1 <- image_ggplot(img1)
p2 <- image_ggplot(img2)
p3 <- image_ggplot(img3)

p <- ggarrange(p1, 
               ggarrange(p2, p3, nrow = 2, labels = c("B", "C")), 
               ncol = 2, labels = "A", widths = c(1,1))
ggsave(file.path(base_path, "Panels/upset_plot_panel.png"), p, dpi = 600, height = 6)
```

```{r, out.width="100%"}
#| label: fig-upset
#| fig-cap: "(A) UpSet plot showing the overlap of differentially expressed genes across kidney cell types. Only intersections with size > 3 are displayed. Intersections corresponding to genes unique to a single cell type are omitted for clarity. Bars representing overlaps across ≥ 3 cell types are highlighted in steel blue. (B) Bar plot showing the frequency of differentially expressed genes by cell type, separated by direction of effect (DiD > 0 in red, DiD < 0 in blue). (C) Scatter plot of DiD values for each gene, grouped by cell type. Points above zero indicate positive DiD, and points below zero indicate negative DiD."
#| fig-dpi: 600
knitr::include_graphics(file.path(base_path, "Panels/upset_plot_panel.png"))
```

```{r, out.width="100%"}
#| label: fig-segment-phoom
#| fig-cap: "Summary of findings in segmental distribution of kidney cell populations."
#| fig-dpi: 300
knitr::include_graphics(file.path(base_path, "Pathways and transcripts in ATTEMPT.png"))
```


```{r eval = F}
pt_plots <- create_gene_expression_plots(
  main_results = pt_hvg_kpmp,
  subtype_results_list = list(
    "PT-S1/S2" = pt_s1_s2_hvg_kpmp,
    "PT-S3" = pt_s3_hvg_kpmp,
    "aPT" = apt_hvg_kpmp
  ),
  cell_type_prefix = "PT",
  cell_type_labels = c("PT-S1/S2", "PT-S3", "aPT"),
  output_prefix = "kpmp_PT_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  formula = NULL,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 30,
  volcano_box_padding = 0.5
)

pt_dot_legend <- get_legend(pt_plots$dot_plot)
pt_plots$dot_plot <- pt_plots$dot_plot + theme(legend.position = "none")
pt_plots$heatmap_plot <- pt_plots$heatmap_plot + theme(legend.position = "top",
                                                       legend.text = element_text(angle = 60, hjust = 1))

tal_plots <- create_gene_expression_plots(
  main_results = tal_hvg_kpmp,
  subtype_results_list = list(
    "C-TAL-1" = c_tal_1_hvg_kpmp,
    "C-TAL-2" = c_tal_2_hvg_kpmp,
    "aTAL" = atal_hvg_kpmp,
    "dTAL" = dtal_hvg_kpmp
  ),
  cell_type_prefix = "TAL",
  cell_type_labels = c("C-TAL-1", "C-TAL-2", "aTAL", "dTAL"),
  output_prefix = "kpmp_TAL_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  formula = NULL,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 30,
  volcano_box_padding = 0.5
)
tal_dot_legend <- get_legend(tal_plots$dot_plot)
tal_plots$dot_plot <- tal_plots$dot_plot + theme(legend.position = "none")
tal_plots$heatmap_plot <- tal_plots$heatmap_plot + theme(legend.position = "top",
                                                         legend.text = element_text(angle = 60, hjust = 1))

ec_plots <- create_gene_expression_plots(
  main_results = ec_hvg_kpmp,
  subtype_results_list = list(
    "EC-AVR" = ec_avr_hvg_kpmp,
    "EC-GC" = ec_gc_hvg_kpmp,
    "EC-PTC" = ec_ptc_hvg_kpmp,
    "EC-AEA" = ec_aea_hvg_kpmp,
    "EC-LYM" = ec_lym_hvg_kpmp,
    "EC/VSMC" = ec_vsmc_hvg_kpmp
  ),
  cell_type_prefix = "EC",
  cell_type_labels = c("EC-AVR", "EC-GC", "EC-PTC", "EC-AEA", "EC-LYM", "EC/VSMC"),
  output_prefix = "kpmp_EC_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  formula = NULL,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 30,
  volcano_box_padding = 0.5
)
ec_dot_legend <- get_legend(ec_plots$dot_plot)
ec_plots$dot_plot <- ec_plots$dot_plot + theme(legend.position = "none")
ec_plots$heatmap_plot <- ec_plots$heatmap_plot + theme(legend.position = "top",
                                                       legend.text = element_text(angle = 60, hjust = 1))

ic_plots <- create_gene_expression_plots(
  main_results = ic_hvg_kpmp,
  subtype_results_list = list(
    "IC-A" = ic_a_hvg_kpmp,
    "IC-B" = ic_b_hvg_kpmp,
    "aIC" = aic_hvg_kpmp
  ),
  cell_type_prefix = "IC",
  cell_type_labels = c("IC-A", "IC-B", "aIC"),
  output_prefix = "kpmp_IC_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  formula = NULL,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 20,
  volcano_box_padding = 0.5
)
ic_dot_legend <- get_legend(ic_plots$dot_plot)
ic_plots$dot_plot <- ic_plots$dot_plot + theme(legend.position = "none")
ic_plots$heatmap_plot <- ic_plots$heatmap_plot + theme(legend.position = "top",
                                                       legend.text = element_text(angle = 60, hjust = 1))

pod_plots <- create_gene_expression_plots(
  main_results = pod_hvg_kpmp,
  subtype_results_list = list(
    "POD" = pod_hvg_kpmp),
  cell_type_labels = c("POD"),
  cell_type_prefix = "POD",
  formula = NULL,
  output_prefix = "kpmp_POD_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 30,
  volcano_box_padding = 0.5
)
pod_dot_legend <- get_legend(pod_plots$dot_plot)
pod_plots$dot_plot <- pod_plots$dot_plot + theme(legend.position = "none")
pod_plots$heatmap_plot <- pod_plots$heatmap_plot + theme(legend.position = "top",
                                                         legend.text = element_text(angle = 60, hjust = 1))


pc_plots <- create_gene_expression_plots(
  main_results = pc_hvg_kpmp,
  subtype_results_list = list(
    "CCD-PC" = ccd_pc_hvg_kpmp,
    "CNT-PC" = cnt_pc_hvg_kpmp,
    "dCCD-PC" = dccd_pc_hvg_kpmp,
    "M-PC" = m_pc_hvg_kpmp,
    "tPC-IC" = tpc_ic_hvg_kpmp
  ),
  cell_type_prefix = "PC",
  cell_type_labels = c("CCD-PC", "CNT-PC", "dCCD-PC", "M-PC", "tPC-IC"),
  output_prefix = "kpmp_PC_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  formula = NULL,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 30,
  volcano_box_padding = 0.5
)
pc_dot_legend <- get_legend(pc_plots$dot_plot)
pc_plots$dot_plot <- pc_plots$dot_plot + theme(legend.position = "none")
pc_plots$heatmap_plot <- pc_plots$heatmap_plot + theme(legend.position = "top",
                                                       legend.text = element_text(angle = 60, hjust = 1))

vsmc_p_fib_plots <- create_gene_expression_plots(
  main_results = vsmc_p_fib_hvg_kpmp,
  subtype_results_list = list(
    "VSMC/P" = vsmc_p_hvg_kpmp,
    "FIB" = fib_hvg_kpmp
  ),
  cell_type_prefix = "VSMC_P_FIB",
  cell_type_labels = c("VSMC/P", "FIB"),
  output_prefix = "kpmp_VSMC_P_FIB_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  formula = NULL,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 30,
  volcano_box_padding = 0.5
)
vsmc_p_fib_dot_legend <- get_legend(vsmc_p_fib_plots$dot_plot)
vsmc_p_fib_plots$dot_plot <- vsmc_p_fib_plots$dot_plot + theme(legend.position = "none")
vsmc_p_fib_plots$heatmap_plot <- vsmc_p_fib_plots$heatmap_plot + theme(legend.position = "top",
                                                                       legend.text = element_text(angle = 60, hjust = 1))

immune_plots <- create_gene_expression_plots(
  main_results = immune_hvg_kpmp,
  subtype_results_list = list(
    "MAC" = mac_hvg_kpmp,
    "MON" = mon_hvg_kpmp,
    "cDC" = cdc_hvg_kpmp,
    # "pDC" = pdc_hvg_kpmp,
    "CD4+ T" = cd4_t_hvg_kpmp,
    "CD8+ T" = cd8_t_hvg_kpmp,
    "B" = b_hvg_kpmp,
    "NK" = nk_hvg_kpmp
  ),
  cell_type_prefix = "Immune",
  cell_type_labels = c("MAC", "MON", "cDC",  "CD4+ T", "CD8+ T", "B", "NK"),
  output_prefix = "kpmp_Immune_hvg",
  full_formula = F,
  volcano_text_size = 15,
  volcano_caption_size = 12,
  formula = NULL,
  save_plots = F,
  heatmap_caption = F,
  arrow_padding = 0.08,
  arrow_text_padding = 0.1,
  caption_padding = 20,
  x_title_padding_t = 3,
  volcano_force = 30,
  volcano_box_padding = 0.5
)
immune_dot_legend <- get_legend(immune_plots$dot_plot)
immune_plots$dot_plot <- immune_plots$dot_plot + theme(legend.position = "none")
immune_plots$heatmap_plot <- immune_plots$heatmap_plot + theme(legend.position = "top",
                                                               legend.text = element_text(angle = 60, hjust = 1))
```

```{r, eval = F}
# Define base size parameters
base_size_params <- list(
  label_size = 5,
  arrow_symbol_size = 12,
  main_arrow_size = 15,
  axis_title_size = 15,
  axis_text_size = 14,
  legend_text_size = 15,
  caption_size = 15,
  annotation_text_size = 5,
  text_size = 7,
  title_size = 9,
  arrow_padding = 0.15,
  arrow_text_padding = 0.27,
  x_axis_padding = 39,
  force = 50,
  box.padding = 0.6,
  force_pull = 1,
  nudge_y = 0.3,
  y_expand = 0,
  ylim = 0.2,
  nudge_x = 0.2
)

# Define cell-specific overrides (only specify what changes)
cell_size_overrides <- list(
  TAL = list(
    label_size = 4.8,
    force = 45,
    box.padding = 0.3,
    force_pull = 0,
    nudge_y = 0.3
  )
)

cell_var_overrides <- list(
  TAL_mgfr = list(
    label_size = 4.5,
    force = 38,
    box.padding = 0.5,
    nudge_y = 0,
    ylim = 0
  ),
  TAL_hba1c = list(
    nudge_y = 0,
    force = 80,
    box.padding = 0.1,
    ylim = 0.3
  ),
  EC_mgfr = list(
    label_size = 4.8,
    ylim = 0.29,
    force = 20,
    force_pull = 0,
    box.padding = 1.2
  ),
  EC_tir = list(
    label_size = 4.8,
    ylim = 0.2,
    force_pull = 0,
    force = 20,
    box.padding = 0.55
  ),
  EC_avg_k_r2 = list(
    ylim = 0.3,
    force = 50,
    box.padding = 0.8
  ),
  IC_mgfr = list(
    ylim = 0.05,
    force = 10,
    force_pull = 0,
    box.padding = 1
  ),
  IC_tir = list(
    ylim = 0,
    force = 10,
    box.padding = 1.2
  ),
  IC_hba1c = list(
    ylim = -0.1,
    force = 20,
    box.padding = 0.8,
    force_pull = 0
  ),
  IC_avg_k_r2 = list(
    box.padding = 0,
    force_pull = 0,
    force = 85,
    ylim = -0.1
  ),
  POD_mgfr = list(
    ylim = 0.1
  )
)

# Create empty list to store all plots
all_plots <- list()

# Loop through each cell type
for (cell in names(celltype_groups)) {
  
  # Get size parameters with overrides
  size_params <- base_size_params
  if (cell %in% names(cell_size_overrides)) {
    # Update only the specified parameters
    size_params <- modifyList(base_size_params, cell_size_overrides[[cell]])
  }
  
  # Create plot parameters for this cell type
  plot_params <- list(
    mgfr = list(
      data = get(paste0(tolower(cell), "_mgfr_jodal_bsa_delta_hvg_kpmp")),
      fc_col = "logFC_mgfr_jodal_bsa_delta",
      p_col = "p_mgfr_jodal_bsa_delta",
      x_axis = "\n\nlogFC \u0394 mGFR (BSA)",
      y_axis = "-log10(p-value)",
      file_suffix = paste0("nebula/kpmp_", tolower(cell), "_mgfr_jodal_bsa_trtcolors"),
      positive_text = "Positively associated \nw/ \u0394 mGFR (BSA)",
      negative_text = "Negatively associated \nw/ \u0394 mGFR (BSA)",
      clinical_var = "mgfr_jodal_bsa",
      arrow_label = "mGFR\n-8.2",
      subset_expr = NULL
    ),
    hba1c = list(
      data = get(paste0(tolower(cell), "_hba1c_delta_hvg_kpmp")),
      fc_col = "logFC_hba1c_delta",
      p_col = "p_hba1c_delta",
      x_axis = "\n\nlogFC \u0394 HbA1c",
      y_axis = "-log10(p-value)",
      file_suffix = paste0("nebula/kpmp_", tolower(cell), "_hba1c_trtcolors"),
      positive_text = "Positively associated \nw/ \u0394 HbA1c",
      negative_text = "Negatively associated \nw/ \u0394 HbA1c",
      clinical_var = "hba1c",
      arrow_label = "HbA1c\n-0.47",
      subset_expr = NULL
    ),
    tir = list(
      data = get(paste0(tolower(cell), "_tir_delta_hvg_kpmp")),
      fc_col = "logFC_tir_delta",
      p_col = "p_tir_delta",
      x_axis = "\n\nlogFC \u0394 TIR",
      y_axis = "-log10(p-value)",
      file_suffix = paste0("nebula/kpmp_", tolower(cell), "_tir_trtcolors"),
      positive_text = "Positively associated \nw/ \u0394 TIR",
      negative_text = "Negatively associated \nw/ \u0394 TIR",
      clinical_var = "tir",
      arrow_label = "TIR\n+9.3",
      subset_expr = NULL
    ),
    avg_k_r2 = list(
      data = get(paste0(tolower(cell), "_avg_k_r2_delta_hvg_kpmp")),
      fc_col = "logFC_avg_k_r2_delta",
      p_col = "p_avg_k_r2_delta",
      x_axis = "\n\nlogFC \u0394 avg kidney R2*",
      y_axis = "-log10(p-value)",
      file_suffix = paste0("nebula/kpmp_", tolower(cell), "_avg_k_r2_trtcolors"),
      positive_text = "Positively associated \nw/ \u0394 avg kidney R2*",
      negative_text = "Negatively associated \nw/ \u0394 avg kidney R2*",
      clinical_var = "avg_k_r2",
      arrow_label = "Kidney R2*\n+0.50",
      subset_expr = expression(logFC_avg_k_r2_delta > -10)
    )
  )
  
  # Create empty list to store plots for this cell type
  cell_plots <- list()
  
  # Loop through each clinical variable
  for (var_name in names(plot_params)) {
    params <- plot_params[[var_name]]
    
    # Get size parameters with hierarchy:
    # 1. Start with base parameters
    size_params <- base_size_params
    
    # 2. Apply cell-specific overrides if they exist
    if (cell %in% names(cell_size_overrides)) {
      size_params <- modifyList(size_params, cell_size_overrides[[cell]])
    }
    
    # 3. Apply cell+variable specific overrides if they exist
    cell_var_key <- paste0(cell, "_", var_name)
    if (cell_var_key %in% names(cell_var_overrides)) {
      size_params <- modifyList(size_params, cell_var_overrides[[cell_var_key]])
    }
    
    # Apply subset if specified
    data_to_plot <- params$data
    if (!is.null(params$subset_expr)) {
      data_to_plot <- subset(data_to_plot, eval(params$subset_expr))
    }
    
    # Create plot
    cell_plots[[var_name]] <- plot_volcano_concordance(
      clin_results = data_to_plot,
      fc = params$fc_col,
      p_col = params$p_col,
      x_axis = params$x_axis,
      y_axis = params$y_axis,
      file_suffix = params$file_suffix,
      treatment_results = get(paste0(tolower(cell), "_hvg_kpmp")),
      treatment_p_col = "p_treatmentDapagliflozin:visitPOST",
      positive_text = params$positive_text,
      negative_text = params$negative_text,
      clinical_direction = clinical_directions[clinical_directions$variable == params$clinical_var,]$direction,
      cell_type = toupper(cell),
      arrow_label = params$arrow_label,
      caption_text = NULL,
      save = FALSE,
      formula = NULL,
      top_n = 20,
      # Add all size parameters
      label_size = size_params$label_size,
      arrow_symbol_size = size_params$arrow_symbol_size,
      main_arrow_size = size_params$main_arrow_size,
      axis_title_size = size_params$axis_title_size,
      axis_text_size = size_params$axis_text_size,
      legend_text_size = size_params$legend_text_size,
      caption_size = size_params$caption_size,
      annotation_text_size = size_params$annotation_text_size,
      text_size = size_params$text_size,
      title_size = size_params$title_size,
      arrow_padding = size_params$arrow_padding,
      arrow_text_padding = size_params$arrow_text_padding,
      x_axis_padding = size_params$x_axis_padding,
      force = size_params$force,
      box.padding = size_params$box.padding,
      force_pull = size_params$force_pull,
      nudge_y = size_params$nudge_y,
      y_expand = size_params$y_expand,
      ylim = size_params$ylim,
      nudge_x = size_params$nudge_x
    )
    
    # Store plot with unique name
    plot_name <- paste0(tolower(cell), "_", var_name, "_volcano")
    assign(plot_name, cell_plots[[var_name]])
  }
  
  # Store all plots for this cell type
  all_plots[[cell]] <- cell_plots
}
```


### Section 2E: PT cells

```{r eval = F}
# Convert to ggplot objects
p1 <- pt_mgfr_volcano
p2 <- pt_hba1c_volcano
p3 <- pt_tir_volcano
p4 <- pt_avg_k_r2_volcano

# Extract the legend from one of the plots (e.g., p2)
get_legend <- function(myplot) {
  tmp <- ggplot_gtable(ggplot_build(myplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

# If you haven't already modified p2-p5, you can do it here:
p2_with_solid_legend <- p2 + 
  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  theme(legend.position = "bottom",
        legend.justification = "center",
        legend.box.just = "center")

# Extract legend from the modified p2
common_legend <- get_legend(p2_with_solid_legend)

# Remove legends from p2-p5
p1_no_legend <- p1 + theme(legend.position = "none")
p2_no_legend <- p2 + theme(legend.position = "none")
p3_no_legend <- p3 + theme(legend.position = "none")
p4_no_legend <- p4 + theme(legend.position = "none")

p <-ggarrange(ggarrange(ggarrange(pt_plots$volcano_plot, pt_plots$heatmap_plot, ncol = 2, widths = c(6,1)),
                        ggarrange(pt_dot_legend, ggarrange(pt_plots$bar_plot, pt_plots$dot_plot, 
                                                           nrow = 2, heights = c(1,2), align = "v"),
                                  nrow = 2, heights = c(1, 30)),
                        nrow = 2, heights = c(3,1), labels = "A", font.label = list(size = 25)),
              ggarrange(p1_no_legend, p2_no_legend, ncol = 2, labels = c("B", "C"),
                        font.label = list(size = 25)),
              ggarrange(p3_no_legend, p4_no_legend, ncol = 2, labels = c("D", "E"),
                        font.label = list(size = 25)),
              nrow = 3, ncol = 1,
              heights = c(2,1,1))


ggsave(file.path(base_path, "Panels/pt_panel.png"), p, height = 20, width = 15, dpi = 600)
```

```{r, out.height="80%"}
#| label: fig-pt-clin-panel
#| fig-cap: "Differential transcript signatures and subtype consistency (PT). (A) Volcano plot of PT main results with FDR-significant genes (up to top 20 per direction) labeled. Same genes from the volcano plot are shown in the heatmap with treatment group effects. Weighted consistency scores for selected genes are shown as bars above the dot plot, summarizing concordance of subtype logFCs with the main PT effect (gray bars indicate any subtype–main direction mismatch). Subtype dot plot shows effect size as size and direction as color across PT subtypes for selected genes. (B - E) Concordance between clinical association and treatment effect. The x-axis shows the estimated association with the clinical variable (effect size), and the y-axis shows the −log10(P) for that association. Points are colored by the significant treatment effect direction and labeled if they are concordant with the direction of the clinical variable for up to the top 20 concordant genes per direction. The central arrow annotates the clinical direction after treatment."
#| fig-dpi: 300


knitr::include_graphics(file.path(base_path, "Panels/pt_panel.png"))
```

```{r eval = F}
# p <- ggarrange(ggarrange(ggarrange(pt_plots$volcano_plot, pt_plots$heatmap_plot, ncol = 2, widths = c(4,1)),
#                     ggarrange(pt_dot_legend, pt_plots$bar_plot, pt_plots$dot_plot, nrow = 3, heights = c(1, 10,20)), 
#                     nrow = 2, heights = c(3,1), labels = "A", font.label = list(size = 30)), 
#           ggarrange(ggarrange(tal_plots$volcano_plot, tal_plots$heatmap_plot, ncol = 2, widths = c(4,1)), 
#                     ggarrange(tal_dot_legend, tal_plots$bar_plot, tal_plots$dot_plot, nrow = 3, heights = c(1, 10,20)),
#                     nrow = 2, heights = c(3,1), labels = "B", font.label = list(size = 30)), 
#           ggarrange(ggarrange(ec_plots$volcano_plot, ec_plots$heatmap_plot, ncol = 2, widths = c(4,1)),
#                     ggarrange(ec_dot_legend, ec_plots$bar_plot, ec_plots$dot_plot, nrow = 3, heights = c(1, 10,20)), 
#                     nrow = 2, heights = c(3,1), labels = "C", font.label = list(size = 30)), 
#           ggarrange(ggarrange(ic_plots$volcano_plot, ic_plots$heatmap_plot, ncol = 2, widths = c(4,1)),
#                     ggarrange(ic_dot_legend, ic_plots$bar_plot, ic_plots$dot_plot, nrow = 3, heights = c(1, 10,20)), 
#                     nrow = 2, heights = c(3,1), labels = "D", font.label = list(size = 30)), 
#           ggarrange(ggarrange(pod_plots$volcano_plot, pod_plots$heatmap_plot, ncol = 2, widths = c(4,1)),
#                     ggarrange(pod_dot_legend, pod_plots$bar_plot, pod_plots$dot_plot, nrow = 3, heights = c(1, 10,20)), 
#                     nrow = 2, heights = c(3,1), labels = "E", font.label = list(size = 30)), 
#           nrow = 3, ncol = 2)
# 
# ggsave(file.path(base_path, "Panels/key_celltypes_panel.png"), p, height = 33, width = 20)
```

```{r include = F, eval = F}
# read in all the results by looping through cell types
for (cell in names(celltype_groups)){
  ipa_res <- read_excel(paste0("/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/ATTEMPT/Results/IPA/kpmp/nebula/full ", tolower(cell), "_kpmp_DiD.xls"), skip = 1)
  colnames(ipa_res) <- c("pathway", "neg_log_p", "ratio", "z", "genes")
  var_name = paste0(tolower(cell), "_kpmp_ipa")
  assign(var_name, ipa_res, envir = .GlobalEnv)
}

for (cell in names(celltype_groups)) {
  df <- get(paste0(tolower(cell), "_kpmp_ipa"))
  
  df_top <- df %>%
    arrange(desc(neg_log_p)) %>%
    filter(!is.na(z)) %>%
    head(20) %>%
    mutate(
      # Keep track of which pathways were truncated
      was_truncated = nchar(pathway) > 45,
      pathway_short = shorten_pathway_names(pathway, max_length = 45)
    )
  
  # Get truncated pathways for caption
  truncated_pathways <- df_top %>%
    filter(was_truncated) %>%
    mutate(
      # Wrap long pathway names
      full_wrapped = sapply(pathway, function(x) {
        if (nchar(x) > 45) {
          paste(strwrap(x, width = 70), collapse = "\n    ")  # Indent continuation lines
        } else {
          x
        }
      })
    ) %>%
    dplyr::select(pathway_short, full_wrapped)
  
  # Create caption
  base_caption <- paste0("Cell type: ", gsub("_", " ", cell))
  
  if (nrow(truncated_pathways) > 0) {
    truncated_text <- paste(
      apply(truncated_pathways, 1, function(x) {
        paste0(x["full_wrapped"])
      }), 
      collapse = "\n"
    )
    full_caption <- paste0(base_caption, "\n\nTruncated pathways:\n", truncated_text)
  } else {
    full_caption <- base_caption
  }
  
  df_top$pathway <- factor(df_top$pathway_short, 
                           levels = rev(df_top$pathway_short))
  
  p <- df_top %>%
    ggplot(aes(y = pathway, x = neg_log_p, fill = z)) +
    geom_col(width = 0.9) + 
    geom_vline(xintercept = -log10(0.05), linetype = "dashed", color = "#aaaaaa") +
    geom_text(aes(label = pathway), 
              x = -log10(0.05)+0.1, hjust = 0, 
              fontface = "bold", family = "Arial",
              color = "#2b2b2b") +
    scale_fill_gradient2(low = "#89c2d9", mid = "white", high = "#ee7674", midpoint = 0,
                         guide = guide_colorbar(barheight = 0.4, barwidth = 8)) +
    theme_minimal() +
    theme(panel.grid = element_blank(), 
          legend.position = "top",
          axis.text.y = element_blank(),
          legend.title = element_text(vjust = 0.8),
          plot.caption = element_text(hjust = 0, size = 8, lineheight = 1.2)) +
    labs(y = NULL, x = "-log(p-value)", fill = "Z-score",
         caption = full_caption) +
    scale_x_continuous(expand = expansion(mult = c(0, 0)))
  
  assign(paste0(tolower(cell), "_ipa"), p)
}

# IPA
# Convert to ggplot objects
p1 <- pt_ipa
p2 <- tal_ipa
p3 <- ec_ipa
p4 <- ic_ipa
p5 <- pod_ipa

combined_ipa <- ggarrange(p1, p2, p3, p4, p5, ncol = 3, nrow = 2, labels = "AUTO")
ggsave(file.path(base_path, "Panels/key_combined_ipa.png"), combined_ipa, height = 12, width = 12)
```

```{r, out.height="100%"}
#| label: fig-ipa-main
#| fig-cap: "Pathway analysis using IPA on key cell types."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/key_combined_ipa.png"))
```

```{r, eval = F}
for (cell in names(celltype_groups)) {
  gsea_list <- readRDS(file.path(root_path, 
                                 paste0("ATTEMPT/Results/GSEA/full_", tolower(cell), "_gsea.RDS")))
  
  reactome_top <- gsea_list$reactome %>%
    arrange(pval) %>%
    head(20) %>%
    mutate(
      # Keep track of which pathways were truncated
      was_truncated = nchar(pathway) > 45,
      clean_pathway = clean_pathway_names(shorten_pathway_names(pathway, max_length = 45)),
      neg_log_p = -log10(pval)
    )
  
  # Get truncated pathways for caption
  truncated_pathways <- reactome_top %>%
    filter(was_truncated) %>%
    dplyr::mutate(
      full_clean = clean_pathway_names(pathway),
      # Using stringr for more consistent wrapping
      full_clean_wrapped = str_wrap(full_clean, width = 70, indent = 0, exdent = 4)
    ) %>%
    dplyr::select(clean_pathway, full_clean_wrapped)
  
  # Create caption
  base_caption <- paste0("Cell type: ", gsub("_", " ", cell))
  
  if (nrow(truncated_pathways) > 0) {
    truncated_text <- paste(
      apply(truncated_pathways, 1, function(x) {
        paste0(x["full_clean_wrapped"])
      }), 
      collapse = "\n"
    )
    full_caption <- paste0(base_caption, "\n\nTruncated pathways:\n", truncated_text)
  } else {
    full_caption <- base_caption
  }
  
  reactome_top$clean_pathway <- factor(reactome_top$clean_pathway, 
                                       levels = rev(reactome_top$clean_pathway))
  
  p <- reactome_top %>%
    ggplot(aes(y = clean_pathway, x = neg_log_p, fill = NES)) +
    geom_col(width = 0.9) + 
    geom_vline(xintercept = -log10(0.05), linetype = "dashed", color = "#aaaaaa") +
    geom_text(aes(label = clean_pathway), 
              x = -log10(0.05)+0.1, hjust = 0, 
              fontface = "bold", family = "Arial",
              color = "#2b2b2b") +
    scale_fill_gradient2(low = "#89c2d9", mid = "white", high = "#ee7674", midpoint = 0,
                         guide = guide_colorbar(barheight = 0.4, barwidth = 8)) +
    theme_minimal() +
    theme(panel.grid = element_blank(), 
          legend.position = "top",
          axis.text.y = element_blank(),
          legend.title = element_text(vjust = 0.8),
          plot.caption = element_text(hjust = 0, size = 8, lineheight = 1.2)) +  # Added lineheight
    labs(y = NULL, x = "-log(p-value)", fill = "NES",
         caption = full_caption) +
    scale_x_continuous(expand = expansion(mult = c(0, 0)))
  
  assign(paste0(tolower(cell), "_reactome"), p)
}

# IPA
# Convert to ggplot objects
p1 <- pt_reactome
p2 <- tal_reactome
p3 <- ec_reactome
p4 <- ic_reactome
p5 <- pod_reactome

combined_reactome <- ggarrange(p1, p2, p3, p4, p5, ncol = 3, nrow = 2, labels = "AUTO")
ggsave(file.path(base_path, "Panels/key_combined_reactome.png"), combined_reactome, height = 12, width = 12)
```

```{r, out.height="80%"}
#| label: fig-reactome-main
#| fig-cap: "Gene set enrichment using REACTOME on key cell types."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/key_combined_reactome.png"))
```


```{r eval = F}
attempt_meta$KPMP_celltype <- factor(attempt_meta$KPMP_celltype,
                                     level = c("aPT", "PT-S1/S2", "PT-S3", 
                                               "C-TAL-1", "C-TAL-2", "aTAL",
                                               "aDTL", "DTL",
                                               "CNT", "CNT-PC", "CCD-PC", "dCCD-PC", "M-PC",
                                               "tPC-IC", "IC-A", "IC-B",
                                               "ATL",
                                               "POD", "PEC",
                                               "DCT", "dDCT",
                                               "MC",
                                               "EC-PTC", "EC-GC", "EC-AEA", "EC-LYM", "EC-AVR", "EC/VSMC",
                                               "VSMC/P", "FIB",
                                               "MAC", "MON", "NK",
                                               "CD4+ T", "CD8+ T", "cycT",
                                               "B",
                                               "pDC", "cDC",
                                               "aIC", "SchwannCells", "non-specific"))
p3 <- attempt_meta %>%
  filter(KPMP_celltype %in% c("PT-S1/S2", "PT-S3", "aPT")) %>%
  ggplot(aes(visit_treatment, fill = KPMP_celltype)) +
  geom_bar(stat = "count", position = "fill") +
  theme_classic() +
  labs(x = NULL,
       y = "Proportion",
       fill = NULL) +
  theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1)) +
  theme(plot.title = element_text(hjust=0.5, face="bold"),
        text = element_text(size = 15)) +
  scale_fill_manual(values = c("#264653", "#2a9d8f", "#e9c46a"))
ggsave(file.path(base_path, "Proportions/attempt_pt_visit_treatment_proportions_plot_kpmp.png"), p3, height = 10)

# Read images
img1 <- image_read(file.path(base_path, "Slingshot/attempt_pca_pt_kpmp_slingshot.png"))
img2 <- image_read(file.path(base_path, "Slingshot/attempt_pt_kpmp_slingshot_density_trtvisit.png"))
img4 <- image_read(file.path(base_path, "Slingshot/attempt_density_pt_kpmp_mgfr_jodal_bsa_deltadelta_slingshot.png"))
img5 <- image_read(file.path(base_path, "Slingshot/attempt_density_pt_kpmp_hba1c_deltadelta_slingshot.png"))
img6 <- image_read(file.path(base_path, "Slingshot/attempt_density_pt_kpmp_tir_deltadelta_slingshot.png"))

# Convert to ggplot objects
p1 <- image_ggplot(img1)
p2 <- image_ggplot(img2)
p4 <- image_ggplot(img4)
p5 <- image_ggplot(img5)
p6 <- image_ggplot(img6)

ggarrange(
  p2, labels = "A", nrow = 2,
  ggarrange(p1, p3, 
            p4, p5,
            p6, ncol = 2, nrow = 3, 
            labels = c("B", "C", "D", "E", "F"),
            heights = c(3,2,2)),
  heights = c(1,2))
ggsave(file.path(base_path, "Panels/slingshot_panel.png"), dpi = 600, height = 12)

```

```{r, out.width="70%"}
#| label: fig-pt-pseudotime
#| fig-cap: "Proximal tubule pseudotime trajectory analysis. (A) Cell density distribution along pseudotime. (B) PCA plot with inferred lineage trajectory. (C) Proportion plot of PT cells in each treatment/visit groups. (D-F) Clinical parameter changes along proximal tubule pseudotime. Correlation of pseudotime progression with change in mGFR and change in HbA1c"
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/slingshot_panel.png"))
```

### Section 2E: TAL cells

```{r eval = F}
# Convert to ggplot objects
p1 <- tal_mgfr_volcano
p2 <- tal_hba1c_volcano
p3 <- tal_tir_volcano
p4 <- tal_avg_k_r2_volcano

# Extract the legend from one of the plots (e.g., p2)
get_legend <- function(myplot) {
  tmp <- ggplot_gtable(ggplot_build(myplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)
}

# If you haven't already modified p2-p5, you can do it here:
p2_with_solid_legend <- p2 + 
  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  theme(legend.position = "bottom",
        legend.justification = "center",
        legend.box.just = "center")

# Extract legend from the modified p2
common_legend <- get_legend(p2_with_solid_legend)

# Remove legends from p2-p5
p1_no_legend <- p1 + theme(legend.position = "none")
p2_no_legend <- p2 + theme(legend.position = "none")
p3_no_legend <- p3 + theme(legend.position = "none")
p4_no_legend <- p4 + theme(legend.position = "none")

p <-ggarrange(ggarrange(ggarrange(tal_plots$volcano_plot, tal_plots$heatmap_plot, ncol = 2, widths = c(6,1)),
                        ggarrange(tal_dot_legend, ggarrange(tal_plots$bar_plot, tal_plots$dot_plot, 
                                                            nrow = 2, heights = c(1,2), align = "v"),
                                  nrow = 2, heights = c(1, 30)),
                        nrow = 2, heights = c(3,1), labels = "A", font.label = list(size = 25)),
              ggarrange(p1_no_legend, p2_no_legend, ncol = 2, labels = c("B", "C"),
                        font.label = list(size = 25)),
              ggarrange(p3_no_legend, p4_no_legend, ncol = 2, labels = c("D", "E"),
                        font.label = list(size = 25)),
              nrow = 3, ncol = 1,
              heights = c(2,1,1))

ggsave(file.path(base_path, "Panels/tal_panel.png"), p, height = 20, width = 15, dpi = 600)
```

```{r}
#| label: fig-tal-clin-panel
#| fig-cap: "Differential transcript signatures and subtype consistency (TAL). (A) Volcano plot of TAL main results with FDR-significant genes (up to top 20 per direction) labeled. Same genes from the volcano plot are shown in the heatmap with treatment group effects. Weighted consistency scores for selected genes are shown as bars above the dot plot, summarizing concordance of subtype logFCs with the main TAL effect (gray bars indicate any subtype–main direction mismatch). Subtype dot plot shows effect size as size and direction as color across TAL subtypes for selected genes. (B - E) Concordance between clinical association and treatment effect. The x-axis shows the estimated association with the clinical variable (effect size), and the y-axis shows the −log10(P) for that association. Points are colored by the significant treatment effect direction and labeled if they are concordant with the direction of the clinical variable for up to the top 20 concordant genes per direction. The central arrow annotates the clinical direction after treatment."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/tal_panel.png"))
```
### Section 2E: EC cells

```{r eval = F}
# Convert to ggplot objects
p1 <- ec_mgfr_volcano
p2 <- ec_hba1c_volcano
p3 <- ec_tir_volcano
p4 <- ec_avg_k_r2_volcano

p2_with_solid_legend <- p2 + 
  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  theme(legend.position = "bottom",
        legend.justification = "center",
        legend.box.just = "center")

# Extract legend from the modified p2
common_legend <- get_legend(p2_with_solid_legend)

# Remove legends from p2-p5
p1_no_legend <- p1 + theme(legend.position = "none")
p2_no_legend <- p2 + theme(legend.position = "none")
p3_no_legend <- p3 + theme(legend.position = "none")
p4_no_legend <- p4 + theme(legend.position = "none")

p <-ggarrange(ggarrange(ggarrange(ec_plots$volcano_plot, ec_plots$heatmap_plot, ncol = 2, widths = c(6,1)),
                        ggarrange(ec_dot_legend, ggarrange(ec_plots$bar_plot, ec_plots$dot_plot, 
                                                           nrow = 2, heights = c(1,2), align = "v"),
                                  nrow = 2, heights = c(1, 30)),
                        nrow = 2, heights = c(5,2), labels = "A", font.label = list(size = 25)),
              ggarrange(p1_no_legend, p2_no_legend, ncol = 2, labels = c("B", "C"),
                        font.label = list(size = 25)),
              ggarrange(p3_no_legend, p4_no_legend, ncol = 2, labels = c("D", "E"),
                        font.label = list(size = 25)),
              nrow = 3, ncol = 1,
              heights = c(2,1,1))

ggsave(file.path(base_path, "Panels/ec_panel.png"), p, height = 23, width = 15, dpi = 600)
```

```{r, out.width="80%"}
#| label: fig-ec-clin-panel
#| fig-cap: "Differential transcript signatures and subtype consistency (EC). (A) Volcano plot of EC main results with FDR-significant genes (up to top 20 per direction) labeled. Same genes from the volcano plot are shown in the heatmap with treatment group effects. Weighted consistency scores for selected genes are shown as bars above the dot plot, summarizing concordance of subtype logFCs with the main EC effect (gray bars indicate any subtype–main direction mismatch). Subtype dot plot shows effect size as size and direction as color across EC subtypes for selected genes. (B - E) Concordance between clinical association and treatment effect. The x-axis shows the estimated association with the clinical variable (effect size), and the y-axis shows the −log10(P) for that association. Points are colored by the significant treatment effect direction and labeled if they are concordant with the direction of the clinical variable for up to the top 20 concordant genes per direction. The central arrow annotates the clinical direction after treatment."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/ec_panel.png"))
```


### Section 2E: IC cells

```{r eval = F}
# Convert to ggplot objects
p1 <- ic_mgfr_volcano
p2 <- ic_hba1c_volcano
p3 <- ic_tir_volcano
p4 <- ic_avg_k_r2_volcano

p2_with_solid_legend <- p2 + 
  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  theme(legend.position = "bottom",
        legend.justification = "center",
        legend.box.just = "center")

# Extract legend from the modified p2
common_legend <- get_legend(p2_with_solid_legend)

# Remove legends from p2-p5
p1_no_legend <- p1 + theme(legend.position = "none")
p2_no_legend <- p2 + theme(legend.position = "none")
p3_no_legend <- p3 + theme(legend.position = "none")
p4_no_legend <- p4 + theme(legend.position = "none")

p <-ggarrange(ggarrange(ggarrange(ic_plots$volcano_plot, ic_plots$heatmap_plot, ncol = 2, widths = c(6,1)),
                        ggarrange(ic_dot_legend, ggarrange(ic_plots$bar_plot, ic_plots$dot_plot, 
                                                           nrow = 2, heights = c(1,2), align = "v"),
                                  nrow = 2, heights = c(1, 30)),
                        nrow = 2, heights = c(5,2), labels = "A", font.label = list(size = 25)),
              ggarrange(p1_no_legend, p2_no_legend, ncol = 2, labels = c("B", "C"),
                        font.label = list(size = 25)),
              ggarrange(p3_no_legend, p4_no_legend, ncol = 2, labels = c("D", "E"),
                        font.label = list(size = 25)),
              nrow = 3, ncol = 1,
              heights = c(2,1,1))

ggsave(file.path(base_path, "Panels/ic_panel.png"), p, height = 22, width = 15, dpi = 600)
```

```{r, out.width="80%"}
#| label: fig-ic-clin-panel
#| fig-cap: "Differential transcript signatures and subtype consistency (IC). (A) Volcano plot of IC main results with FDR-significant genes (up to top 20 per direction) labeled. Same genes from the volcano plot are shown in the heatmap with treatment group effects. Weighted consistency scores for selected genes are shown as bars above the dot plot, summarizing concordance of subtype logFCs with the main IC effect (gray bars indicate any subtype–main direction mismatch). Subtype dot plot shows effect size as size and direction as color across IC subtypes for selected genes. (B - E) Concordance between clinical association and treatment effect. The x-axis shows the estimated association with the clinical variable (effect size), and the y-axis shows the −log10(P) for that association. Points are colored by the significant treatment effect direction and labeled if they are concordant with the direction of the clinical variable for up to the top 20 concordant genes per direction. The central arrow annotates the clinical direction after treatment."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/ic_panel.png"))
```

### Section 2E: POD cells

```{r eval = F}
# Convert to ggplot objects
p1 <- pod_mgfr_volcano
p2 <- pod_hba1c_volcano
p3 <- pod_tir_volcano
p4 <- pod_avg_k_r2_volcano

p2_with_solid_legend <- p2 + 
  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3))) +
  theme(legend.position = "bottom",
        legend.justifpodation = "center",
        legend.box.just = "center")

# Extract legend from the modified p2
common_legend <- get_legend(p2_with_solid_legend)

# Remove legends from p2-p5
p1_no_legend <- p1 + theme(legend.position = "none")
p2_no_legend <- p2 + theme(legend.position = "none")
p3_no_legend <- p3 + theme(legend.position = "none")
p4_no_legend <- p4 + theme(legend.position = "none")

p <-ggarrange(ggarrange(ggarrange(pod_plots$volcano_plot, pod_plots$heatmap_plot, ncol = 2, widths = c(6,1)),
                        ggarrange(pod_dot_legend, ggarrange(pod_plots$bar_plot, pod_plots$dot_plot, 
                                                            nrow = 2, heights = c(1,2), align = "v"),
                                  nrow = 2, heights = c(1, 30)),
                        nrow = 2, heights = c(5,2), labels = "A", font.label = list(size = 25)),
              ggarrange(p1_no_legend, p2_no_legend, ncol = 2, labels = c("B", "C"),
                        font.label = list(size = 25)),
              ggarrange(p3_no_legend, p4_no_legend, ncol = 2, labels = c("D", "E"),
                        font.label = list(size = 25)),
              nrow = 3, ncol = 1,
              heights = c(2,1,1))

ggsave(file.path(base_path, "Panels/pod_panel.png"), p, height = 22, width = 15, dpi = 600)
```

```{r, out.width="90%"}
#| label: fig-pod-clin-panel
#| fig-cap: "Differential transcript signatures and subtype consistency (POD). (A) Volcano plot of POD main results with FDR-significant genes (up to top 20 per direction) labeled. Same genes from the volcano plot are shown in the heatmap with treatment group effects. Subtype cell type makes up the main cell type for POD. (B - E) Concordance between clinical association and treatment effect. The x-axis shows the estimated association with the clinical variable (effect size), and the y-axis shows the −log10(P) for that association. Points are colored by the significant treatment effect direction and labeled if they are concordant with the direction of the clinical variable for up to the top 20 concordant genes per direction. The central arrow annotates the clinical direction after treatment."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/pod_panel.png"))
```


### Section 2E: Other cell types

```{r, eval = F}
ggarrange(ggarrange(ggarrange(pc_plots$volcano_plot, pc_plots$heatmap_plot, ncol = 2, widths = c(4,1)), 
                    ggarrange(pc_dot_legend, ggarrange(pc_plots$bar_plot, pc_plots$dot_plot, 
                                                       nrow = 2, heights = c(1,2), align = "v"),
                              nrow = 2, heights = c(1, 30)),
                    nrow = 2, heights = c(3,1), labels = "A", font.label = list(size = 30)), 
          ggarrange(ggarrange(vsmc_p_fib_plots$volcano_plot, vsmc_p_fib_plots$heatmap_plot, ncol = 2, widths = c(4,1)),
                    ggarrange(vsmc_p_fib_dot_legend, ggarrange(vsmc_p_fib_plots$bar_plot, vsmc_p_fib_plots$dot_plot, 
                                                               nrow = 2, heights = c(1,2), align = "v"),
                              nrow = 2, heights = c(1, 30)),
                    nrow = 2, heights = c(3,1), labels = "B", font.label = list(size = 30)), 
          ggarrange(ggarrange(immune_plots$volcano_plot, immune_plots$heatmap_plot, ncol = 2, widths = c(4,1)),
                    ggarrange(immune_dot_legend, ggarrange(immune_plots$bar_plot, immune_plots$dot_plot, 
                                                           nrow = 2, heights = c(1,2), align = "v"),
                              nrow = 2, heights = c(1, 30)),
                    nrow = 2, heights = c(3,1), labels = "C", font.label = list(size = 30)), 
          nrow = 2, ncol = 2)

ggsave(file.path(base_path, "Panels/other_celltypes_panel.png"), height = 22, width = 20)
```

```{r, out.width="90%"}
#| label: fig-pc-vsmcpfib-immune-panel
#| fig-cap: "Differential transcript signatures and subtype consistency for secondary cell types ((A) PC, (B) VSMC, FIB/P, (C) Immune). Volcano plot of main cell type results with FDR-significant genes (up to top 20 per direction) labeled. Same genes from the volcano plot are shown in the heatmap with treatment group effects. Weighted consistency scores for selected genes are shown as bars above the dot plot, summarizing concordance of subtype logFCs with the main cell type effect (gray bars indicate any subtype–main direction mismatch). Subtype dot plot shows effect size as size and direction as color across subtypes for selected genes."
#| fig-dpi: 300
#| 
knitr::include_graphics(file.path(base_path, "Panels/other_celltypes_panel.png"))
```


## Section 2F

```{r, out.width="100%"}
#| label: fig-urine-proteins
#| fig-cap: "Each point represents a urine protein from SOMA 7k panel. The x-axis shows logFC for the treatment × visit interaction (difference-in-differences estimate), and the y-axis shows −log10 of the FDR-adjusted P value. Proteins with significantly lower levels following dapagliflozin (negative DiD) are shown in blue, and proteins with significantly higher levels (positive DiD) are shown in red. Up to 20 points are labeled with Entrez identifiers, and duplicate labels occur when multiple aptamers map to the same gene."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Proteomics/Volcano Plots/Volcano_DiD_urine_proteomics_adjp_mixed.png"))
```

## Section 2G

```{r, include = F}
for (cell in names(celltype_groups)) {
  message("Processing: ", cell)
  p <- plot_croc_attempt_volcano(
    attempt_df = get(paste0(tolower(cell), "_kpmp")),
    croc_df = get(paste0(tolower(cell), "_croc_targeted_res")),
    cell_type = cell,
    caption = F,
    top_n = 20)
  assign(paste0(tolower(cell), "_croc_p"), p)
}
```


```{r, include = F}
# Convert to ggplot objects
p1 <- pt_croc_p
p2 <- tal_croc_p
p3 <- ec_croc_p
p4 <- ic_croc_p
p5 <- pod_croc_p

p <- ggarrange(p1, p2, p3, p4, p5, nrow = 3, ncol = 2, labels = "AUTO")
ggsave(file.path(base_path, "Panels/croc_targeted_panels_main.png"), p, 
       height = 14, width = 10, dpi = 600)
```

```{r, out.width="90%"}
#| label: fig-croc-reversals
#| fig-cap: "Cross-cohort concordance between case–control (CROC) and treatment response (ATTEMPT) in (A) PT, (B) TAL, (C) EC, (D) IC, and (E) POD. Significantly altered genes from the ATTEMPT analysis (P<0.05) from each cell type were analyzed in the CROC cohort. Volcano plots show gene-level case–control effects from CROC (x-axis: logFC for T1D vs healthy control; y-axis: −log10(P)). Points are colored by the CROC direction (red = up in T1D, blue = down in T1D; gray = not significant). Up to the top 20 genes in each direction are labeled when significant in both cohorts. The translucent boxes indicate reversal of direction between cohorts (pink fill = up with dapagliflozin; blue fill = down with dapagliflozin), unfilled labels indicate non-reversal (same sign in both)."
#| fig-dpi: 300

knitr::include_graphics(file.path(base_path, "Panels/croc_targeted_panels_main.png"))
```


```{r, include = F}
# do you think we should create a bar graph showing medulla R2* between LC vs. T1D in one color (CROC) and medullary R2* between SGLT2i vs. dapa (ATTEMPT) in another color
load(file = file.path(root_path, "/CROCODILE/Data_Cleaned/croc_data.RData"))
croc_dat <- dat
croc_comp_df <- croc_dat %>%
  dplyr::select(subject_id = record_id, visit, group, avg_m_r2) %>%
  filter(!is.na(avg_m_r2))

attempt_comp_df <- attempt_dat %>%
  filter(site == "Denver") %>%
  dplyr::select(subject_id, visit, group = treatment, avg_m_r2) %>%
  filter(!is.na(avg_m_r2))

comp_df <- rbind(croc_comp_df, attempt_comp_df)
```


```{r, include = F}
# ----- 1) PAIRED CHANGES: Placebo & Dapagliflozin (Δ = visit16 - visit-4) -----
paired_changes <- comp_df %>%
  filter(group %in% c("Placebo", "Dapagliflozin 5mg"),
         visit %in% c(-4, 16)) %>%
  group_by(subject_id, group) %>%
  summarise(delta = diff(avg_m_r2[order(visit)]), .groups = "drop")

paired_summary <- paired_changes %>%
  group_by(group) %>%
  summarise(
    n          = n(),
    mean_delta = mean(delta, na.rm = TRUE),
    sd_delta   = sd(delta, na.rm = TRUE),
    se         = sd_delta / sqrt(n),
    ci_low     = mean_delta + qt(0.025, df = n - 1) * se,
    ci_high    = mean_delta + qt(0.975, df = n - 1) * se,
    # p-value for within-group change vs 0
    p_value    = t.test(delta, mu = 0)$p.value,
    .groups = "drop"
  )

# ----- 2) BASELINE DIFFERENCE: Type 1 Diabetes – Lean Control -----
baseline_comp <- comp_df %>%
  filter(group %in% c("Lean Control", "Type 1 Diabetes"),
         visit == "baseline") |>
  mutate(group = factor(group, levels = c("Lean Control", "Type 1 Diabetes")))

tt_t1d <- t.test(avg_m_r2 ~ group, data = baseline_comp)  # reports (Lean - T1D)

# we want (T1D - Lean):
t1d_minus_lean_mean <- unname(diff(tt_t1d$estimate))            # T1D - Lean
t1d_minus_lean_ci   <- -rev(tt_t1d$conf.int)                    # flip CI to match T1D - Lean

n_t1d  <- sum(baseline_comp$group == "Type 1 Diabetes")
n_lean <- sum(baseline_comp$group == "Lean Control")

baseline_diff_row <- tibble(
  group      = "Type 1 Diabetes - Lean Control",
  n          = n_t1d + n_lean,
  mean_delta = t1d_minus_lean_mean,
  sd_delta   = NA_real_,
  se         = NA_real_,
  ci_low     = t1d_minus_lean_ci[1],
  ci_high    = t1d_minus_lean_ci[2],
  p_value    = tt_t1d$p.value
)

# ----- 3) COMBINE -----
final_summary <- bind_rows(paired_summary, baseline_diff_row)

final_summary

# ----- 4) DiD -----
paired_changes$group <- factor(paired_changes$group, levels = c("Placebo", "Dapagliflozin 5mg"))
tt_did <- t.test(delta ~ group, data = paired_changes)          # reports (Placebo - Dapa)

# we want (Dapa - Placebo):
did_mean <- unname(diff(tt_did$estimate))                       # Dapa - Placebo
did_ci   <- -rev(tt_did$conf.int)                               # flip CI to match Dapa - Placebo

did_row <- tibble(
  group      = "Dapagliflozin - Placebo (DiD)",
  n          = nrow(paired_changes),
  mean_delta = did_mean,
  sd_delta   = NA_real_,
  se         = NA_real_,
  ci_low     = did_ci[1],
  ci_high    = did_ci[2],
  p_value    = tt_did$p.value
)

# add into the final summary
final_summary2 <- bind_rows(final_summary, did_row)

final_summary2

final_summary2$group <- factor(final_summary2$group, labels = c("T1D - HC", "DiD\n(D - P)",
                                                                "Placebo\n(POST - PRE)", "Dapagliflozin\n(POST - PRE)"),
                               levels = c("Type 1 Diabetes - Lean Control", "Dapagliflozin - Placebo (DiD)",
                                          "Placebo", "Dapagliflozin 5mg"))
# --- tidy data for plotting, add stars & y positions ---
plot_df <- final_summary2 %>%
  dplyr::filter(group %in% c("DiD\n(D - P)", "T1D - HC")) %>%
  dplyr::mutate(
    stars = dplyr::case_when(
      p_value < 0.001 ~ "***",
      p_value < 0.01  ~ "**",
      p_value < 0.05  ~ "*",
      TRUE            ~ "ns"
    ),
    rng   = range(c(ci_low, ci_high, mean_delta), na.rm = TRUE),
    pad   = 0.07 * diff(rng),
    # put star above if mean >= 0, below if mean < 0
    y_lab = ifelse(mean_delta >= 0, ci_high + pad, ci_low - pad)
  )

```

```{r, out.height="80%"}
#| label: fig-croc-m-r2
#| fig-cap: "CROCODILE reversal analysis. Medulla R2* showed reversal post treatment towards healthy state."
#| fig-dpi: 300

fill_colors = c("Placebo\n(POST - PRE)" = "#f8ae9d", 
                "Dapagliflozin\n(POST - PRE)" = "#a7b298",
                "DiD\n(D - P)" = "#669bbc",
                "T1D - HC" = "#A3C4BC")

plot_df %>%
  ggplot(aes(x = group, y = mean_delta, fill = group)) +
  geom_col() +
  geom_errorbar(aes(ymin = ci_low, ymax = ci_high), width = 0.12, linewidth = 0.6) +
  geom_hline(yintercept = 0, linewidth = 0.3) +
  geom_text(aes(y = y_lab, label = stars), vjust = ifelse(plot_df$mean_delta >= 0, 0, 1), size = 6) +
  expand_limits(y = c(min(plot_df$ci_low, na.rm = TRUE) - diff(range(plot_df$y_lab, na.rm = TRUE))*0.05,
                      max(plot_df$y_lab,  na.rm = TRUE) + diff(range(plot_df$y_lab, na.rm = TRUE))*0.05)) +
  theme_minimal(base_size = 15) +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1),
    axis.ticks  = element_line(color = "grey"),
    panel.grid  = element_blank()
  ) +
  guides(fill = "none") +
  labs(x = NULL, y = "\u0394Medulla R2*") +
  scale_fill_manual(values = fill_colors)
```