---
title: "ATTEMPT Cell Chat"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, message = F, warning=F}
#| include: false
library(future)
library(future.apply)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(arsenal)
library(Biobase)
library(msigdbr)
library(kableExtra)
# library(knitr)
library(REDCapR)
# library(data.table)
library(emmeans)
library(NMF)
library(pheatmap)
library(UpSetR)
library(enrichR)
library(WriteXLS)
library(SAVER)
library(readxl)
library(limma)
library(edgeR)
library(BiocGenerics)
library(GSEABase)
library(slingshot)
library(SingleCellExperiment)
library(MAST)
library(muscat)
library(scater)
library(Seurat)
library(jsonlite)
library(dplyr)
library(glmmTMB)
library(reshape2)
library(broom.mixed) 
library(foreach)
library(doParallel)
library(nebula)
library(Matrix)
library(scran)
library(DirichletReg)
library(BiocParallel)
library(scDC)
library(CellChat)

```

```{r include = F}
reticulate::use_python("/mmfs1/gscratch/scrubbed/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")
```

```{r echo = F, eval = T}
# Read in clean seurat object saved from attempt_CROC_analysis.qmd
temp_file <- tempfile(fileext = ".rds")
s3$download_file("attempt", 'cleaned_data/attempt_clean_so.rds', temp_file)
attempt_so <- readRDS(temp_file)
``` 

```{r echo = F}
# Cell-Cell Interaction Analysis using CellChat

print("Seurat object overview:")
print(attempt_so)
print("Metadata columns:")
print(colnames(attempt_so@meta.data))

# Check your study design
print("Visit timepoints:")
print(table(attempt_so@meta.data$visit))
print("Treatment groups:")
print(table(attempt_so@meta.data$treatment))
print("Combined visit x treatment:")
print(table(attempt_so@meta.data$visit, attempt_so@meta.data$treatment))
print("Number of subjects:")
print(length(unique(attempt_so@meta.data$subject_id)))

# Check cell type annotations
print("Cell types present:")
print(table(attempt_so@meta.data$celltype))

# ============================================================================
# STEP 1: Create combined condition variable and prepare data for CellChat analysis
# ============================================================================

# Create a combined condition variable (visit_treatment)
attempt_so@meta.data$condition <- paste(attempt_so@meta.data$visit, 
                                        attempt_so@meta.data$treatment, 
                                        sep = "_")

print("Combined conditions created:")
print(table(attempt_so@meta.data$condition))

# Function to create CellChat object for a specific condition
create_cellchat_object <- function(seurat_obj, visit_val, treatment_val) {
  # Subset data for specific visit and treatment combination
  data_subset <- subset(seurat_obj, 
                       subset = visit == visit_val & treatment == treatment_val)
  
  print(paste("Creating CellChat object for", visit_val, treatment_val))
  print(paste("Number of cells:", ncol(data_subset)))
  print(paste("Number of subjects:", length(unique(data_subset@meta.data$subject_id))))
  
  # Extract expression data and metadata
  data.input <- GetAssayData(data_subset, assay = "RNA", slot = "data")
  meta <- data_subset@meta.data
  
  # Create CellChat object using 'celltype' column
  cellchat <- createCellChat(object = data.input, meta = meta, group.by = "celltype")
  
  # Set ligand-receptor database (human or mouse)
  # For human data:
  CellChatDB <- CellChatDB.human
  # For mouse data, use: CellChatDB <- CellChatDB.mouse
  
  # Show database info
  showDatabaseCategory(CellChatDB)
  
  # Use all CellChatDB for analysis
  CellChatDB.use <- CellChatDB
  cellchat@DB <- CellChatDB.use
  
  return(cellchat)
}

# ============================================================================
# STEP 2: Create CellChat objects for each visit-treatment combination
# ============================================================================

# Define your four experimental conditions
visits <- c("PRE", "POST")
treatments <- c("Placebo", "Dapagliflozin")

# Create list to store CellChat objects
cellchat_list <- list()

# Create CellChat objects for each combination
for(visit in visits) {
  for(treatment in treatments) {
    condition_name <- paste(visit, treatment, sep = "_")
    
    # Check if this combination exists in your data
    subset_check <- subset(attempt_so, subset = visit == visit & treatment == treatment)
    if(ncol(subset_check) > 0) {
      print(paste("Creating CellChat object for:", condition_name))
      cellchat_list[[condition_name]] <- create_cellchat_object(attempt_so, visit, treatment)
    } else {
      print(paste("No cells found for:", condition_name))
    }
  }
}

print(paste("Created", length(cellchat_list), "CellChat objects"))
print("Conditions available:")
print(names(cellchat_list))

# ============================================================================
# STEP 3: Perform CellChat analysis for each condition
# ============================================================================

perform_cellchat_analysis <- function(cellchat_obj) {
  # Preprocess data
  cellchat_obj <- subsetData(cellchat_obj) # subset based on expressed genes
  cellchat_obj <- identifyOverExpressedGenes(cellchat_obj)
  cellchat_obj <- identifyOverExpressedInteractions(cellchat_obj)
  
  # Infer cell-cell communication network
  cellchat_obj <- computeCommunProb(cellchat_obj, raw.use = TRUE)
  
  # Filter out communications with very few cells
  cellchat_obj <- filterCommunication(cellchat_obj, min.cells = 10)
  
  # Infer signaling pathways
  cellchat_obj <- computeCommunProbPathway(cellchat_obj)
  
  # Calculate aggregated network
  cellchat_obj <- aggregateNet(cellchat_obj)
  
  return(cellchat_obj)
}

# Run analysis for each condition
for(condition in names(cellchat_list)) {
  print(paste("Analyzing", condition))
  cellchat_list[[condition]] <- perform_cellchat_analysis(cellchat_list[[condition]])
}

# ============================================================================
# STEP 4: Visualize individual condition results
# ============================================================================

# Function to create basic visualizations
visualize_cellchat <- function(cellchat_obj, condition_name) {
  # Network plot
  groupSize <- as.numeric(table(cellchat_obj@idents))
  par(mfrow = c(1,2), xpd=TRUE)
  
  # Circle plot of cell-cell communications
  netVisual_circle(cellchat_obj@net$count, vertex.weight = groupSize, 
                   weight.scale = T, label.edge= F, 
                   title.name = paste("Number of interactions -", condition_name))
  
  # Circle plot of interaction weights
  netVisual_circle(cellchat_obj@net$weight, vertex.weight = groupSize, 
                   weight.scale = T, label.edge= F, 
                   title.name = paste("Interaction weights -", condition_name))
}

# Create visualizations for each condition
for(condition in names(cellchat_list)) {
  visualize_cellchat(cellchat_list[[condition]], condition)
}

# ============================================================================
# STEP 5: Compare conditions - focus on treatment and timepoint effects
# ============================================================================

# Treatment effect comparison: Dapagliflozin vs Placebo at each timepoint
compare_treatments <- function(cellchat_list) {
  
  # PRE timepoint comparison
  if("PRE_Placebo" %in% names(cellchat_list) & "PRE_Dapagliflozin" %in% names(cellchat_list)) {
    print("Comparing treatments at PRE timepoint...")
    pre_comparison <- mergeCellChat(list(PRE_Placebo = cellchat_list[["PRE_Placebo"]], 
                                        PRE_Dapagliflozin = cellchat_list[["PRE_Dapagliflozin"]]), 
                                   add.names = c("PRE_Placebo", "PRE_Dapagliflozin"))
    
    # Visualize differences at PRE
    gg1 <- compareInteractions(pre_comparison, show.legend = T, group = c(1,2), 
                              title = "PRE: Placebo vs Dapagliflozin")
    print(gg1)
  }
  
  # POST timepoint comparison  
  if("POST_Placebo" %in% names(cellchat_list) & "POST_Dapagliflozin" %in% names(cellchat_list)) {
    print("Comparing treatments at POST timepoint...")
    post_comparison <- mergeCellChat(list(POST_Placebo = cellchat_list[["POST_Placebo"]], 
                                         POST_Dapagliflozin = cellchat_list[["POST_Dapagliflozin"]]), 
                                    add.names = c("POST_Placebo", "POST_Dapagliflozin"))
    
    # Visualize differences at POST
    gg2 <- compareInteractions(post_comparison, show.legend = T, group = c(1,2), 
                              title = "POST: Placebo vs Dapagliflozin")
    print(gg2)
  }
}

# Timepoint effect comparison: PRE vs POST for each treatment
compare_timepoints <- function(cellchat_list) {
  
  # Placebo group: PRE vs POST
  if("PRE_Placebo" %in% names(cellchat_list) & "POST_Placebo" %in% names(cellchat_list)) {
    print("Comparing timepoints in Placebo group...")
    placebo_comparison <- mergeCellChat(list(PRE_Placebo = cellchat_list[["PRE_Placebo"]], 
                                            POST_Placebo = cellchat_list[["POST_Placebo"]]), 
                                       add.names = c("PRE_Placebo", "POST_Placebo"))
    
    # Visualize changes over time in placebo
    gg1 <- compareInteractions(placebo_comparison, show.legend = T, group = c(1,2), 
                              title = "Placebo: PRE vs POST")
    print(gg1)
  }
  
  # Dapagliflozin group: PRE vs POST
  if("PRE_Dapagliflozin" %in% names(cellchat_list) & "POST_Dapagliflozin" %in% names(cellchat_list)) {
    print("Comparing timepoints in Dapagliflozin group...")
    dapa_comparison <- mergeCellChat(list(PRE_Dapagliflozin = cellchat_list[["PRE_Dapagliflozin"]], 
                                         POST_Dapagliflozin = cellchat_list[["POST_Dapagliflozin"]]), 
                                    add.names = c("PRE_Dapagliflozin", "POST_Dapagliflozin"))
    
    # Visualize changes over time in dapagliflozin
    gg2 <- compareInteractions(dapa_comparison, show.legend = T, group = c(1,2), 
                              title = "Dapagliflozin: PRE vs POST")
    print(gg2)
  }
}

# Run comparisons
compare_treatments(cellchat_list)
compare_timepoints(cellchat_list)

# Full four-way comparison if all conditions are available
if(length(cellchat_list) == 4) {
  print("Performing full four-way comparison...")
  # Order: PRE_Placebo, POST_Placebo, PRE_Dapagliflozin, POST_Dapagliflozin
  cellchat_merged <- mergeCellChat(cellchat_list, add.names = names(cellchat_list))
  
  # Compare total number of interactions across all conditions
  gg1 <- compareInteractions(cellchat_merged, show.legend = T, group = c(1,2,3,4))
  gg2 <- compareInteractions(cellchat_merged, show.legend = T, group = c(1,2,3,4), measure = "weight")
  print(gg1 + gg2)
  
  # Network visualization showing differences
  par(mfrow = c(1,2), xpd=TRUE)
  netVisual_diffInteraction(cellchat_merged, weight.scale = T)
  netVisual_diffInteraction(cellchat_merged, weight.scale = T, measure = "weight")
  
  # Heatmap showing differential interactions
  gg1 <- netVisual_heatmap(cellchat_merged)
  gg2 <- netVisual_heatmap(cellchat_merged, measure = "weight")
  print(gg1 + gg2)
}

# ============================================================================
# STEP 6: Pathway-specific analysis
# ============================================================================

# Identify significantly changed signaling pathways
if(exists("cellchat_merged")) {
  # Compare signaling pathways
  gg1 <- rankNet(cellchat_merged, mode = "comparison", stacked = T, do.stat = TRUE)
  gg2 <- rankNet(cellchat_merged, mode = "comparison", stacked = F, do.stat = TRUE)
  gg1 + gg2
  
  # Identify upregulated and downregulated pathways
  pathways.show <- c("VEGF", "TGFb", "PDGF", "WNT") # Adjust based on your interest
  
  for(pathway in pathways.show) {
    if(pathway %in% cellchat_merged@netP$pathways) {
      # Chord diagram for specific pathway
      pathways.show.single <- pathway
      weight.max <- getMaxWeight(cellchat_list, attribute = c("netP"), 
                                slot.name = c("net"), 
                                comparison = pathways.show.single)
      par(mfrow = c(2,2), xpd=TRUE)
      
      for(i in 1:length(cellchat_list)) {
        netVisual_aggregate(cellchat_list[[i]], signaling = pathways.show.single, 
                          vertex.weight = groupSize, 
                          weight.max = weight.max, 
                          vertex.size.max = 15,
                          title.name = paste(pathways.show.single, "pathway network in", 
                                           names(cellchat_list)[i]))
      }
    }
  }
}

# ============================================================================
# STEP 7: Statistical analysis and output
# ============================================================================

# Extract significant interactions for further analysis
extract_significant_interactions <- function(cellchat_obj, condition_name) {
  # Get communication probability matrix
  comm_prob <- cellchat_obj@net$prob
  
  # Get pathway information
  pathways <- cellchat_obj@netP$pathways
  
  # Create summary dataframe
  results <- data.frame(
    condition = condition_name,
    n_interactions = sum(cellchat_obj@net$count > 0),
    total_strength = sum(cellchat_obj@net$weight),
    n_pathways = length(pathways),
    stringsAsFactors = FALSE
  )
  
  return(results)
}

# Create summary table
summary_results <- data.frame()
for(condition in names(cellchat_list)) {
  result <- extract_significant_interactions(cellchat_list[[condition]], condition)
  summary_results <- rbind(summary_results, result)
}

print("Summary of cell-cell interactions by condition:")
print(summary_results)

# Save results
write.csv(summary_results, "cellchat_summary_results.csv", row.names = FALSE)

# ============================================================================
# Additional visualizations and analyses
# ============================================================================

# Bubble plot showing ligand-receptor pairs
if(exists("cellchat_merged")) {
  # Show top differential ligand-receptor pairs
  netVisual_bubble(cellchat_merged, sources.use = 1:4, targets.use = 1:4, 
                   comparison = c(1, 2), angle.x = 45)
}

print("Analysis complete! Check the generated plots and summary table.")
print("Key files saved:")
print("- cellchat_summary_results.csv: Summary statistics")
print("- Various plots showing cell-cell interaction networks")
```