---
title: "ATTEMPT Cell Chat"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, message = F, warning=F}
#| include: false
source("/mmfs1/gscratch/togo/yejichoi/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
library(future)
library(future.apply)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(arsenal)
library(Biobase)
library(msigdbr)
library(kableExtra)
# library(knitr)
library(REDCapR)
# library(data.table)
library(emmeans)
library(NMF)
library(pheatmap)
library(UpSetR)
library(enrichR)
library(WriteXLS)
library(SAVER)
library(readxl)
library(limma)
library(edgeR)
library(BiocGenerics)
library(GSEABase)
library(slingshot)
library(SingleCellExperiment)
library(MAST)
library(muscat)
library(scater)
library(Seurat)
library(jsonlite)
library(dplyr)
library(glmmTMB)
library(reshape2)
library(broom.mixed) 
library(foreach)
library(doParallel)
library(nebula)
library(Matrix)
library(scran)
library(DirichletReg)
library(BiocParallel)
library(scDC)
library(CellChat)
library(liana)
library(magrittr)
library(circlize)
library(slingshot)
library(uwot)
library(mclust, quietly = TRUE)
library(condiments)
library(plotly)
library(grDevices)
library(lme4)
library(lmerTest)
library(emmeans)
library(htmlwidgets)
library(mixtools)
library(quantreg)
```

```{r include = F}
reticulate::use_python("/mmfs1/gscratch/togo/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")

```

```{r echo = F, eval = T}
# Read in clean seurat object saved from attempt_CROC_analysis.qmd
temp_file <- tempfile(fileext = ".rds")
s3$download_file("attempt", 'cleaned_data/attempt_clean_so.rds', temp_file)
attempt_so <- readRDS(temp_file)
``` 

```{r echo = F}
# clustering cells
# cl1 <- Mclust(rd1)$classification
# colData(sce_pt)$GMM <- cl1
# 
# library(RColorBrewer)
# plot(rd1, col = brewer.pal(9,"Set1")[cl1], pch=16, asp = 1)
# 
# cl2 <- kmeans(rd1, centers = 4)$cluster
# colData(sce_pt)$kmeans <- cl2
# 
# plot(rd1, col = brewer.pal(9,"Set1")[cl2], pch=16, asp = 1)
# 
# sce_pt_gmm <- slingshot(sce_pt, clusterLabels = 'GMM', reducedDim = 'PCA')
```

# PT (KPMP celltype)

```{r echo = F}
pt_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("aPT", "PT-S1/S2", "PT-S3"),
  start_cluster = "PT-S1/S2",
  custom_colors = color_5,
  suffix = "pt_kpmp",
  aws_s3 = s3
)
```

# PT (non-KPMP celltype)

```{r echo = F}
pt_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"),
  start_cluster = "PT-2",
  custom_colors = color_5,
  suffix = "pt",
  aws_s3 = s3
)
```

# TAL (KPMP celltype)

```{r echo = F}
tal_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("aTAL", "C-TAL-1", "C-TAL-2", "dTAL"),
  start_cluster = "aTAL",
  custom_colors = color_5,
  suffix = "tal_kpmp",
  aws_s3 = s3
)
```

# TAL + ATL (KPMP celltype)

```{r echo = F}
tal_atl_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("aTAL", "C-TAL-1", "C-TAL-2", "dTAL", "ATL"),
  start_cluster = "aTAL",
  custom_colors = color_5,
  suffix = "tal_atl_kpmp",
  aws_s3 = s3
)
```

# TAL (non-KPMP celltype)

```{r echo = F}
tal_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("TAL-1", "TAL-2", "TAL-3"),
  start_cluster = "TAL-2",
  custom_colors = color_5,
  suffix = "tal",
  aws_s3 = s3
)
```

# TAL + ATL (non-KPMP celltype)

```{r echo = F}
tal_atl_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("TAL-1", "TAL-2", "TAL-3", "ATL"),
  start_cluster = "TAL-2",
  custom_colors = color_5,
  suffix = "tal_atl",
  aws_s3 = s3
)
```



# IC (KPMP celltype)

```{r echo = F}
ic_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("IC-A", "IC-B", "aIC"),
  start_cluster = "IC-A",
  custom_colors = color_5,
  suffix = "ic_kpmp",
  aws_s3 = s3
)
```

# IC (non-KPMP celltype)

```{r echo = F}
ic_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("IC-A", "IC-B"),
  start_cluster = "IC-A",
  custom_colors = color_5,
  suffix = "ic",
  aws_s3 = s3
)
```

# EC (KPMP celltype)

```{r echo = F}
ec_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups =c("EC-AEA", "EC-AVR", "EC-GC", "EC-LYM", "EC-PTC"),
  start_cluster = "EC-GC",
  custom_colors = color_5,
  suffix = "ec_kpmp",
  aws_s3 = s3
)
```

# EC (non-KPMP celltype)

```{r echo = F}
ec_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"),
  start_cluster = "EC-GC",
  custom_colors = color_5,
  suffix = "ec",
  aws_s3 = s3
)
```
