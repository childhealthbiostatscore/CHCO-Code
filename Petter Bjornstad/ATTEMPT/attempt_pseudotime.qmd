---
title: "ATTEMPT Cell Chat"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, message = F, warning=F}
#| include: false
source("/mmfs1/gscratch/togo/yejichoi/CHCO-Code/Petter Bjornstad/ATTEMPT/attempt_functions.R")
library(future)
library(future.apply)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(arsenal)
library(Biobase)
library(msigdbr)
library(kableExtra)
# library(knitr)
library(REDCapR)
# library(data.table)
library(emmeans)
library(NMF)
library(pheatmap)
library(UpSetR)
library(enrichR)
library(WriteXLS)
library(SAVER)
library(readxl)
library(limma)
library(edgeR)
library(BiocGenerics)
library(GSEABase)
library(slingshot)
library(SingleCellExperiment)
library(MAST)
library(muscat)
library(scater)
library(Seurat)
library(jsonlite)
library(dplyr)
library(glmmTMB)
library(reshape2)
library(broom.mixed) 
library(foreach)
library(doParallel)
library(nebula)
library(Matrix)
library(scran)
library(DirichletReg)
library(BiocParallel)
library(CellChat)
library(liana)
library(magrittr)
library(circlize)
library(slingshot)
library(uwot)
library(mclust, quietly = TRUE)
library(condiments)
library(plotly)
library(grDevices)
library(lme4)
library(lmerTest)
library(emmeans)
library(htmlwidgets)
library(mixtools)
library(quantreg)
```

```{r include = F}
reticulate::use_python("/mmfs1/gscratch/togo/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")

```

```{r echo = F, eval = T}
# Read in clean seurat object saved from attempt_CROC_analysis.qmd
temp_file <- tempfile(fileext = ".rds")
s3$download_file("attempt", 'cleaned_data/attempt_clean_so.rds', temp_file)
attempt_so <- readRDS(temp_file)
``` 

```{r echo = F}
# clustering cells
# cl1 <- Mclust(rd1)$classification
# colData(sce_pt)$GMM <- cl1
# 
# library(RColorBrewer)
# plot(rd1, col = brewer.pal(9,"Set1")[cl1], pch=16, asp = 1)
# 
# cl2 <- kmeans(rd1, centers = 4)$cluster
# colData(sce_pt)$kmeans <- cl2
# 
# plot(rd1, col = brewer.pal(9,"Set1")[cl2], pch=16, asp = 1)
# 
# sce_pt_gmm <- slingshot(sce_pt, clusterLabels = 'GMM', reducedDim = 'PCA')
```

# PT (KPMP celltype)

```{r echo = F}
pt_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("aPT", "PT-S1/S2", "PT-S3"),
  start_cluster = "PT-S1/S2",
  custom_colors = color_5,
  suffix = "pt_kpmp",
  aws_s3 = s3,
  tau = c(0.25, 0.65, 0.85)
)
# 
# pt_kpmp_results$pseudotime_df
# pt_kpmp_results$sce_df$hba1c_delta
# 
# pt_kpmp_results$sce_df$hba1c_delta_dir <- ifelse(pt_kpmp_results$sce_df$hba1c_delta < 0, "neg", "pos")
# wilcox.test(slingPseudotime_1 ~ hba1c_delta_dir, data = pt_kpmp_results$sce_df)
# tapply(pt_kpmp_results$sce_df$slingPseudotime_1,
#        pt_kpmp_results$sce_df$hba1c_delta_dir,
#        median, na.rm = TRUE)
```

```{r echo = F}
calculate_celltype_proportions <- function(data, bin_width = 10) {
  
  # Create pseudotime bins
  data_with_bins <- data %>%
    dplyr::mutate(
      bin_start = floor(slingPseudotime_1 / bin_width) * bin_width,
      bin_end = bin_start + bin_width,
      bin_label = paste0(bin_start, "-", bin_end)
    )
  
  # Calculate proportions for each bin
  proportions <- data_with_bins %>%
    group_by(bin_label, bin_start) %>%
    dplyr::count(KPMP_celltype) %>%
    dplyr::mutate(
      total_in_bin = sum(n),
      proportion = (n / total_in_bin) * 100
    ) %>%
    ungroup()
  
  # Ensure all celltypes are represented in each bin
  all_bins <- unique(proportions$bin_label)
  all_celltypes <- unique(data$KPMP_celltype)
  
  complete_proportions <- proportions %>%
    complete(
      bin_label = all_bins,
      KPMP_celltype = all_celltypes,
      fill = list(n = 0, proportion = 0)
    ) %>%
    group_by(bin_label) %>%
    dplyr::mutate(
      bin_start = min(bin_start, na.rm = TRUE),
      total_in_bin = sum(n)
    ) %>%
    ungroup() %>%
    arrange(bin_start, KPMP_celltype)
  
  return(complete_proportions)
}

# compositional pie charts of cell groups

# pseudotime 0 - 50 (every 10)
proportions_df <- calculate_celltype_proportions(pt_kpmp_results$sce_df, bin_width = 10) %>%
  group_by(bin_start) %>%
  mutate(ypos = cumsum(proportion)- 0.5*proportion ) %>%
  ungroup()

p1 <- proportions_df %>%
  filter(bin_start == 0) %>%
  ggplot(aes(x = "", y = proportion, fill = KPMP_celltype)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  theme_void() + 
  labs(
    fill = NULL,
    caption = paste0(
      "<span style='color:#264653'>aPT: ", round(proportions_df[proportions_df$KPMP_celltype == "aPT" & proportions_df$bin_start == 0,]$proportion, 1), "%</span><br>",
      "<span style='color:#2a9d8f'>PT-S1/S2: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S1/S2" & proportions_df$bin_start == 0,]$proportion, 1), "%</span><br>",
      "<span style='color:#e9c46a'>PT-S3: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S3" & proportions_df$bin_start == 0,]$proportion, 1), "%</span>"
    )) +
  theme(
    plot.caption = element_markdown(hjust = 0.5, face = "bold")) +
  scale_fill_manual(values = c("aPT"= "#264653","PT-S1/S2"="#2a9d8f","PT-S3" = "#e9c46a"))

p2 <- proportions_df %>%
  filter(bin_start == 10) %>%
  ggplot(aes(x = "", y = proportion, fill = KPMP_celltype)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  theme_void() + 
  labs(
    fill = NULL,
    caption = paste0(
      "<span style='color:#264653'>aPT: ", round(proportions_df[proportions_df$KPMP_celltype == "aPT" & proportions_df$bin_start == 10,]$proportion, 1), "%</span><br>",
      "<span style='color:#2a9d8f'>PT-S1/S2: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S1/S2" & proportions_df$bin_start == 10,]$proportion, 1), "%</span><br>",
      "<span style='color:#e9c46a'>PT-S3: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S3" & proportions_df$bin_start == 10,]$proportion, 1), "%</span>"
    )) +
  theme(
    plot.caption = element_markdown(hjust = 0.5, face = "bold")) +
  scale_fill_manual(values = c("aPT"= "#264653","PT-S1/S2"="#2a9d8f","PT-S3" = "#e9c46a"))

p3 <- proportions_df %>%
  filter(bin_start == 20) %>%
  ggplot(aes(x = "", y = proportion, fill = KPMP_celltype)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  theme_void() + 
  labs(
    fill = NULL,
    caption = paste0(
      "<span style='color:#264653'>aPT: ", round(proportions_df[proportions_df$KPMP_celltype == "aPT" & proportions_df$bin_start == 20,]$proportion, 1), "%</span><br>",
      "<span style='color:#2a9d8f'>PT-S1/S2: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S1/S2" & proportions_df$bin_start == 20,]$proportion, 1), "%</span><br>",
      "<span style='color:#e9c46a'>PT-S3: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S3" & proportions_df$bin_start == 20,]$proportion, 1), "%</span>"
    )) +
  theme(
    plot.caption = element_markdown(hjust = 0.5, face = "bold")) +
  scale_fill_manual(values = c("aPT"= "#264653","PT-S1/S2"="#2a9d8f","PT-S3" = "#e9c46a"))

p4 <- proportions_df %>%
  filter(bin_start == 30) %>%
  ggplot(aes(x = "", y = proportion, fill = KPMP_celltype)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  theme_void() + 
  labs(
    fill = NULL,
    caption = paste0(
      "<span style='color:#264653'>aPT: ", round(proportions_df[proportions_df$KPMP_celltype == "aPT" & proportions_df$bin_start == 30,]$proportion, 1), "%</span><br>",
      "<span style='color:#2a9d8f'>PT-S1/S2: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S1/S2" & proportions_df$bin_start == 30,]$proportion, 1), "%</span><br>",
      "<span style='color:#e9c46a'>PT-S3: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S3" & proportions_df$bin_start == 30,]$proportion, 1), "%</span>"
    )) +
  theme(
    plot.caption = element_markdown(hjust = 0.5, face = "bold")) +
  scale_fill_manual(values = c("aPT"= "#264653","PT-S1/S2"="#2a9d8f","PT-S3" = "#e9c46a"))

p5 <- proportions_df %>%
  filter(bin_start == 40) %>%
  ggplot(aes(x = "", y = proportion, fill = KPMP_celltype)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y") +
  theme_void() +
  labs(
    fill = NULL,
    caption = paste0(
      "<span style='color:#264653'>aPT: ", round(proportions_df[proportions_df$KPMP_celltype == "aPT" & proportions_df$bin_start == 40,]$proportion, 1), "%</span><br>",
      "<span style='color:#2a9d8f'>PT-S1/S2: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S1/S2" & proportions_df$bin_start == 40,]$proportion, 1), "%</span><br>",
      "<span style='color:#e9c46a'>PT-S3: ", round(proportions_df[proportions_df$KPMP_celltype == "PT-S3" & proportions_df$bin_start == 40,]$proportion, 1), "%</span>"
    )) +
  theme(
    plot.caption = element_markdown(hjust = 0.5, face = "bold")) +
  scale_fill_manual(values = c("aPT"= "#264653","PT-S1/S2"="#2a9d8f","PT-S3" = "#e9c46a"))

ggarrange(pt_kpmp_results$p_pseudotime$plot, 
          ggarrange(p1, p2, p3, p4, p5, nrow = 1,
                    common.legend = T, legend = "bottom"),
          nrow = 2, align = "v", heights = c(4,1))

temp_file <- tempfile(fileext = ".png")
ggsave(filename = temp_file, width = 10, height = 10)
s3$upload_file(temp_file, "attempt", file.path("slingshot", paste0("attempt_pt_slingshot_density_celltype_pie.png")))


# compositional pie charts of treatment groups


```


# PT (non-KPMP celltype)

```{r echo = F}
pt_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("PT-1", "PT-2", "PT-3", "PT-4", "PT-5"),
  start_cluster = "PT-2",
  custom_colors = color_5,
  suffix = "pt",
  aws_s3 = s3,
  tau = c(0.25, 0.65, 0.85)
)
```

# TAL (KPMP celltype)

```{r echo = F}
tal_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("aTAL", "C-TAL-1", "C-TAL-2", "dTAL"),
  start_cluster = "aTAL",
  custom_colors = color_5,
  suffix = "tal_kpmp",
  aws_s3 = s3
)
```

# TAL + ATL (KPMP celltype)

```{r echo = F}
tal_atl_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("aTAL", "C-TAL-1", "C-TAL-2", "dTAL", "ATL"),
  start_cluster = "aTAL",
  custom_colors = color_5,
  suffix = "tal_atl_kpmp",
  aws_s3 = s3
)
```

# TAL (non-KPMP celltype)

```{r echo = F}
tal_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("TAL-1", "TAL-2", "TAL-3"),
  start_cluster = "TAL-2",
  custom_colors = color_5,
  suffix = "tal",
  aws_s3 = s3
)
```

# TAL + ATL (non-KPMP celltype)

```{r echo = F}
tal_atl_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("TAL-1", "TAL-2", "TAL-3", "ATL"),
  start_cluster = "TAL-2",
  custom_colors = color_5,
  suffix = "tal_atl",
  aws_s3 = s3
)
```



# IC (KPMP celltype)

```{r echo = F}
ic_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups = c("IC-A", "IC-B", "aIC"),
  start_cluster = "IC-A",
  custom_colors = color_5,
  suffix = "ic_kpmp",
  aws_s3 = s3
)
```

# IC (non-KPMP celltype)

```{r echo = F}
ic_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("IC-A", "IC-B"),
  start_cluster = "IC-A",
  custom_colors = color_5,
  suffix = "ic",
  aws_s3 = s3
)
```

# EC (KPMP celltype)

```{r echo = F}
ec_kpmp_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "KPMP_celltype",
  celltype_groups =c("EC-AEA", "EC-AVR", "EC-GC", "EC-LYM", "EC-PTC"),
  start_cluster = "EC-GC",
  custom_colors = color_5,
  suffix = "ec_kpmp",
  aws_s3 = s3
)
```

# EC (non-KPMP celltype)

```{r echo = F}
ec_results <- analyze_pseudotime_by_celltype(
  so = attempt_so,
  celltype_col = "celltype",
  celltype_groups = c("EC-PTC", "EC-GC", "EC-AEA", "EC-LYM"),
  start_cluster = "EC-GC",
  custom_colors = color_5,
  suffix = "ec",
  aws_s3 = s3
)
```
