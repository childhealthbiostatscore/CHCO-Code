---
title: "Proteomics and HTN - SOMAScan correlation"
author: "Laura Pyle, Ye Ji Choi & Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
execute:
  echo: false
  message: false
---

```{r libraries}
#| include: false
library(psych)
library(corrplot)
library(pander)
library(dplyr)
library(tableone)
library(knitr)
library(gtools)
library(ggpubr)
library(parallel)
library(limma)
library(Hmisc)
library(knitr)
library(tidyverse)
library(gtsummary)
library(ggpubr)
library(lmerTest)
library(parallel)
library(emmeans)
library(RColorBrewer)
library(VennDiagram)
library(broom.mixed)
# Print all pander tables
panderOptions("knitr.auto.asis", FALSE)
```

```{r data import}
#| include: false
prot_include <- c("SEZ6L","NCAM-120","NCAM1","SCG3","Aminoacylase-1",
"WFKN2","ESPN","PURA1","SERB","CHL1","LSAMP",
"Growth hormone receptor","OFUT1")
seq_include <- c("seq.19563.3","seq.4498.62",
"seq.20161.41","seq.7957.2","seq.3343.1","seq.24957.6",
"seq.13998.26","seq.24681.2","seq.8958.51","seq.2999.6",
"seq.2948.58","seq.5634.39")
load("/Users/pylell/Library/CloudStorage/OneDrive-SharedLibraries-UW/Bjornstad/Biostatistics Core Shared Drive/Proteomics and HTN/Data_Cleaned/analysis_dataset.RData")
top_htn <- top_htn_df %>%
  filter(AptName %in% seq_include) %>%
  slice_max(abs(log(estimate)), n = 21) %>%
  pull(AptName)
df <- NULL

# source("~/GitHub/CHCO-Code/Petter Bjornstad/Proteomics and DKD/create_today_dkd_analysis_dataset.R")
# load("/Volumes/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Proteomics and HTN/Data_Cleaned/analysis_dataset.RData")
load("/Users/pylell/Library/CloudStorage/OneDrive-SharedLibraries-UW/Bjornstad/Biostatistics Core Shared Drive/Teen Labs/Data_Cleaned/analysis_dataset.RData")
# Tim already log transformed proteins when creating dataframe
df$map <- NA
for (i in 1:nrow(df)) {
  df[i,]$map <- df[i,]$dbp + ((1/3) * (df[i,]$sbp - df[i,]$dbp))
}
df_long_keep <- df %>% select(ID, visit, sbp, dbp, bmi, all_of(seq_include))

load("/Users/pylell/Library/CloudStorage/OneDrive-SharedLibraries-UW/Bjornstad/Biostatistics Core Shared Drive/TODAY subaward/Somalogic data raw/analytes.Rdata")
analytes_keep <- analytes %>% filter(AptName %in% seq_include)

# create df with change in SBP/DBP and proteins between baseline and 1 year
deltas_temp <- df %>% filter(visit %in% c("Month 1", "Year 1"))
deltas_temp <- deltas_temp %>% select(ID, visit, sbp, dbp, bmi, all_of(seq_include))
deltas <- reshape(deltas_temp, timevar = "visit", idvar = "ID", direction = "wide")
deltas$sbp <- deltas$`sbp.Year 1` - deltas$`sbp.Month 1`
deltas$dbp <- deltas$`dbp.Year 1` - deltas$`dbp.Month 1`
deltas$bmi <- deltas$`bmi.Year 1` - deltas$`bmi.Month 1`
deltas$seq.19563.3 <- deltas$`seq.19563.3.Year 1` - deltas$`seq.19563.3.Month 1`
deltas$seq.4498.62 <- deltas$`seq.4498.62.Year 1` - deltas$`seq.4498.62.Month 1`
deltas$seq.20161.41 <- deltas$`seq.20161.41.Year 1` - deltas$`seq.20161.41.Month 1`
deltas$seq.7957.2 <- deltas$`seq.7957.2.Year 1` - deltas$`seq.7957.2.Month 1`
deltas$seq.3343.1 <- deltas$`seq.3343.1.Year 1` - deltas$`seq.3343.1.Month 1`
deltas$seq.24957.6 <- deltas$`seq.24957.6.Year 1` - deltas$`seq.24957.6.Month 1`
deltas$seq.13998.26 <- deltas$`seq.13998.26.Year 1` - deltas$`seq.13998.26.Month 1`
deltas$seq.24681.2 <- deltas$`seq.24681.2.Year 1` - deltas$`seq.24681.2.Month 1`
deltas$seq.8958.51 <- deltas$`seq.8958.51.Year 1` - deltas$`seq.8958.51.Month 1`
deltas$seq.2999.6 <- deltas$`seq.2999.6.Year 1` - deltas$`seq.2999.6.Month 1`
deltas$seq.2948.58 <- deltas$`seq.2948.58.Year 1` - deltas$`seq.2948.58.Month 1`
deltas$seq.5634.39 <- deltas$`seq.5634.39.Year 1` - deltas$`seq.5634.39.Month 1`
deltas <- deltas %>% select(ID, sbp, dbp, bmi, seq.19563.3, seq.4498.62, seq.20161.41, seq.7957.2, seq.3343.1, 
                            seq.24957.6, seq.13998.26, seq.24681.2, seq.8958.51, seq.2999.6, seq.2948.58, seq.5634.39 )

```

```{r functions}
cor_and_plot_soma <- function(data, vars) {
  # Format matrix
  analytes_temp <- analytes
  analytes_temp$Target_apt <- paste0(analytes_temp$Target, " (", analytes_temp$AptName, ")")
  d <- data[, c(vars, "acr_u", "sbp", "dbp", "map", "gfr_raw_plasma", "gfr_bsa_plasma")]
  n <- c(
    analytes_temp$Target_apt[match(vars, analytes_temp$AptName)],
    "acr_u", "sbp", "dbp", "map", "gfr_raw_plasma", "gfr_bsa_plasma"
  )
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(3)")
  names(d) <- n
  # Correlations
  M <- corr.test(data.matrix(d), normal = F, method = "spearman", adjust = "none")
  corrplot(round(M$r, 3),
    p.mat = M$p, method = "circle", type = "lower", insig = "blank",
    addCoef.col = "white", diag = FALSE
  )
  #prot_heatmap <- top_htn_df %>%
  #filter(Target %in% c("WFKN2","SEZ6L","SCG3","LSAMP","T132B","Nr-CAM","PEDF","IGLO5",
  #                     "PCD10:ECD","UNC5H4","SLIK1",
  #                     "Secretoglobin family 3A member 1","sICAM-5")) %>%
  #pull(AptName)
  #colnames_M <- top_htn_df %>%
  #  filter(AptName %in% prot_heatmap) %>%
  # pull(Target)
  #colnames_M <- paste0(colnames_M,"_",prot_heatmap)
  # Print a nice looking table
  r <- data.frame(round(M$r, 3))
 # colnames(r)[1:length(colnames_M)] <- colnames_M
  #rownames(r)[1:length(colnames_M)] <- colnames_M
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Coefficients")
  cat("\n")
  # print p-values
  p <- data.frame(round(M$p, 3))
  #colnames(p)[1:length(colnames_M)] <- colnames_M
 # rownames(p)[1:length(colnames_M)] <- colnames_M
  cat("\n")
  pander(p, caption = "P-values")
  cat("\n")
   # print Ns
  n <- data.frame(round(M$n, 3))
  #colnames(n)[1:length(colnames_M)] <- colnames_M
  #rownames(n)[1:length(colnames_M)] <- colnames_M
  cat("\n")
  pander(n, caption = "Number of observations")
  cat("\n")
}
```

```{r, include=FALSE}
corr_plot_modified_nodict <- function(data, X, Y, cor_method = "spearman", adj_var = NULL, 
                               method = "color", insig = "pch", coef_col = NULL,
                               pch = 4, pch.col = "black", pch.cex = 0, colnames_M, rownames_M) {
  prot_heatmap <- top_htn_df %>%
  filter(AptName %in% seq_include) %>%
  pull(AptName)
  analytes_temp <- analytes
  analytes_temp$Target_apt <- paste0(analytes_temp$Target, " (", analytes_temp$AptName, ")")
  TA <- analytes_temp$Target_apt[match(prot_heatmap, analytes_temp$AptName)]
  colnames(Y) <- TA
  n_cols = length(Y)
  M <- cor(y = Y,
           x = X,
           use = "pairwise.complete.obs",
           method = cor_method)
  M <- M[,order(colnames(M))]
  if (!is.na(adj_var)){
    x_vars <- rep(X, times = length(Y))
    x_coord <- rep(seq(1,length(Y)), each = length(X))
    y_vars <- rep(Y, each = length(X))
    y_coord <- rep(seq(length(X),1), times = length(Y))
    lm_extracted <- data.frame(yName = character(0),
                               xName = character(0),
                               x = numeric(0),
                               y = numeric(0),
                               adj_var = character(0),
                               adj_x_coef = numeric(0),
                               adj_x_pval = numeric(0))
    for (i in 1:length(x_vars)) {
      if(x_vars[i] != y_vars[i]) {
        lm_formula <- as.formula(paste0(y_vars[i], "~", x_vars[i], "+", adj_var))
        lm_model <- lm(lm_formula, data = data)
        lm_summary <- summary(lm_model)
        lm_coef <- lm_summary$coefficient[x_vars[i], "Estimate"]
        lm_p_val <- lm_summary$coefficient[x_vars[i], "Pr(>|t|)"]
        lm_extracted <- rbind(lm_extracted,
                              data.frame(
                                yName = y_vars[i],
                                xName = x_vars[i],
                                x = x_coord[i],
                                y = y_coord[i],
                                adj_var = adj_var,
                                adj_x_coef = lm_coef,
                                adj_x_pval = lm_p_val))
      }
    }
  }
  
  correlation_p_value <- correlation_p_value_matrix(data, relevant_vars = c(colnames(Y),colnames(X)), n_cols = n_cols, cor_method = cor_method, Y=Y, X=X)

  corrplot(M,
           p.mat = correlation_p_value,
           method = method,
           tl.col = "black",
           tl.srt = 45,
           tl.cex = 1.2,
           insig = insig,
           addCoef.col = coef_col,
           addgrid.col = 'lightgray',
           number.digits = 2,
           pch.col = pch.col, 
           pch = pch,
           pch.cex = pch.cex)$corrPos -> p1
  p1_sub <- subset(p1, p.value <= 0.05)
  p1_sub2 <- subset(p1, p.value <= 0.05 & abs(corr) >= 0.7)
  
  if (nrow(p1) > 0) {
    graphics::text(p1$x, p1$y, sprintf("%.2f", p1$corr), adj = c(0.5, 0), cex=1.2)
    if (nrow(p1_sub > 0)) {
      graphics::text(p1_sub$x, p1_sub$y, stars.pval(p1_sub$p.value), adj = c(0.5, 2), cex=1.2)
    }
  }
  if (nrow(p1_sub2) > 0) {
    graphics::text(p1_sub2$x, p1_sub2$y, sprintf("%.2f", p1_sub2$corr), col = "white", adj = c(0.5, 0), cex=1.2)
    graphics::text(p1_sub2$x, p1_sub2$y, stars.pval(p1_sub2$p.value), col = "white", adj = c(0.5, 2), cex=1.2)
  }
  if (!is.na(adj_var)) {
    lm_extracted <- subset(lm_extracted, adj_x_pval <= 0.05)
    if (nrow(lm_extracted) > 0){
      graphics::rect(xleft = lm_extracted$x-.45, 
                     ybottom = lm_extracted$y-.45,
                     xright = lm_extracted$x+.45,
                     ytop = lm_extracted$y+.45)
    }
  }
}


correlation_p_value_matrix <- function(data, relevant_vars, n_cols, cor_method = "spearman", Y=Y, X=X) {
  analytes_temp <- analytes
  analytes_temp$Target_apt <- paste0(analytes_temp$Target, " (", analytes_temp$AptName, ")")
  # Filter relevant variables for the correlation matrix
  #relevant_vars_apt <- analytes_temp$AptName[match(colnames(Y), analytes_temp$Target_apt)]
  Y <- Y[,order(colnames(Y))]
  dat_correlation <- cbind(Y,X) %>%
    dplyr::select(all_of(relevant_vars))
    # Compute p-values 
  res2 <- Hmisc::rcorr(as.matrix(dat_correlation),
                       type = cor_method)
  corr_pval <- as.data.frame(res2$P) %>%
    dplyr::select(all_of(relevant_vars[1:n_cols]))
  corr_pval = corr_pval[(n_cols + 1):nrow(corr_pval),]
  corr_pval <- corr_pval[,order(colnames(corr_pval))]
  return(as.matrix(corr_pval))
}
```

# Correlations of baseline SBP/DBP/BMI with proteins

```{r results='asis', dpi=1200}
prot_heatmap <- top_htn_df %>%
  filter(AptName %in% seq_include) %>%
  pull(AptName)
colnames_M <- top_htn_df %>%
  filter(AptName %in% seq_include) %>%
  pull(Target)
#colnames_M <- paste0(colnames_M,"_",prot_heatmap)
png(height = 3000, width = 2500, file = "/Users/pylell/Dropbox/TODAY HTN and DKD output/local_T2D_BP_heatmap_TL_baseline.png", res = 170)
corr_plot_modified_nodict(data=df, 
                   Y=df[,prot_heatmap],   
                 X=df[,c("sbp","dbp","bmi")],
                 cor_method="spearman", adj_var = NA,
                 colnames_M=colnames_M,
                 rownames_M=c("SBP","DBP","BMI"))
dev.off()
```

# Correlations of change in SBP/DBP/BMI with changes in proteins

```{r results='asis', dpi=1200}
prot_heatmap <- top_htn_df %>%
  filter(AptName %in% seq_include) %>%
  pull(AptName)
colnames_M <- top_htn_df %>%
  filter(AptName %in% seq_include) %>%
  pull(Target)
#colnames_M <- paste0(colnames_M,"_",prot_heatmap)
png(height = 3000, width = 2500, file = "/Users/pylell/Dropbox/TODAY HTN and DKD output/local_T2D_BP_heatmap_TL_deltas.png", res = 170)
corr_plot_modified_nodict(data=deltas, 
                   Y=deltas[,prot_heatmap],   
                 X=deltas[,c("sbp","dbp","bmi")],
                 cor_method="spearman", adj_var = NA,
                 colnames_M=colnames_M,
                 rownames_M=c("SBP","DBP","BMI"))
dev.off()
```

# Mixed models and plots - proteins alone for plotting

```{r}
#| cache: true
seqs <- seq_include
# Parallel processing
cl <- makeForkCluster(8)
rows <- parLapply(cl, seqs, function(y) {
  f <- as.formula(paste0(y, "~ visit + (1|ID)"))
  m <- lmer(f, data = df_long_keep)
  emm <- emmeans(m, specs = ~visit)
  # Contrast not necessary with current parameterization, but nice to have written
  c <- contrast(emm,
    method =
      list("Year 1 - Month 1" = c(0, 0, 1, 0, 0, 0, 0) - c(1, 0, 0, 0, 0, 0, 0))
  )
  c <- as.data.frame(c)
  c$AptName <- y
  return(c)
})
stopCluster(cl)

cl <- makeForkCluster(8)
means <- parLapply(cl, seqs, function(y) {
  f <- as.formula(paste0(y, "~ visit + (1|ID)"))
  m <- lmer(f, data = df_long_keep)
  emm <- emmeans(m, specs = ~visit)
  # Contrast not necessary with current parameterization, but nice to have written
  c <- contrast(emm,
    method =
      list("Year 1 - Month 1" = c(0, 0, 1, 0, 0, 0, 0) - c(1, 0, 0, 0, 0, 0, 0))
  )
  c <- as.data.frame(c)
  c$AptName <- y
  emm <- as.data.frame(emm)
  emm$AptName <- y
  return(emm)
})
stopCluster(cl)

```

```{r}
# Format results
lmm_res <- do.call(rbind, rows)
lmm_res$p.value.adj <- p.adjust(lmm_res$p.value, method = "BH")
lmm_res$Target <- analyte_info$Target[match(lmm_res$AptName, analyte_info$AptName)]
lmm_res <- lmm_res[, c(
  "AptName", "Target", "estimate", "SE", "df",
  "t.ratio", "p.value", "p.value.adj"
)]
lmm_res <- lmm_res[order(lmm_res$p.value, decreasing = F), ]

means_res <- NULL
for (i in 1:length(seq_include)) {
  temp <- summary(means[[i]])
  #a <- analyte_info[i, c("Target", "TargetFullName", "UniProt", "AptName")]
  Target <- analyte_info$Target[match(temp$AptName, analyte_info$AptName)]
  temp <- cbind(Target, temp)
  means_res <- rbind(means_res, temp)
}

lmm_res_prot <- lmm_res
means_res_prot <- means_res
lmm_res <- NULL
means_res <- NULL
```

# Mixed models and plots - SBP/DBP alone for plotting

```{r}
#| cache: true
bpvars <- c("sbp", "dbp", "bmi")
# Parallel processing
cl <- makeForkCluster(8)
rows <- parLapply(cl, bpvars, function(y) {
  f <- as.formula(paste0(y, "~ visit + (1|ID)"))
  m <- lmer(f, data = df_long_keep)
  emm <- emmeans(m, specs = ~visit)
  # Contrast not necessary with current parameterization, but nice to have written
  c <- contrast(emm,
    method =
      list("Year 1 - Month 1" = c(0, 0, 1, 0, 0, 0, 0) - c(1, 0, 0, 0, 0, 0, 0))
  )
  c <- as.data.frame(c)
  c$AptName <- y
  return(c)
})
stopCluster(cl)

cl <- makeForkCluster(8)
means <- parLapply(cl, bpvars, function(y) {
  f <- as.formula(paste0(y, "~ visit + (1|ID)"))
  m <- lmer(f, data = df_long_keep)
  emm <- emmeans(m, specs = ~visit)
  # Contrast not necessary with current parameterization, but nice to have written
  c <- contrast(emm,
    method =
      list("Year 1 - Month 1" = c(0, 0, 1, 0, 0, 0, 0) - c(1, 0, 0, 0, 0, 0, 0))
  )
  c <- as.data.frame(c)
  c$AptName <- y
  #emm <- as.data.frame(emm)
  #emm$AptName <- y
  return(emm)
})
stopCluster(cl)

```

```{r}
# Format results
lmm_res <- do.call(rbind, rows)
lmm_res$p.value.adj <- p.adjust(lmm_res$p.value, method = "BH")
lmm_res$Target <- analyte_info$Target[match(lmm_res$AptName, analyte_info$AptName)]
lmm_res <- lmm_res[, c(
  "AptName", "Target", "estimate", "SE", "df",
  "t.ratio", "p.value", "p.value.adj"
)]
lmm_res <- lmm_res[order(lmm_res$p.value, decreasing = F), ]
lmm_res <- lmm_res[lmm_res$p.value.adj <= 0.05, ]
kable(lmm_res[1:10, ], digits = 3, row.names = F)

means_res <- NULL
for (i in 1:length(bpvars)) {
  temp <- summary(means[[i]])
  a <- paste0(bpvars[i])
  a <- rbind(a, a, a, a, a, a, a)
  temp <- cbind(a, temp)
  means_res <- rbind(means_res, temp)
}

lmm_res_bp <- lmm_res
means_res_bp <- means_res
means_res_bp$Target <- means_res_bp$a
means_res_bp$a <- NULL
means_res_bp$AptName <- NA
lmm_res <- NULL
means_res <- NULL
```

# Combine means for proteins and SBP/DBP and plot

```{r}
means_res <- rbind(means_res_prot, means_res_bp)
means_res$TA <- ifelse(!(means_res$Target %in% c("sbp","dbp","bmi")), paste0(means_res$Target, " (", means_res$AptName, ")"), means_res$Target)
  
p <- NULL
# loop through proteins and make separate plot for each
TAlist <- unique(means_res$TA)
for (i in TAlist) {
  TA <- unique(means_res[means_res$AptName == i,]$TA)
  p[[i]] <- ggplot(means_res[means_res$TA == i,], aes(x=visit, y=emmean, colour=TA, group=TA)) +
    geom_line() + 
    geom_errorbar(aes(ymin=emmean-SE, ymax=emmean+SE), width=.1, size=1) +
    xlab("") +
    ylab(i) + theme_bw() + theme(legend.position = "none") + scale_color_discrete(name="") 
}

# testing adding bp
p <- NULL
# loop through proteins and make separate plot for each
TAlist <- unique(means_res$TA)
for (i in bpvars) {
  print(i)
  p[[i]] <- ggplot(means_res[means_res$Target == i,], aes(x=visit, y=emmean, colour=TA, group=TA)) +
    geom_line(color = "black", size = 1) + 
    geom_errorbar(aes(ymin=emmean-SE, ymax=emmean+SE), width=.1, size=1, color = "black") +
    xlab("") +
    ylab(toupper(i)) + theme_bw() + theme(legend.position = "none") + scale_color_discrete(name="") 
}

panel_p <- ggarrange(p[[1]],p[[2]],p[[3]], ncol = 3, nrow = 1)
png('/Users/pylell/Dropbox/TODAY HTN and DKD output/Teen-LABS_BP.png', res = 300, width = 14, height = 6, units = "in")
panel_p
dev.off()

```

# Mixed models and plots - proteins vs. SBP/DBP for p-values

## First SBP

```{r}
#| cache: true
seqs <- seq_include
# Parallel processing
cl <- makeForkCluster(8)
rows <- parLapply(cl, seqs, function(y) {
  f <- as.formula(paste0(y, "~ visit + (1|ID) + sbp"))
  m <- lmer(f, data = df_long_keep)
  emm <- emmeans(m, specs = ~sbp)
  c <- summary(m)$coefficients[7,]
  c <- t(c)
  c <- as.data.frame(c)
  c$AptName <- y
  return(c)
})
stopCluster(cl)

```

```{r}
# Format results
lmm_res <- do.call(rbind, rows)
lmm_res$p.value.adj <- p.adjust(lmm_res$`Pr(>|t|)`, method = "BH")
lmm_res$Target <- analyte_info$Target[match(lmm_res$AptName, analyte_info$AptName)]
lmm_res <- lmm_res[, c(
  "AptName", "Target", "Estimate", "Std. Error", "df",
  "t value", "Pr(>|t|)", "p.value.adj"
)]
lmm_res <- lmm_res[order(lmm_res$p.value, decreasing = F), ]

lmm_res_prot_sbp <- lmm_res
lmm_res_prot_sbp$bp_var <- "sbp"
lmm_res <- NULL
means_res <- NULL
```

## Then DBP

```{r}
#| cache: true
seqs <- seq_include
# Parallel processing
cl <- makeForkCluster(8)
rows <- parLapply(cl, seqs, function(y) {
  f <- as.formula(paste0(y, "~ visit + (1|ID) + dbp"))
  m <- lmer(f, data = df_long_keep)
  emm <- emmeans(m, specs = ~dbp)
  c <- summary(m)$coefficients[7,]
  c <- t(c)
  c <- as.data.frame(c)
  c$AptName <- y
  return(c)
})
stopCluster(cl)

```

```{r}
# Format results
lmm_res <- do.call(rbind, rows)
lmm_res$p.value.adj <- p.adjust(lmm_res$`Pr(>|t|)`, method = "BH")
lmm_res$Target <- analyte_info$Target[match(lmm_res$AptName, analyte_info$AptName)]
lmm_res <- lmm_res[, c(
  "AptName", "Target", "Estimate", "Std. Error", "df",
  "t value", "Pr(>|t|)", "p.value.adj"
)]
lmm_res <- lmm_res[order(lmm_res$p.value, decreasing = F), ]

lmm_res_prot_dbp <- lmm_res
lmm_res_prot_dbp$bp_var <- "dbp"
lmm_res <- NULL
means_res <- NULL

lmm_res_bp <- rbind(lmm_res_prot_sbp, lmm_res_prot_dbp)
#means_res <- rbind(means_res_prot_sbp, means_res_prot_dbp)
```

## Then BMI

```{r}
#| cache: true
seqs <- seq_include
# Parallel processing
cl <- makeForkCluster(8)
rows <- parLapply(cl, seqs, function(y) {
  f <- as.formula(paste0(y, "~ visit + (1|ID) + bmi"))
  m <- lmer(f, data = df_long_keep)
  emm <- emmeans(m, specs = ~bmi)
  c <- summary(m)$coefficients[7,]
  c <- t(c)
  c <- as.data.frame(c)
  c$AptName <- y
  return(c)
})
stopCluster(cl)
```

```{r}
# Format results
lmm_res <- do.call(rbind, rows)
lmm_res$p.value.adj <- p.adjust(lmm_res$`Pr(>|t|)`, method = "BH")
lmm_res$Target <- analyte_info$Target[match(lmm_res$AptName, analyte_info$AptName)]
lmm_res <- lmm_res[, c(
  "AptName", "Target", "Estimate", "Std. Error", "df",
  "t value", "Pr(>|t|)", "p.value.adj"
)]
lmm_res <- lmm_res[order(lmm_res$p.value, decreasing = F), ]

lmm_res_prot_bmi <- lmm_res
lmm_res_prot_bmi$bp_var <- "BMI"

lmm_res <- rbind(lmm_res_bp, lmm_res_prot_bmi)
#means_res <- rbind(means_res_prot_sbp, means_res_prot_dbp)
```

```{r}
# write file
write.csv(lmm_res,"/Users/pylell/Dropbox/TODAY HTN and DKD output/TeenLABS_mixed_models_HTN_proteins_BP.csv", row.names = F)
```