---
title: "Proteomics and DKD"
author: "Laura Pyle, Ye Ji Choi & Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
execute:
  echo: false
  message: false
---

```{r libraries}
#| include: false
library(tidyverse)
library(Seurat)
library(psych)
library(ggpmisc)
library(pander)
```

```{r data import}
#| include: false
# source("~/GitHub/CHCO-Code/Petter Bjornstad/Proteomics and DKD/create_today_dkd_analysis_dataset.R")
load("/Volumes/Peds Endo/Petter Bjornstad/Proteomics and DKD/Data_Cleaned/analysis_dataset.RData")
load("/Volumes/Peds Endo/Petter Bjornstad/Proteomics and DKD/Data_Cleaned/analysis_seurat_object.RData")
```

```{r functions}
# Function for converting SOMAScan to Olink
soma_to_olink <- function(soma_ids) {
  ids <- list()
  length(ids) <- length(soma_ids)
  ids <- lapply(soma_ids, function(n) {
    uni <- analytes$UniProt[analytes$AptName == n]
    olink <- olink_map$OlinkID[olink_map$Uniprot.ID == uni]
    return(as.character(na.omit(olink)))
  })
  names(ids) <- soma_ids
  ids <- ids[lapply(ids, length) > 0]
  return(ids)
}
# scRNA correlation with proteomics
scRNA_corr <- function(seurat_object = so, vars) {
  # Get Entrez Gene IDs
  entrez <-
    as.list(analytes$EntrezGeneSymbol[match(vars, analytes$AptName)])
  names(entrez) <- vars
  entrez <- entrez[entrez %in% rownames(seurat_object)]
  entrez <- entrez[!duplicated(entrez)]
  olink <- soma_to_olink(vars)
  # Find cells where most highly expressed
  cells <- FetchData(seurat_object, vars = as.character(entrez))
  cells$type <- seurat_object$generaltype
  cell_counts <- data.frame(table(cells$type))
  cell_perc <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ mean(.x > 0, na.rm = TRUE))) %>%
    column_to_rownames("type")
  cells <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
    column_to_rownames("type")
  max <- lapply(cells, function(c) {
    rownames(cells)[order(c, decreasing = T)[1:2]]
  })
  w <- which(unlist(lapply(cell_perc, function(c) {
    any(c >= 0.1)
  })))
  # Plot correlations in first cell type
  invisible(lapply(names(max)[w], function(n) {
    # Expression by cell type and ID
    avg_exp <- subset(seurat_object, idents = max[[n]][1])
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    # Get IDs
    prot_soma <- names(entrez[which(entrez == n)])
    prot_olink <- olink[[prot_soma]]
    # Plot linear model
    t <- left_join(df[, c("record_id", prot_soma)], avg_exp,
      by = join_by(record_id)
    )
    p_soma <- ggplot(t, aes_string(x = n, y = prot_soma)) +
      geom_point(alpha = 0.5) +
      stat_poly_line(se = F) +
      stat_poly_eq(
        aes(label = paste(after_stat(eq.label),
          after_stat(rr.label),
          after_stat(p.value.label),
          sep = "*\", \"*"
        ))
      ) +
      xlab(paste0("Mean ", n, " expression in ", max[[n]][1])) +
      theme_bw()
    cat("\n")
    cat("### SOMAScan")
    cat("\n")
    print(p_soma)
    cat("\n")
    if (!is.null(prot_olink)) {
      # Plasma
      t <- left_join(plasma[, c("record_id", prot_olink)], avg_exp,
        by = join_by(record_id)
      )
      p_plasma <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
            after_stat(rr.label),
            after_stat(p.value.label),
            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][1])) +
        theme_bw()
      cat("\n")
      cat("### Plasma Olink")
      cat("\n")
      print(p_plasma)
      cat("\n")
      # Urine
      t <- left_join(urine[, c("record_id", prot_olink)], avg_exp,
        by = join_by(record_id)
      )
      p_urine <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
            after_stat(rr.label),
            after_stat(p.value.label),
            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][1])) +
        theme_bw()
      cat("\n")
      cat("### Urine Olink")
      cat("\n")
      print(p_urine)
      cat("\n")
    }
  }))
  # Plot correlations in second cell type
  invisible(lapply(names(max)[w], function(n) {
    # Expression by cell type and ID
    avg_exp <- subset(seurat_object, idents = max[[n]][2])
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    # Get IDs
    prot_soma <- names(entrez[which(entrez == n)])
    prot_olink <- olink[[prot_soma]]
    # Plot linear model
    t <- left_join(df[, c("record_id", prot_soma)], avg_exp,
      by = join_by(record_id)
    )
    p_soma <- ggplot(t, aes_string(x = n, y = prot_soma)) +
      geom_point(alpha = 0.5) +
      stat_poly_line(se = F) +
      stat_poly_eq(
        aes(label = paste(after_stat(eq.label),
          after_stat(rr.label),
          after_stat(p.value.label),
          sep = "*\", \"*"
        ))
      ) +
      xlab(paste0("Mean ", n, " expression in ", max[[n]][2])) +
      theme_bw()
    cat("\n")
    cat("### SOMAScan")
    cat("\n")
    print(p_soma)
    cat("\n")
    if (!is.null(prot_olink)) {
      # Plasma
      t <- left_join(plasma[, c("record_id", prot_olink)], avg_exp,
        by = join_by(record_id)
      )
      p_plasma <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
            after_stat(rr.label),
            after_stat(p.value.label),
            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][2])) +
        theme_bw()
      cat("\n")
      cat("### Plasma Olink")
      cat("\n")
      print(p_plasma)
      cat("\n")
      # Urine
      t <- left_join(urine[, c("record_id", prot_olink)], avg_exp,
        by = join_by(record_id)
      )
      p_urine <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
            after_stat(rr.label),
            after_stat(p.value.label),
            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][2])) +
        theme_bw()
      cat("\n")
      cat("### Urine Olink")
      cat("\n")
      print(p_urine)
      cat("\n")
    }
  }))
}
# scRNA correlation with outcomes
scRNA_corr_out <- function(seurat_object = so, vars, outcome) {
  # Get Entrez Gene IDs
  entrez <-
    as.list(analytes$EntrezGeneSymbol[match(vars, analytes$AptName)])
  names(entrez) <- vars
  entrez <- entrez[entrez %in% rownames(seurat_object)]
  entrez <- entrez[!duplicated(entrez)]
  # Find cells where most highly expressed
  cells <- FetchData(seurat_object, vars = as.character(entrez))
  cells$type <- seurat_object$generaltype
  cell_counts <- data.frame(table(cells$type))
  cell_perc <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ mean(.x > 0, na.rm = TRUE))) %>%
    column_to_rownames("type")
  cells <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
    column_to_rownames("type")
  max <- lapply(cells, function(c) {
    rownames(cells)[order(c, decreasing = T)[1:2]]
  })
  w <- which(unlist(lapply(cell_perc, function(c) {
    any(c >= 0.1)
  })))
  # Get average expression
  # First cells
  first <- sapply(max[w], "[[", 1)
  f <- lapply(names(first), function(n) {
    ctype <- as.character(first[n])
    avg_exp <- subset(seurat_object, idents = ctype)
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    colnames(avg_exp) <- c(paste(n, "in", ctype), "record_id")
    data.frame(avg_exp, check.names = F)
  })
  f <- purrr::reduce(f, full_join, by = "record_id")
  f <- left_join(f, df[, c("record_id", outcome)], by = join_by(record_id))
  x <- f %>% dplyr::select(-record_id, -all_of(outcome))
  y <- f %>% dplyr::select(all_of(outcome))
  M <- corr.test(x, y, method = "spearman")
  # Print nice looking table
  r <- data.frame(M$r)
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Correlation in Top Cell Type")
  cat("\n")
  # Second cells
  second <- sapply(max[w], "[[", 2)
  s <- lapply(names(second), function(n) {
    ctype <- as.character(second[n])
    avg_exp <- subset(seurat_object, idents = ctype)
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    colnames(avg_exp) <- c(paste(n, "in", ctype), "record_id")
    data.frame(avg_exp, check.names = F)
  })
  s <- purrr::reduce(s, full_join, by = "record_id")
  s <- left_join(s, df[, c("record_id", outcome)], by = join_by(record_id))
  x <- s %>% dplyr::select(-record_id, -all_of(outcome))
  y <- s %>% dplyr::select(all_of(outcome))
  M <- corr.test(x, y, method = "spearman")
  # Print nice looking table
  r <- data.frame(M$r)
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Correlation in Second Cell Type")
  cat("\n")
}
```

# scRNA-seq correlations with circulating proteins

## MAC

```{r message=FALSE,warning=FALSE,dpi=1200}
scRNA_corr(vars = top_mac)
```

## MIC

```{r message=FALSE,warning=FALSE,dpi=1200}
scRNA_corr(vars = top_mic)
```

## HYP

```{r message=FALSE,warning=FALSE,dpi=1200}
scRNA_corr(vars = top_hyp)
```

## RAPID

```{r message=FALSE,warning=FALSE,dpi=1200}
scRNA_corr(vars = top_rapid)
```

## HTN

```{r message=FALSE,warning=FALSE,dpi=1200}
scRNA_corr(vars = top_htn)
```

## HTN with SBP

```{r message=FALSE,warning=FALSE,dpi=1200}
scRNA_corr(vars = top_htn_sbp)
```

# UACR correlation with TAL NELL-1 transcript.

```{r message=FALSE,warning=FALSE,dpi=1200}
# Pull data
tal <- subset(so, idents = "TAL")
avg_exp <- AverageExpression(tal, features = "NELL1", group.by = "michigan_id")
avg_exp <- as.data.frame(t(avg_exp$RNA))
avg_exp$record_id <- sub("*_BL", "", rownames(avg_exp))
avg_exp <- left_join(avg_exp, df[, c("record_id", "acr_u")])
colnames(avg_exp) <- c("NELL1", "record_id", "UACR")
# Correlation
M <- corr.test(avg_exp$NELL1, avg_exp$UACR, method = "spearman")
# Plot
ggplot(avg_exp, aes(x = NELL1, y = log(UACR))) +
  geom_point() +
  theme_bw() +
  geom_smooth(method = "lm", se = F)
```

Spearman correlation between UACR and mean NELL1 expression in TAL was `r round(M$r,3)` (p = `r round(M$p,3)`).

# scRNA correlations with continuous outcomes

## MAC correlation with UACR

```{r results='asis'}
scRNA_corr_out(vars = top_mac, outcome = "acr_u")
```

## MIC correlation with UACR

```{r results='asis'}
scRNA_corr_out(vars = top_mic, outcome = "acr_u")
```

## HYP correlation with BSA-indexed GFR

```{r results='asis'}
scRNA_corr_out(vars = top_hyp, outcome = "gfr_bsa_plasma")
```

## HTN correlation with MAP

```{r results='asis'}
scRNA_corr_out(vars = top_htn, outcome = "map")
```

## HTN with SBP correlation with MAP

```{r results='asis'}
scRNA_corr_out(vars = top_htn_sbp, outcome = "map")
```
