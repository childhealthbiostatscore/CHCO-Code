---
title: "Proteomics and HTN - SOMAScan correlation"
author: "Laura Pyle, Ye Ji Choi & Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
execute:
  echo: false
  message: false
---

```{r libraries}
#| include: false
library(psych)
library(corrplot)
library(pander)
library(dplyr)
library(tableone)
library(knitr)
library(gtools)
library(ggpubr)
# Print all pander tables
panderOptions("knitr.auto.asis", FALSE)
```

```{r data import}
#| include: false
# source("~/GitHub/CHCO-Code/Petter Bjornstad/Proteomics and DKD/create_today_dkd_analysis_dataset.R")
load("/Volumes/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Proteomics and HTN/Data_Cleaned/analysis_dataset.RData")
df <- df[!is.na(df$htn),]
df$htn <- droplevels(df$htn)
top_htn <- top_htn_df %>%
  filter(Target %in% c("WFKN2","SEZ6L","SCG3","LSAMP","T132B","Nr-CAM","PEDF","IGLO5",
                       "PCD10:ECD","UNC5H4","SLIK1",
                       "Secretoglobin family 3A member 1","sICAM-5")) %>%
  slice_max(abs(log(estimate)), n = 12) %>%
  pull(AptName)
df_t2d <- df %>% filter(group=="Type 2 Diabetes")
df_lc <- df %>% filter(group=="Lean Control")
df_oc <- df %>% filter(group=="Obese Control")
```

```{r functions}
cor_and_plot_soma <- function(data, vars) {
  # Format matrix
  d <- data[, c(vars, "acr_u", "sbp", "dbp", "map", "gfr_raw_plasma", "gfr_bsa_plasma")]
  n <- c(
    analytes$EntrezGeneSymbol[match(vars, analytes$AptName)],
    "acr_u", "sbp", "dbp", "map", "gfr_raw_plasma", "gfr_bsa_plasma"
  )
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  names(d) <- n
  # Correlations
  M <- corr.test(data.matrix(d), normal = F, method = "spearman")
  corrplot(round(M$r, 3),
    p.mat = M$p, method = "circle", type = "lower", insig = "blank",
    addCoef.col = "white", diag = FALSE
  )
  # Print a nice looking table
  r <- data.frame(round(M$r, 3))
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Coefficients")
  cat("\n")
  # print p-values
  p <- data.frame(round(M$p, 3))
  cat("\n")
  pander(p, caption = "P-values")
  cat("\n")
   # print Ns
  n <- data.frame(round(M$n, 3))
  cat("\n")
  pander(n, caption = "Number of observations")
  cat("\n")
}
```


```{r, include=FALSE}
corr_plot_modified_nodict <- function(data, X, Y, cor_method = "spearman", adj_var = NULL, 
                               method = "color", insig = "pch", coef_col = NULL,
                               pch = 4, pch.col = "black", pch.cex = 0, colnames_M, rownames_M) {
  
  n_cols = length(Y)
  M <- cor(y = Y,
           x = X,
           use = "pairwise.complete.obs",
           method = cor_method)
  colnames(M) <- colnames_M
  rownames(M) <- rownames_M
  if (!is.na(adj_var)){
    x_vars <- rep(X, times = length(Y))
    x_coord <- rep(seq(1,length(Y)), each = length(X))
    y_vars <- rep(Y, each = length(X))
    y_coord <- rep(seq(length(X),1), times = length(Y))
    lm_extracted <- data.frame(yName = character(0),
                               xName = character(0),
                               x = numeric(0),
                               y = numeric(0),
                               adj_var = character(0),
                               adj_x_coef = numeric(0),
                               adj_x_pval = numeric(0))
    for (i in 1:length(x_vars)) {
      if(x_vars[i] != y_vars[i]) {
        lm_formula <- as.formula(paste0(y_vars[i], "~", x_vars[i], "+", adj_var))
        lm_model <- lm(lm_formula, data = data)
        lm_summary <- summary(lm_model)
        lm_coef <- lm_summary$coefficient[x_vars[i], "Estimate"]
        lm_p_val <- lm_summary$coefficient[x_vars[i], "Pr(>|t|)"]
        lm_extracted <- rbind(lm_extracted,
                              data.frame(
                                yName = y_vars[i],
                                xName = x_vars[i],
                                x = x_coord[i],
                                y = y_coord[i],
                                adj_var = adj_var,
                                adj_x_coef = lm_coef,
                                adj_x_pval = lm_p_val))
      }
    }
  }
  
  correlation_p_value <- correlation_p_value_matrix(data, relevant_vars = c(colnames(Y),colnames(X)), n_cols = n_cols, cor_method = cor_method)
  
  corrplot(M,
           p.mat = correlation_p_value,
           method = method,
           tl.col = "black",
           tl.srt = 45,
           tl.cex = 1.2,
           insig = insig,
           addCoef.col = coef_col,
           addgrid.col = 'lightgray',
           number.digits = 2,
           pch.col = pch.col, 
           pch = pch,
           pch.cex = pch.cex)$corrPos -> p1
  p1_sub <- subset(p1, p.value <= 0.05)
  p1_sub2 <- subset(p1, p.value <= 0.05 & abs(corr) >= 0.7)
  
  if (nrow(p1) > 0) {
    graphics::text(p1$x, p1$y, sprintf("%.2f", p1$corr), adj = c(0.5, 0), cex=1.2)
    if (nrow(p1_sub > 0)) {
      graphics::text(p1_sub$x, p1_sub$y, stars.pval(p1_sub$p.value), adj = c(0.5, 2), cex=1.2)
    }
  }
  if (nrow(p1_sub2) > 0) {
    graphics::text(p1_sub2$x, p1_sub2$y, sprintf("%.2f", p1_sub2$corr), col = "white", adj = c(0.5, 0), cex=1.2)
    graphics::text(p1_sub2$x, p1_sub2$y, stars.pval(p1_sub2$p.value), col = "white", adj = c(0.5, 2), cex=1.2)
  }
  if (!is.na(adj_var)) {
    lm_extracted <- subset(lm_extracted, adj_x_pval <= 0.05)
    if (nrow(lm_extracted) > 0){
      graphics::rect(xleft = lm_extracted$x-.45, 
                     ybottom = lm_extracted$y-.45,
                     xright = lm_extracted$x+.45,
                     ytop = lm_extracted$y+.45)
    }
  }
}


correlation_p_value_matrix <- function(data, relevant_vars, n_cols, cor_method = "pearson") {
  # Filter relevant variables for the correlation matrix
  dat_correlation <- data %>%
    dplyr::select(all_of(relevant_vars))
  
  # Compute p-values 
  res2 <- Hmisc::rcorr(as.matrix(dat_correlation),
                       type = cor_method)
  corr_pval <- as.data.frame(res2$P) %>%
    dplyr::select(all_of(relevant_vars[1:n_cols]))
  corr_pval = corr_pval[(n_cols + 1):nrow(corr_pval),]
  return(as.matrix(corr_pval))
}
```


# HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_htn,analytes$AptName)])` (associated with genes `r toString(analytes$EntrezGeneSymbol[match(top_htn,analytes$AptName)])`, respectively).

## T2D

### Correlations

```{r results='asis', dpi=1200}
cor_and_plot_soma(data = df_t2d, vars = top_htn)

prot_heatmap <- top_htn_df %>%
  filter(Target %in% c("WFKN2","SEZ6L","SCG3","LSAMP","T132B","Nr-CAM","PEDF","IGLO5",
                       "PCD10:ECD","UNC5H4","SLIK1",
                       "Secretoglobin family 3A member 1","sICAM-5")) %>%
  pull(AptName)
colnames_M <- top_htn_df %>%
  filter(AptName %in% prot_heatmap) %>%
  pull(Target)
png(height = 3000, width = 2500, file = "/Users/pylell/Dropbox/TODAY HTN and DKD output/local_T2D_BP_heatmap.png", res = 170)
corr_plot_modified_nodict(data=df_t2d, 
                   Y=df_t2d[,prot_heatmap], 
                 X=df_t2d[,c("sbp","dbp")],
                 cor_method="spearman", adj_var = NA,
                 colnames_M=colnames_M,
                 rownames_M=c("SBP","DBP"))
dev.off()
```

### T-tests by hypertension status

```{r include=FALSE}
top_htn <- top_htn_df %>%
  filter(Target %in% c("WFKN2","SEZ6L","SCG3","LSAMP","T132B","Nr-CAM","PEDF","IGLO5",
                       "PCD10:ECD","UNC5H4","SLIK1",
                       "Secretoglobin family 3A member 1","sICAM-5")) %>%
 pull(AptName)
t <- CreateTableOne(data=df_t2d, vars=top_htn, strata="htn")
t <- print(t)

# need to make each boxplot independently, then combine
# then save
comparison_groups = list(c("HTN-", "HTN+"))

# write a function to make each panel of the plot
panel_in_boxplot <- function(data, seq) {
  prot <- top_htn_df %>%
  filter(AptName %in% seq) %>%
  pull(Target)
 p <- ggplot(data[!is.na(df_t2d$htn),],
       aes(x = htn,
                     y = .data[[seq]],
                     fill = htn))  +
  geom_boxplot() +  
  labs(x = NULL,
       y = noquote(prot),
       fill = "htn") + 
  theme(axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.x = element_text(size = 14,
                                   angle = -45), 
        legend.text = element_text(size = 16),
        panel.background = element_rect(fill = "#f2e9e4",
                                        color = "grey")) + 
  scale_fill_manual(values = c("#c2dfe3", "#fff9ec",
                                "#fcb1a6", "#fb6376")) +
  geom_jitter() +
  stat_compare_means(comparisons = comparison_groups,
                     method = "wilcox.test",
                     label = "p.signif", size = 6) + 
   scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
}

# function call for above template
p_seq.13408.23 <- panel_in_boxplot(data = df_t2d, seq = "seq.13408.23")
p_seq.19563.3 <- panel_in_boxplot(data = df_t2d, seq = "seq.19563.3")
p_seq.7957.2 <- panel_in_boxplot(data = df_t2d, seq = "seq.7957.2")
p_seq.2999.6 <- panel_in_boxplot(data = df_t2d, seq = "seq.2999.6")
p_seq.3235.50 <- panel_in_boxplot(data = df_t2d, seq = "seq.3235.50")
p_seq.8890.9 <- panel_in_boxplot(data = df_t2d, seq = "seq.8890.9")
p_seq.5109.24 <- panel_in_boxplot(data = df_t2d, seq = "seq.5109.24")
p_seq.7735.17 <- panel_in_boxplot(data = df_t2d, seq = "seq.7735.17")
p_seq.9211.19 <- panel_in_boxplot(data = df_t2d, seq = "seq.9211.19")
p_seq.6478.2 <- panel_in_boxplot(data = df_t2d, seq = "seq.6478.2")
p_seq.9018.38 <- panel_in_boxplot(data = df_t2d, seq = "seq.9018.38")
p_seq.5140.56 <- panel_in_boxplot(data = df_t2d, seq = "seq.5140.56")
p_seq.15539.15 <- panel_in_boxplot(data = df_t2d, seq = "seq.15539.15")
p_seq.16307.22 <- panel_in_boxplot(data = df_t2d, seq = "seq.16307.22")
p_seq.6252.62 <- panel_in_boxplot(data = df_t2d, seq = "seq.6252.62")
p_seq.8245.27 <- panel_in_boxplot(data = df_t2d, seq = "seq.8245.27")
p_seq.5124.62 <- panel_in_boxplot(data = df_t2d, seq = "seq.5124.62")
p_seq.8624.16 <- panel_in_boxplot(data = df_t2d, seq = "seq.8624.16")
p_seq.5124.69 <- panel_in_boxplot(data = df_t2d, seq = "seq.5124.69")
p_seq.10743.13 <- panel_in_boxplot(data = df_t2d, seq = "seq.10743.13")

# arrange
grpbox <- ggarrange(p_seq.13408.23, p_seq.19563.3, p_seq.7957.2, p_seq.2999.6, p_seq.3235.50,
                    p_seq.8890.9, p_seq.5109.24, p_seq.7735.17, p_seq.9211.19, p_seq.6478.2,
                    p_seq.9018.38, p_seq.5140.56, p_seq.15539.15, p_seq.16307.22, p_seq.6252.62,
                    p_seq.8245.27, p_seq.5124.62, p_seq.8624.16, p_seq.5124.69, p_seq.10743.13,
                    nrow = 4, ncol = 5,
                    common.legend = T)
png(height = 3000, width = 2500, file = "/Users/pylell/Dropbox/TODAY HTN and DKD output/local_T2D_HTN_boxplot.png", res = 170)
grpbox
dev.off()

# here is the basis for the function
prot <- top_htn_df %>%
  filter(AptName %in% c("seq.13408.23")) %>%
  pull(Target)
p4 <- ggplot(df_t2d[!is.na(df_t2d$htn),],
       mapping = aes(x = htn,
                     y = seq.13408.23,
                     fill = htn))  +
  geom_boxplot() +  
  labs(x = NULL,
       y = noquote(prot),
       fill = "htn") + 
  theme(axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 10,
                                   angle = -45), 
        legend.text = element_text(size = 14),
        panel.background = element_rect(fill = "#f2e9e4",
                                        color = "grey")) + 
  scale_fill_manual(values = c("#c2dfe3", "#fff9ec",
                                "#fcb1a6", "#fb6376")) +
  geom_jitter() +
  stat_compare_means(comparisons = comparison_groups,
                     method = "wilcox.test",
                     label = "p.signif")




# below is where I was going to manually create each plot
# P4 - seq.19563.3
prot <- top_htn_df %>%
  filter(AptName %in% c("seq.19563.3")) %>%
  pull(Target)
p4 <- ggplot(df_t2d[!is.na(df_t2d$htn),],
       mapping = aes(x = htn,
                     y = seq.19563.3,
                     fill = htn))  +
  geom_boxplot() +  
  labs(x = NULL,
       y = noquote(prot),
       fill = "htn") + 
  theme(axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 10,
                                   angle = -45), 
        legend.text = element_text(size = 14),
        panel.background = element_rect(fill = "#f2e9e4",
                                        color = "grey")) + 
  scale_fill_manual(values = c("#c2dfe3", "#fff9ec",
                                "#fcb1a6", "#fb6376")) +
  geom_jitter() +
  stat_compare_means(comparisons = comparison_groups,
                     method = "wilcox.test",
                     label = "p.signif")
# P6 - seq.5109.24
prot <- top_htn_df %>%
  filter(AptName %in% c("seq.5109.24")) %>%
  pull(Target)
p6 <- ggplot(df_t2d[!is.na(df_t2d$htn),],
       mapping = aes(x = htn,
                     y = seq.5109.24,
                     fill = htn))  +
  geom_boxplot() +  
  labs(x = NULL,
       y = noquote(prot),
       fill = "htn") + 
  theme(axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 10,
                                   angle = -45), 
        legend.text = element_text(size = 14),
        panel.background = element_rect(fill = "#f2e9e4",
                                        color = "grey")) + 
  scale_fill_manual(values = c("#c2dfe3", "#fff9ec",
                                "#fcb1a6", "#fb6376")) +
  geom_jitter() +
  stat_compare_means(comparisons = comparison_groups,
                     method = "wilcox.test",
                     label = "p.signif")
# P12 - seq.7957.2
prot <- top_htn_df %>%
  filter(AptName %in% c("seq.7957.2")) %>%
  pull(Target)
p12 <- ggplot(df_t2d[!is.na(df_t2d$htn),],
       mapping = aes(x = htn,
                     y = seq.7957.2,
                     fill = htn))  +
  geom_boxplot() +  
  labs(x = NULL,
       y = noquote(prot),
       fill = "htn") + 
  theme(axis.title.x = element_text(size = 14),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_text(size = 10,
                                   angle = -45), 
        legend.text = element_text(size = 14),
        panel.background = element_rect(fill = "#f2e9e4",
                                        color = "grey")) + 
  scale_fill_manual(values = c("#c2dfe3", "#fff9ec",
                                "#fcb1a6", "#fb6376")) +
  geom_jitter() +
  stat_compare_means(comparisons = comparison_groups,
                     method = "wilcox.test",
                     label = "p.signif")
# arrange
grpbox <- ggarrange(p1, p2, p3, p4,
                    p5, p6, p7, p8, 
                    p9, p10, p11, p12,
                    p13, p14, p15, p16,
                    nrow = 2, ncol = 3,
                    common.legend = T)
png(height = 3000, width = 2500, file = "/Users/pylell/Dropbox/TODAY HTN and DKD output/local_T2D_HTN_boxplot.png", res = 170)
grpbox
dev.off()
```

```{r results='as is'}
kable(t)
```

## Lean Controls

### Correlations

```{r results='asis', dpi=1200}
cor_and_plot_soma(data = df_lc, vars = top_htn)
```

### T-tests by hypertension status

```{r include=FALSE}
t <- CreateTableOne(data=df_lc, vars=top_htn, strata="htn")
t <- print(t)
```

```{r results='as is'}
kable(t)
```

## Obese Controls

### Correlations

```{r results='asis', dpi=1200}
cor_and_plot_soma(data = df_oc, vars = top_htn)
```

### T-tests by hypertension status

```{r include=FALSE}
t <- CreateTableOne(data=df_oc, vars=top_htn, strata="htn")
t <- print(t)
```

```{r results='as is'}
kable(t)
```

```{r}
file.copy("/Users/pylell/Documents/GitHub/CHCO-Code/Petter Bjornstad/Proteomics and HTN/proteomics_and_HTN_somascan.html",
          "/Users/pylell/Dropbox/TODAY HTN and DKD output/proteomics_and_HTN_somascan.html",overwrite = TRUE)
```
