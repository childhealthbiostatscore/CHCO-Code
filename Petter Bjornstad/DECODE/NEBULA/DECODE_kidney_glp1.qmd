---
title: "DECODE Kidney GLP-1 nebula"
author: "Ye Ji Choi & Hailey Hampson"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---


```{r include = F}
library(future)
library(future.apply)
library(tidyverse)
library(colorspace)
library(patchwork)
library(ggdendro)
library(cowplot)
library(ggpubr)
library(rstatix)
library(arsenal)
library(Biobase)
library(msigdbr)
# library(kableExtra)
# library(knitr)
library(REDCapR)
# library(data.table)
library(emmeans)
library(NMF)
library(pheatmap)
library(UpSetR)
library(enrichR)
library(WriteXLS)
library(SAVER)
library(readxl)
library(limma)
library(edgeR)
library(BiocGenerics)
library(GSEABase)
library(slingshot)
library(SingleCellExperiment)
library(MAST)
library(muscat)
library(scater)
library(Seurat)
library(jsonlite)
library(dplyr)
library(glmmTMB)
library(reshape2)
library(broom.mixed) 
library(foreach)
library(doParallel)
library(nebula)
library(Matrix)
library(scran)
library(DirichletReg)
library(gdata)
library(janitor)
library(fgsea)
```

```{r include = F}
reticulate::use_python("/mmfs1/gscratch/scrubbed/yejichoi/mypy/bin/python", required = T)
reticulate::repl_python()
reticulate::py_config()
# set up Kopah connection
## Load boto3 and pandas
boto3 <- reticulate::import("boto3")
pd <- reticulate::import("pandas")

## Create an S3 client
keys <- fromJSON("/mmfs1/home/yejichoi/keys.json")
session <- boto3$session$Session(
  aws_access_key_id = keys$MY_ACCESS_KEY,
  aws_secret_access_key = keys$MY_SECRET_KEY
)

## Create an S3 client with the session
s3 <- session$client("s3", endpoint_url = "https://s3.kopah.uw.edu")
```

# Subset of HH code "DECODE_Kidney_NEBULA.Rmd"
## 2c
```{r echo = F}
# from 2c of HH code
bucket <- "scrna" # bucket name in Kopah
temp_file <- tempfile(fileext = ".rds") # need to create a temporary file
s3$download_file(bucket, "Kidney transcriptomics/Single cell RNA seq/PB_90_RPCAFix_Metadata_LR_RM_kpmpV1labelled.rds", temp_file)
so_kpmp_sc <- readRDS(temp_file)
```

## 2e
```{r echo = F, eval = F}
# from 2e of HH code
#Fix Typos in kit ids in PB90
so_kpmp_sc$kit_id[which(so_kpmp_sc$kit_id=="KI-0014643")] <- "KL-0014643"
so_kpmp_sc$kit_id[which(so_kpmp_sc$kit_id=="kl-0023998")] <- "KL-0023998"

# #Lambda load
bucket <- "harmonized.dataset" # bucket name in Kopah
temp_file <- tempfile(fileext = ".csv") # need to create a temporary file
s3$download_file(bucket, "harmonized_dataset.csv", temp_file)
harmonized_data <- read.csv(temp_file,na="")

dat <- harmonized_data %>%
  arrange(screen_date) %>% 
  dplyr::summarise(across(where(negate(is.numeric)), ~ ifelse(all(is.na(.x)), NA_character_, first(na.omit(.x)))),
                   across(where(is.numeric), ~ ifelse(all(is.na(.x)), NA_real_, first(na.omit(.x)))),
                   .by = c(mrn, visit))
dat2 <- dat %>% 
  filter(group=="Type 2 Diabetes" | group == "Lean Control") %>%
  filter(visit=="baseline") %>% 
  filter(!is.na(kit_id)) %>% 
  filter(!is.na(epic_sglti2_1)) %>%  
  filter(!is.na(epic_glp1ra_1)) 

dat2$kit_id[which(dat2$kit_id=="KI-0014643")] <- "KL-0014643"
dat2$kit_id[which(dat2$kit_id=="kl-0023998")] <- "KL-0023998" 
dat2$kit_id[which(dat2$kit_id=="Kl-0014643")] <- "KL-0014643" 
#"KL-0030913" "KL-0031453" "KL-0031460" "KL-0032459" kit IDs with biopsies IDs but missing in the pb90 dataset - potentially run after pb90

ids <- c(dat2$kit_id)
# ids <- ids[which(!ids %in% c("KL-0030913","KL-0031453","KL-0031460","KL-0032459"))] #30 remain
length(ids) #52


#Filter pb90 to these 52 kit ids for aim 1
# so_kpmp_sc <- subset(so_kpmp_sc, kit_id %in% ids)

#Check that the ids are there 
length(unique(so_kpmp_sc$kit_id)) #46 - 6 missing
ids[which(!ids %in% unique(so_kpmp_sc$kit_id))] #"KL-0019095" "KL-0030622" "KL-0030913" "KL-0031453" "KL-0031460" "KL-0032459"
#Find their mrns
# dat2$record_id[which(dat2$kit_id %in% ids[which(!ids %in% unique(so_kpmp_sc$kit_id))])]
# dat2$mrn[which(dat2$kit_id %in% ids[which(!ids %in% unique(so_kpmp_sc$kit_id))])]


#Select metadata from seurat object to facilitate merge of new metadata into seurat object
meta_kidney_sc <-  so_kpmp_sc@meta.data
rownames(meta_kidney_sc) <- rownames(so_kpmp_sc@meta.data)

#Merge metadata from 83 participants at baseline into seurat object metadata
meta_kidney_sc <- meta_kidney_sc %>%
  left_join(dat2,by="kit_id")
rownames(meta_kidney_sc) <- rownames(so_kpmp_sc@meta.data)

#Merge metadata back into seurat object
so_kpmp_sc <- AddMetaData(so_kpmp_sc, meta_kidney_sc)

#Check number of unique ids
length(unique(so_kpmp_sc$kit_id)) #should be 46
# unique(ids[which(!ids %in% so_kpmp_sc$kit_id)]) 

#Remove metadatasets
rm(meta_kidney_sc,harm_meta_data,harmonized_data,dat,dat2)

# #Load harmonized data that has been filtered from 90 to the 83 participants that have baseline single cell data
# #Local Load
# harm_meta_data <- read.csv(fs::path(dir.dat,"Kidney scRNAseq Project","Data","harmonized_data_kidney_sc_all_metadata2.csv"))
# 
# #Lambda load
bucket <- "scrna" # bucket name in Kopah
temp_file <- tempfile(fileext = ".csv") # need to create a temporary file
s3$download_file(bucket, "data_clean/harmonized_data_kidney_sc_all_metadata2.csv", temp_file)
harm_meta_data <- read.csv(temp_file)
# 
# harm_meta_data <- harm_meta_data %>%
#   dplyr::select(-X)
# 
# #Select metadata from seurat object to facilitate merge of new metadata into seurat object
# meta_kidney_sc <-  so_kpmp_sc@meta.data
# rownames(meta_kidney_sc) <- rownames(so_kpmp_sc@meta.data)
# 
# #Merge metadata from 83 participants at baseline into seurat object metadata
# meta_kidney_sc <- meta_kidney_sc %>%
#   left_join(harm_meta_data,by="kit_id")
# rownames(meta_kidney_sc) <- rownames(so_kpmp_sc@meta.data)
# 
# #Pull ids from 83 participants at baseline to filter seurat object to these participants only 
# ids <- harm_meta_data$kit_id
# 
# #Merge metadata back into seurat object
# so_kpmp_sc <- AddMetaData(so_kpmp_sc, meta_kidney_sc)
# 
# #Check number of unique ids
# length(unique(so_kpmp_sc$kit_id)) #should be 90
# 
# #Filter seurat object to only IDs that have the metadata & sc data (83 individuals at baseline)
# so_kpmp_sc <- subset(so_kpmp_sc, kit_id %in% ids)
# 
# #Check number of unique ids after filtering
# length(unique(so_kpmp_sc$kit_id)) #should be 83
# 
# #Remove metadatasets
# rm(meta_kidney_sc,harm_meta_data)
# 
# #Remove two coenrolled IDs
# so_kpmp_sc <- subset(so_kpmp_sc,kit_id!="KL-0030621")
# so_kpmp_sc <- subset(so_kpmp_sc,kit_id!="KL-0029535")
# #Check unique number of kit ids now (should be 81)
# length(unique(so_kpmp_sc$kit_id)) #Should be 81

# #Load in most up to date medication data to update medication information
# #Local Load
# med <- read.xlsx(fs::path(dir.dat,"Kidney scRNAseq Project/Data/Biopsies_w_mrn_Oct3.xlsx"))
# 
# # bucket <- "scrna" # bucket name in Kopah
# # temp_file <- tempfile(fileext = ".xlsx") # need to create a temporary file
# # s3$download_file(bucket, "data_clean/Biopsies_w_mrn_Oct3.xlsx", temp_file)
# # med <- read.xlsx(temp_file)
# 
# # rm(s3,session,keys)
# 
# #Select Metformin, RASSI, Insulin data
# med <- med %>%
#   dplyr::select(all_of(c("record_id","mrn","raasi_1","insulin_1","mfm_1")))
# #Pull seurat object metadata to help harmoinize in new metadata
# meta_kidney_sc <-  so_kpmp_sc@meta.data
# #Filter to only those with a unique identifier id in the seurat object metadata
# med <- med %>%
#   filter(mrn %in% as.character(meta_kidney_sc$mrn)) 
# length(unique(med$mrn)) #95 total rows remain, 81 unique individual ids
# #Filter to only those that have a unique record id in the seurat object
# med <- med %>%
#   filter(record_id %in% meta_kidney_sc$record_id) 
# length(unique(med$mrn)) #81 remain
# length(unique(med$record_id)) #81
# rownames(meta_kidney_sc) <- rownames(so_kpmp_sc@meta.data)
# med$mrn <- as.numeric(med$mrn) #Make numeric to merge
# #Merge med data with seurat metadata
# meta_kidney_sc <- meta_kidney_sc %>%
#   left_join(med,by=c("mrn","record_id"))
# rownames(meta_kidney_sc) <- rownames(so_kpmp_sc@meta.data)
# length(unique(meta_kidney_sc$mrn)) #81 remain
# length(unique(meta_kidney_sc$record_id)) #81
# 
# #Add Med Meta Data to Seurat object
# so_kpmp_sc <- AddMetaData(so_kpmp_sc, meta_kidney_sc)
# #Remove med metadatset
# rm(med,meta_kidney_sc)

#Create medication & disease status groups of interest
so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>%
  mutate(glp1_sglt2=ifelse(epic_glp1ra_1=="Yes" & epic_sglti2_1=="Yes","Yes","No")) %>%
  mutate(sglt2=ifelse(epic_sglti2_1=="Yes" & epic_glp1ra_1=="No","Yes","No")) %>%
  mutate(glp1=ifelse(epic_sglti2_1=="No" & epic_glp1ra_1=="Yes","Yes","No")) %>%
  mutate(no_med=ifelse(epic_sglti2_1=="No" & epic_glp1ra_1=="No","Yes","No"))

#Define 4 exposure groups:
#SGLT2i(+)/GLP1RA(+), SGLT2i(+)/GLP1RA(-), SGLT2i(-)/GLPRA(+), SGLT2i(-)/GLP1RA(-)

so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>%
  mutate(medication = case_when(glp1_sglt2 == "Yes" ~ "glp1_sglt2",
                                sglt2 == "Yes" ~ "sglt2",
                                glp1 == "Yes" ~ "glp1",
                                no_med == "Yes" ~ "no_med"))
so_kpmp_sc@meta.data$medication <- factor(so_kpmp_sc@meta.data$medication, levels = c("no_med", "sglt2", "glp1","glp1_sglt2"))


# #Filter to RH/RH2 at baseline only
# #RENAL-HEIR or RENAL-HEIRitage
# so_kpmp_sc <- subset(so_kpmp_sc,study=="RENAL-HEIR" | study=="RENAL-HEIRitage")

#Ensure default assay in seurat object to RNA
DefaultAssay(so_kpmp_sc) <- "RNA"


#Before filtering
ncol(so_kpmp_sc)
# 72469 cells
nrow(so_kpmp_sc)
#31332 genes
length(unique(so_kpmp_sc$kit_id))
#30 participants
length(unique(so_kpmp_sc$kit_id[which(so_kpmp_sc$study=="RENAL-HEIR")]))
unique(so_kpmp_sc$record_id[which(so_kpmp_sc$study=="RENAL-HEIR")])
unique(so_kpmp_sc$kit_id[which(so_kpmp_sc$study=="RENAL-HEIR")])
#"RH-68-T"  "RH-49-T"  "RH-63-T"  "RH-23-T"  "RH-71-T"  "RH-62-T"  "RH-50-T"  "RH-74-T"  "RH-72-T"  "RH-76-T"  "RH-77-T" 
#"RH-75-T"  "RH-67-T"  "IT_19"    "RH-91-T"  "RH2-23-T"
# length(unique(so_kpmp_sc$kit_id[which(so_kpmp_sc$cohort=="RENAL HERITAGE")]))
length(unique(so_kpmp_sc$kit_id[which(so_kpmp_sc$study=="RENAL-HEIRitage")]))
#9, "RH2-51-T" "RH2-53-T" "RH-93-T"  "RH2-22-T" "RH2-38-T" "RH2-21-T" "RH2-55-T" "RH2-43-T" "RH2-42-T"
length(unique(so_kpmp_sc$kit_id[which(so_kpmp_sc$cohort=="IMPROVE")]))
#5 coenrolled in improve and Renal Heirage, 4 in Renal Heir, 1 in RH2
#"RH-66-T"  "RH-65-T"  "RH-59-T"  "RH-60-T"  "RH2-07-O"

length(unique(so_kpmp_sc$record_id[which(so_kpmp_sc$study=="IMPROVE")]))
#21 total from renal heir, 10 from renal heritage
length(unique(so_kpmp_sc$record_id[which(so_kpmp_sc$study=="CROCODILE")]))

ncol(so_kpmp_sc)
#65062 cells
nrow(so_kpmp_sc)
#YE JI's filtering code for percent expression 
#Filter out rare genes expressed in less than "gene_pct" of cells
expr_matrix <- as.matrix(GetAssayData(so_kpmp_sc, layer = "counts"))
expr_matrix <- as.matrix(GetAssayData(so_kpmp_sc, assay = "RNA", layer = "counts"))
# expr_matrix <- so_kpmp_sc@assays$RNA@counts
# Calculate the proportion of cells expressing each gene
num_cells_per_gene <- rowSums(expr_matrix > 0)  # Count nonzero cells per gene
total_cells <- ncol(expr_matrix)  # Total number of cells
gene_proportion <- num_cells_per_gene / total_cells  # Fraction of cells expressing each gene
remove(expr_matrix)
# Keep genes expressed in at least "gene_pct" of cells
genes_to_keep <- names(gene_proportion[gene_proportion >= 0.05])
so_kpmp_sc <- subset(so_kpmp_sc, features = genes_to_keep)
# #After filtering
ncol(so_kpmp_sc) #72469 cells
nrow(so_kpmp_sc) # 9661 genes

# Step 2: Remove mitochondrial genes (those starting with "MT")
mito_genes <- grep("^MT-", rownames(so_kpmp_sc), value = TRUE)
# mito_genes2 <- grep("^MT.", rownames(so_kpmp_sc), value = TRUE)
#Filter out all mitochondrial genes

#keep_ids <- unique(rownames(so_kpmp_sc)[which(!rownames(so_kpmp_sc) %in% mito_genes)])
# so_kpmp_sc <- subset(so_kpmp_sc, features = setdiff(rownames(so_kpmp_sc), mito_genes))
# so_kpmp_sc <- subset(so_kpmp_sc,kit_id!="KL-0029535")
#so_kpmp_sc$Gene <- rownames(so_kpmp_sc)
#so_kpmp_sc <- subset(so_kpmp_sc, Gene %in% keep_ids)
so_kpmp_sc <- subset(so_kpmp_sc, features = setdiff(rownames(so_kpmp_sc), mito_genes))
#so_kpmp_sc <- subset(so_kpmp_sc, features = setdiff(rownames(so_kpmp_sc@assays$RNA@counts), mito_genes))
# so_kpmp_sc <- subset(so_kpmp_sc, !rownames(so_kpmp_sc) %in% mito_genes)
# grep("^MT-", rownames(so_kpmp_sc@assays$RNA@counts), value = TRUE)
# dim(so_kpmp_sc@assays$RNA@counts) #9276 186125
# dim(so_kpmp_sc@assays$RNA@data) #9276 186125
# dim(so_kpmp_sc@assays$RNA)#9276 186125
sum(grepl("^MT-", rownames(so_kpmp_sc))) #0
rownames(so_kpmp_sc)[(grepl("^MT", rownames(so_kpmp_sc)))] #0
ncol(so_kpmp_sc) #186125 cells
nrow(so_kpmp_sc) #15180 genes


#Step 3: Remove ribosomal Genes
# Identify ribosomal genes
ribo_genes <- c(
  "RPL22", "RPL11", "RPS8", "RPL5", "RPS27", "RPS7", "RPS27A", "RPL31", "RPL37A", "RPL32", "RPL15", "RPL14", "RPL29",
  "RPL24", "RPL22L1", "RPL35A", "RPL9", "RPL34", "RPS3A", "RPL37", "RPS23", "RPS14", "RPS18", "RPS10", "RPL10A", 
  "RPS20", "RPL7", "RPL30", "RPL8", "RPS6", "RPL35", "RPL12", "RPL7A", "RPS24", "RPLP2", "RPL27A", "RPS13", "RPS3",
  "RPS25", "RPS26", "RPL41", "RPL6", "RPLP0", "RPL21", "RPS29", "RPL4", "RPLP1", "RPS17", "RPS2", "RPS15A", "RPL13",
  "RPL26", "RPL23A", "RPL23", "RPL19", "RPL27", "RPL38", "RPL17", "RPS15", "RPL36", "RPS28", "RPL18A", "RPS16", 
  "RPS19", "RPL18", "RPL13A", "RPS11", "RPS9", "RPL28", "RPS5", "RPS21", "RPL3", "RPS4X", "RPL36A", "RPL39", 
  "RPL10", "RPS4Y1"
)
so_kpmp_sc <- subset(so_kpmp_sc, features = setdiff(rownames(so_kpmp_sc), ribo_genes))
# sum(grepl("^MT-", rownames(so_kpmp_sc))) #0
length(which(rownames(so_kpmp_sc) %in% ribo_genes)) #0
ncol(so_kpmp_sc) #65,062 cells
nrow(so_kpmp_sc) #15103 genes

#Renormalize & Scale after filtering
so_kpmp_sc <- NormalizeData(so_kpmp_sc)
so_kpmp_sc <- ScaleData(so_kpmp_sc, features = VariableFeatures(so_kpmp_sc))

# Calculate cell library size for offset in NEBULA --------------------------------------
counts_layer <- round(GetAssayData(so_kpmp_sc, layer = "counts"))
library_size <- Matrix::colSums(counts_layer)
so_kpmp_sc$library_size <- library_size
# View(so_kpmp_sc@meta.data)

# Pooled offset
sce <- SingleCellExperiment(assays = list(counts = counts_layer))
sce <- computeSumFactors(sce)
# View size factors
sizeFactors(sce)
# STEP 3: Calculate offset → log(size factors)
pooled_offset <- sizeFactors(sce)
so_kpmp_sc$pooled_offset <- pooled_offset
```


```{r echo = F}
#Create general hepatocyte cell type variable
# #Create PT and TAL pseudobulk cell type variable
# so_kpmp_sc$celltype1 <- case_when(grepl("PT-",so_kpmp_sc$celltype_rpca)~"PT",
#                                   grepl("TAL-",so_kpmp_sc$celltype_rpca)~"TAL",
#                                   grepl("EC-",so_kpmp_sc$celltype_rpca)~"EC",
#                                   grepl("POD",so_kpmp_sc$celltype_rpca)~"POD",
#                                   grepl("MAC",so_kpmp_sc$celltype_rpca)~"MAC",
#                                   grepl("MON",so_kpmp_sc$celltype_rpca)~"MON",
#                                   grepl("PC-",so_kpmp_sc$celltype_rpca)~"PC",
#                                   grepl("FIB",so_kpmp_sc$celltype_rpca)~"FIB_MC_VSMC",
#                                   grepl("DTL",so_kpmp_sc$celltype_rpca)~"DTL",
#                                   so_kpmp_sc$celltype_rpca=="DCT"~"DCT",
#                                   so_kpmp_sc$celltype_rpca=="ATL"~"ATL",
#                                   so_kpmp_sc$celltype_rpca=="B"~"B",
#                                   so_kpmp_sc$celltype_rpca=="T"~"T")
# so_kpmp_sc$celltype1 <- as.character(so_kpmp_sc$celltype1)

so_kpmp_sc$KPMP_celltype2 <- as.character(so_kpmp_sc$KPMP_celltype)
so_kpmp_sc$celltype2 <- ifelse(so_kpmp_sc$KPMP_celltype=="aPT" | 
                                 so_kpmp_sc$KPMP_celltype=="PT-S1/S2" | 
                                 so_kpmp_sc$KPMP_celltype == "PT-S3","PT",
                               ifelse(grepl("TAL",so_kpmp_sc$KPMP_celltype),"TAL",
                                      ifelse(grepl("EC-",so_kpmp_sc$KPMP_celltype),"EC",so_kpmp_sc$KPMP_celltype2)))
# so_kpmp_sc$celltype2 <- factor(so_kpmp_sc$celltype2)

# so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>% 
#   mutate(SGLT2=ifelse(epic_sglt2i_1=="sglt2","SGLT2i","No SGLT2i"))

# #Filter to TCA cycle & Ox Phos Genes
# genes <- unique(c(tca,ox_phos))
# so_kpmp_sc <- subset(so_kpmp_sc, features = genes)
# DefaultAssay(so_kpmp_sc) <- "RNA"
# rownames(so_kpmp_sc) #34 genes remain

# # saveRDS(so_kpmp_sc,fs::path(dir.dat,"Cleaned_so_kpmp_sc2.rds"))
# so_kpmp_sc <- readRDS(fs::path(dir.dat,"Cleaned_so_kpmp_sc2.rds"))
# # so_kpmp_sc$celltype1 <- case_when(grepl("PT-",so_kpmp_sc$celltype_rpca)~"PT",
# #                                   grepl("TAL-",so_kpmp_sc$celltype_rpca)~"TAL",
# #                                   grepl("EC-",so_kpmp_sc$celltype_rpca)~"EC",
# #                                   grepl("POD",so_kpmp_sc$celltype_rpca)~"POD",
# #                                   grepl("MAC",so_kpmp_sc$celltype_rpca)~"MAC",
# #                                   grepl("MON",so_kpmp_sc$celltype_rpca)~"MON",
# #                                   grepl("PC-",so_kpmp_sc$celltype_rpca)~"PC",
# #                                   grepl("FIB",so_kpmp_sc$celltype_rpca)~"FIB_MC_VSMC",
# #                                   grepl("DTL",so_kpmp_sc$celltype_rpca)~"DTL",
# #                                   so_kpmp_sc$celltype_rpca=="DCT"~"DCT",
# #                                   so_kpmp_sc$celltype_rpca=="ATL"~"ATL",
# #                                   so_kpmp_sc$celltype_rpca=="B"~"B",
# #                                   so_kpmp_sc$celltype_rpca=="T"~"T")
# # so_kpmp_sc$celltype1 <- as.character(so_kpmp_sc$celltype1)
# 
# so_kpmp_sc$KPMP_celltype2 <- as.character(so_kpmp_sc$KPMP_celltype)
# so_kpmp_sc$celltype2 <- ifelse(so_kpmp_sc$KPMP_celltype=="aPT" | 
#                                  so_kpmp_sc$KPMP_celltype=="PT-S1/S2" | 
#                                  so_kpmp_sc$KPMP_celltype == "PT-S3","PT",
#                                ifelse(grepl("TAL",so_kpmp_sc$KPMP_celltype),"TAL",
#                                       ifelse(grepl("EC-",so_kpmp_sc$KPMP_celltype),"EC",so_kpmp_sc$KPMP_celltype2)))
#Make sure TAL includes all types
unique(so_kpmp_sc$KPMP_celltype)

so_kpmp_sc$TAL_celltype <- ifelse((so_kpmp_sc$KPMP_celltype=="C-TAL-1" | 
                                     so_kpmp_sc$KPMP_celltype=="C-TAL-2"|
                                     so_kpmp_sc$KPMP_celltype=="dTAL" |
                                     so_kpmp_sc$KPMP_celltype=="aTAL"), "TAL","Non-TAL")
# so_kpmp_sc$celltype2 <- factor(so_kpmp_sc$celltype2)

# so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>% 
#   mutate(SGLT2=ifelse(medication=="sglt2","SGLT2i","No SGLT2i"))

# tca_genes <- rownames(so_kpmp_sc)[which(rownames(so_kpmp_sc) %in% tca)]
# ox_phos_genes <- rownames(so_kpmp_sc)[which(rownames(so_kpmp_sc) %in% ox_phos)]

#DCT cells
unique(so_kpmp_sc$KPMP_celltype)
so_kpmp_sc$DCT_celltype <- ifelse((so_kpmp_sc$KPMP_celltype=="DCT" | 
                                     so_kpmp_sc$KPMP_celltype=="dDCT"), "DCT","Non-DCT")

# #Calculate K2 and F variables
# so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>% 
#   rowwise() %>%
#   mutate(avg_c_k2 = (lc_k2+rc_k2)/2) %>% 
#   mutate(avg_m_k2 = (lm_k2+rm_k2)/2) %>% 
#   mutate(avg_c_f = (lc_f+rc_f)/2) %>% 
#   mutate(avg_m_f = (lm_f+rm_f)/2) %>% 
#   ungroup()
# so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>% 
#   rowwise() %>% 
#   mutate(avg_c_k2_f = (avg_c_k2/avg_c_f)) %>% 
#   mutate(avg_m_k2_f = (avg_m_k2/avg_m_f)) %>% 
#   ungroup()
so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>% 
  mutate(SGLT2=ifelse(epic_sglti2_1=="Yes","SGLT2i","No SGLT2i")) %>% 
  mutate(GLP1=ifelse(epic_glp1ra_1=="Yes","GLP-1","No GLP-1")) %>% 
  mutate(Medication=ifelse(epic_sglti2_1=="Yes"|epic_glp1ra_1=="Yes","Medication","No Medication"))


so_kpmp_sc@meta.data <- so_kpmp_sc@meta.data %>% 
  mutate(SGLT2_exclusive=case_when(epic_sglti2_1=="Yes" & epic_glp1ra_1=="No" ~ "Exclusive SGLT2",
                                   epic_sglti2_1=="Yes" & epic_glp1ra_1=="Yes" ~ "No SGLT2",
                                   epic_sglti2_1=="No" & epic_glp1ra_1=="Yes" ~ "No SGLT2",
                                   epic_sglti2_1=="No" & epic_glp1ra_1=="No" ~ "No SGLT2")) %>% 
  mutate(GLP1_exclusive=case_when(epic_glp1ra_1=="Yes" & epic_sglti2_1=="No" ~ "Exclusive GLP-1",
                                  epic_glp1ra_1=="Yes" & epic_sglti2_1=="Yes" ~ "No GLP-1",
                                  epic_glp1ra_1=="No" & epic_sglti2_1=="Yes" ~ "No GLP-1",
                                  epic_glp1ra_1=="No" & epic_sglti2_1=="No" ~ "No GLP-1")) 
```

### Save cleaned up & modified Seurat object
```{r echo = F}
# kopah save
# write file
bucket <- "scrna" # bucket name in Kopah
temp_file <- tempfile(fileext = ".rds") # need to create a temporary file
saveRDS(so_kpmp_sc, temp_file) # save the temp file locally (will delete after R session)
s3$upload_file(temp_file, bucket, 'data_clean/Cleaned_DECODE_so.rds')

# so_kpmp_sc <- readRDS("/home/hailey/Documents/DECODE Data/Cleaned_DECODE_so.rds")
```

## 3B. Medication Status - Type 2 Diabetes Only
### a. PT Cells
#### GLP-1RA
#####NEBULA 
```{r}
#Filter to PT Cells
so_celltype <- subset(so_kpmp_sc,celltype2=="PT")
so_celltype <- subset(so_celltype,group=="Type_2_Diabetes")

# Filter out 3 participants on both GLP1RA and SGLT2i
so_celltype <- subset(so_celltype,glp1_sglt2=="No")
so_celltype <- subset(so_celltype,SGLT2_exclusive=="No SGLT2")
DefaultAssay(so_celltype) <- "RNA" 

nrow(so_celltype) #9216 genes
ncol(so_celltype) #10277 PT cells

## Select Highly Variable Genes (paths)
so_celltype <- FindVariableFeatures(so_celltype, selection.method = "vst", nfeatures = 2000)
hvg <- VariableFeatures(so_celltype)

# Subset Seurat object to only paths
so_celltype_hvg <- subset(so_celltype, features = hvg)
DefaultAssay(so_celltype_hvg) <- "RNA"
# #Select TCA and Ox Phos Genes
# # pathway_genes <- c(tca,ox_phos)
# so_celltype_path <- subset(so_celltype, features = tca)
# DefaultAssay(so_celltype_path) <- "RNA"

#Make sure exposure/independent/x variable or group variable is a factor variable
so_celltype_hvg$GLP1_exclusive <- factor(so_celltype_hvg$GLP1_exclusive)
#Make sure to set reference level
so_celltype_hvg$GLP1_exclusive  <- relevel(so_celltype_hvg$GLP1_exclusive ,ref="No GLP-1")

counts_path <- round(GetAssayData(so_celltype_hvg, layer = "counts")) # load counts and round
```


```{r echo = F}
# With parallelization
# List of genes
genes_list <- hvg

cl <- makeCluster(25)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_results_list <- foreach(g = genes_list, .packages = c("nebula", "Matrix")) %dopar% {
  tryCatch({
    count_gene <- counts_path[g, , drop = FALSE]
    meta_gene <- subset(so_celltype, features = g)@meta.data
    pred_gene <- model.matrix(~GLP1_exclusive, data = meta_gene)
    # library <- meta_gene$library_size
    library <- meta_gene$pooled_offset
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$kit_id, pred = pred_gene,offset=library)
    
    if (is.null(data_g_gene)) {
      data_g_gene <- list(count = count_gene, id = meta_gene$kit_id, pred = pred_gene, offset = library)
    }
    
    #With offset
    result <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, ncore = 1, reml=T,model="NBLMM",output_re = T,covariance=T,offset=data_g_gene$library)
    
    list(gene = g, result = result)  # return both gene name and result
    
  }, error = function(e) {
    NULL
  })
}

stopCluster(cl)
end_time <- Sys.time()
print(end_time - start_time)

# set the names of results based on gene names
nebula_results_list <- Filter(Negate(is.null), nebula_results_list)  # remove NULLs first
names(nebula_results_list) <- sapply(nebula_results_list, function(x) x$gene)  # set names
nebula_results_list <- lapply(nebula_results_list, function(x) x$result)  # clean list back to just results
```

```{r echo = F}
PT_nebula_converged <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    converged <- nebula_results_list[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

nebula_summaries <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    df <- nebula_results_list[[gene_name]]$summary
    df <- df %>% mutate(Gene = gene_name)
    return(df)
  }
)
nonconverge_genes <- unique(PT_nebula_converged$Gene[which(PT_nebula_converged$Convergence_Code==-40)]) 

#Make dataframe of final results
full_results <- as.data.frame(nebula_summaries)
#Calculate number of genes filtered out for low expression 
low_exp <- length(genes_list)-length(full_results$gene)
#Filter out non-converging genes
full_results <- full_results %>% 
  filter(Gene %nin%  nonconverge_genes)
#Calculate nonconvergence rate
nebula_nonconverged_percent <- paste0(round((1-(length(genes_list)-length(nonconverge_genes))/length(genes_list))*100,3),"%")
# nebula_nonconverged_percent <- (length(rownames(counts_path))-length(unique(full_results$gene)))/length(rownames(counts_path))
# print(paste0(nebula_nonconverged_percent*100, "% failed to converge"))
full_results <- full_results %>%
  mutate(fdr=p.adjust(`p_GLP1_exclusiveNo GLP-1`,method="fdr"))  
# mutate(fdr3=p.adjust(PValue3,method="fdr"))
full_results$PValue10 <- -log10(pmax(full_results$`p_GLP1_exclusiveNo GLP-1`, 1e-10))  # Avoid log(0)

full_results$color <- ifelse(full_results$fdr < 0.05 & full_results$`logFC_GLP1_exclusiveNo GLP-1` > 0, "lightcoral",
                             ifelse(full_results$fdr < 0.05 & full_results$`logFC_GLP1_exclusiveNo GLP-1` < 0, "lightblue", "gray"))

# write.csv(full_results,fs::path(dir.results,"DECODE_NEBULA_PT_cells_T2D_SGLT2_unadjusted_pooled_offset.csv"))
```

```{r echo = F}
# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.05, ]

Genes <- length(unique(full_results$gene))
Cells <- ncol(so_celltype)
Nonconvergence_Rate <- nebula_nonconverged_percent
# full_results$color3 <- ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 > 0, "lightcoral",
#                               ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 < 0, "lightblue", "gray"))
# 
# # Identify significant points (fdr < 0.05)
# significant_df3 <- full_results[full_results$fdr3 < 0.2, ]

max <- max(full_results$`logFC_GLP1_exclusiveNo GLP-1`)
# max <- 3.1
min <- min(full_results$`logFC_GLP1_exclusiveNo GLP-1`)

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = `logFC_GLP1_exclusiveNo GLP-1`, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "Differentially Expressed 2000 HVG in PT Cells",
    subtitle = "GLP-1 vs. No GLP-1 (T2D), Unadjusted (Pooled Offset)",
    x = "FC",
    y = "-log10(P-Value)",
    color = "FC Direction Direction",
    caption = paste0("FDR < 0.05, Genes = ",Genes,", Cells = ",Cells,", Non-Convergence Rate: ",Nonconvergence_Rate,", Genes Filtered out for Low Expression: ",low_exp)
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 0, hjust = 1)
  )+
  xlim(min,max)+
  # xlim(-5,5)+
  # # Add labels for significant points
  geom_text(data = significant_df, aes(label = gene),
            vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
# Add labels for significant points with ggrepel
# geom_text_repel(data = significant_df, aes(label = Gene),
#                 size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)
# dot_plot <- ggplot(full_results, aes(
#   y = reorder(gene, logFC_groupType_2_Diabetes),
#   x = logFC_groupType_2_Diabetes,
#   color = color,
#   size = abs(logFC_groupType_2_Diabetes)
# )) +
#   geom_point(alpha = 0.7) +
#   scale_color_identity() +
#   scale_size(range = c(2, 6), name = "|LogFC|") +
#   geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
#   theme_minimal() +  # Retains grid lines
#   labs(
#     title = "Differentially Expressed 2000 HVG in PT Cells",
#     subtitle = "T2D vs. LC (No Medication), Unadjusted (Pooled Offset)",
#     x = "Log Fold Change",
#     y = "Gene",
#     caption = paste0(
#       "FDR < 0.05, Genes = ", Genes,
#       ", Nuclei = ", Nuclei,
#       ", Non-Convergence Rate: ", Nonconvergence_Rate,
#       ", Genes Filtered out for Low Expression: ", low_exp
#     )
#   ) +
#   theme(
#     plot.title = element_text(hjust = 0),
#     axis.text.y = element_text(size = 8),
#     # axis.text.x = element_text(angle = 0, hjust = 1),
#     axis.line = element_line(color = "black", size = 0.5),
#     axis.ticks.x = element_line(color = "black"),
#     panel.border = element_blank(),
#     panel.background = element_blank()
#   )
# dot_plot
volcano_plot
# png(fs::path(dir.results, "Plot_DECODE_NEBULA_PT_T2D_SGLT2_unadjusted_pooled_offset_T2D.png"), 
#     width = 2000, height = 1500, res = 300)
print(volcano_plot)
dev.off()
```

##### GSEA

```{r echo = F}
# Functions =================================================== https://biostatsquid.com/fgsea-tutorial-gsea/
## Function: Adjacency matrix to list -------------------------
matrix_to_list <- function(pws){
  pws.l <- list()
  for (pw in colnames(pws)) {
    pws.l[[pw]] <- rownames(pws)[as.logical(pws[, pw])]
  }
  return(pws.l)
}
## Function: prepare_gmt --------------------------------------
prepare_gmt <- function(gmt_file, genes_in_data, savefile = FALSE){
  # for debug
  #file <- gmt_files[1]
  #genes_in_data <- df$gene_symbol
  
  # Read in gmt file
  gmt <- gmtPathways(gmt_file)
  hidden <- unique(unlist(gmt))
  
  # Convert gmt file to a matrix with the genes as rows and for each go annotation (columns) the values are 0 or 1
  mat <- matrix(NA, dimnames = list(hidden, names(gmt)),
                nrow = length(hidden), ncol = length(gmt))
  for (i in 1:dim(mat)[2]){
    mat[,i] <- as.numeric(hidden %in% gmt[[i]])
  }
  
  #Subset to the genes that are present in our data to avoid bias
  hidden1 <- intersect(genes_in_data, hidden)
  mat <- mat[hidden1, colnames(mat)[which(colSums(mat[hidden1,])>5)]] # filter for gene sets with more than 5 genes annotated
  # And get the list again
  final_list <- matrix_to_list(mat) # for this we use the function we previously defined
  
  if(savefile){
    saveRDS(final_list, file = paste0(gsub('.gmt', '', gmt_file), '_subset_', format(Sys.time(), '%d%m'), '.RData'))
  }
  
  print('Wohoo! .gmt conversion successfull!:)')
  return(final_list)
}

```

```{r}
full_results <- full_results %>%
  clean_names() %>% 
  dplyr::rename(Gene=gene,LogFC=log_fc_glp1_exclusive_no_glp_1)

# Filter out the gmt files for KEGG, Reactome and GOBP
bucket <- "gsea" # bucket name in Kopah
temp_file <- tempfile(fileext = ".gmt") # need to create a temporary file

# GOBP
s3$download_file(bucket, "gmt_files/c5.go.v2024.1.Hs.symbols.gmt", temp_file)
go <- prepare_gmt(temp_file, unique(full_results$Gene), savefile = FALSE)

# KEGG
s3$download_file(bucket, "gmt_files/c2.cp.kegg_legacy.v2024.1.Hs.symbols.gmt", temp_file)
kegg_legacy <- prepare_gmt(temp_file, unique(full_results$Gene), savefile = FALSE)

# REACTOME
s3$download_file(bucket, "gmt_files/c2.cp.reactome.v2024.1.Hs.symbols.gmt", temp_file)
reactome <- prepare_gmt(temp_file, unique(full_results$Gene), savefile = FALSE)

# rank genes by t-stats in DiD
rankings_PT <- full_results$LogFC
names(rankings_PT) <- full_results$Gene
rankings_PT <- sort(rankings_PT, decreasing = TRUE)
plot(rankings_PT)
min(rankings_PT)
max(rankings_PT)
```


```{r echo = F}
set.seed(1234)

kegg_legacy_res_PT <- fgsea(pathways = kegg_legacy,
                            stats = rankings_PT,
                            scoreType = 'std', 
                            minSize = 3,
                            maxSize = 500,
                            nproc = 1)

reactome_res_PT <- fgsea(pathways = reactome,
                         stats = rankings_PT,
                         scoreType = 'std', 
                         minSize = 3,
                         maxSize = 500,
                         nproc = 1)
go_res_PT <- fgsea(pathways = go,
                   stats = rankings_PT,
                   scoreType = 'std', 
                   minSize = 5,
                   maxSize = 500,
                   nproc = 1)

PT_fgsea <- data.frame("KEGG Legacy"=c(sum(kegg_legacy_res_PT[, padj < 0.05], na.rm = T), 
                                       sum(kegg_legacy_res_PT[, pval < 0.05], na.rm = T)),
                       "REACTOME"=c(sum(reactome_res_PT[, padj < 0.05], na.rm = T), 
                                    sum(reactome_res_PT[, pval < 0.05], na.rm = T)),
                       "GO"=c(sum(go_res_PT[, padj < 0.05], na.rm = T), 
                              sum(go_res_PT[, pval < 0.05], na.rm = T)))
rownames(PT_fgsea) <- c("adj.pval", "p.val")
```

```{r echo = F}
dir.dat <- NULL
source("/mmfs1/gscratch/scrubbed/yejichoi/CHCO-Code/Petter Bjornstad/Kidney scRNA/Kidney scRNA/Kidney_functions_sc.R")

##### KEGG Legacy
a <- plot_fgsea_transpose(kegg_legacy_res_PT, title = "PT Unadjusted Top 30 KEGG (REML, Log Normal, Offset)",xlimit = 4, xnudge = 0.03)+ theme(legend.position.inside = c(0.2, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_kegg_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)

##### REACTOME
b <- plot_fgsea_transpose(reactome_res_PT, title = "PT Unadjusted Top 30 REACTOME (REML, Log Normal, Offset)", xlimit = 5) + theme(legend.position.inside = c(0.15, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_reactome_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)
##### GO
c <- plot_fgsea_transpose(go_res_PT, title = "PT Unadjusted Top 30 GO (REML, Log Normal, Offset)", xlimit = 8)+ theme(legend.position.inside = c(0.1, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_go_pathways_unadjusted_reml_offset.jpeg"),
#        width = 13, height = 10, scale = 1)

combined_plot <- b + c + plot_layout(ncol = 1)
print(combined_plot)
# ggsave(fs::path(dir.results,"PT_top30_pathways_unadjusted_T2D_SGLT2.jpeg"),
#        width = 15, height = 20, scale = 1)
```

#### ii. PT-S1/2
#####NEBULA
```{r}
#Filter to PT Cells
so_celltype <- subset(so_kpmp_sc,KPMP_celltype=="PT-S1/S2")
# Filter out 3 participants on both GLP1RA and SGLT2i
so_celltype <- subset(so_celltype,glp1_sglt2=="No")
so_celltype <- subset(so_celltype,SGLT2_exclusive=="No SGLT2")
DefaultAssay(so_celltype) <- "RNA" 

nrow(so_celltype) #9216 genes
ncol(so_celltype) #8944 PT cells

## Select Highly Variable Genes (paths)
so_celltype <- FindVariableFeatures(so_celltype, selection.method = "vst", nfeatures = 2000)
hvg <- VariableFeatures(so_celltype)

# Subset Seurat object to only paths
so_celltype_hvg <- subset(so_celltype, features = hvg)
DefaultAssay(so_celltype_hvg) <- "RNA"
# #Select TCA and Ox Phos Genes
# # pathway_genes <- c(tca,ox_phos)
# so_celltype_path <- subset(so_celltype, features = tca)
# DefaultAssay(so_celltype_path) <- "RNA"

#Make sure exposure/independent/x variable or group variable is a factor variable
so_celltype_hvg$GLP1_exclusive <- factor(so_celltype_hvg$GLP1_exclusive)
#Make sure to set reference level
so_celltype_hvg$GLP1_exclusive  <- relevel(so_celltype_hvg$GLP1_exclusive ,ref="No GLP-1")

counts_path <- round(GetAssayData(so_celltype_hvg, layer = "counts")) # load counts and round
```

```{r echo = F}
# With parallelization
# List of genes
genes_list <- hvg

cl <- makeCluster(25)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_results_list <- foreach(g = genes_list, .packages = c("nebula", "Matrix")) %dopar% {
  tryCatch({
    count_gene <- counts_path[g, , drop = FALSE]
    meta_gene <- subset(so_celltype, features = g)@meta.data
    pred_gene <- model.matrix(~GLP1_exclusive, data = meta_gene)
    # library <- meta_gene$library_size
    library <- meta_gene$pooled_offset
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$kit_id, pred = pred_gene,offset=library)
    
    if (is.null(data_g_gene)) {
      data_g_gene <- list(count = count_gene, id = meta_gene$kit_id, pred = pred_gene, offset = library)
    }
    
    #With offset
    result <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, ncore = 1, reml=T,model="NBLMM",output_re = T,covariance=T,offset=data_g_gene$library)
    
    list(gene = g, result = result)  # return both gene name and result
    
  }, error = function(e) {
    NULL
  })
}

stopCluster(cl)
end_time <- Sys.time()
print(end_time - start_time)

# set the names of results based on gene names
nebula_results_list <- Filter(Negate(is.null), nebula_results_list)  # remove NULLs first
names(nebula_results_list) <- sapply(nebula_results_list, function(x) x$gene)  # set names
nebula_results_list <- lapply(nebula_results_list, function(x) x$result)  # clean list back to just results
```

```{r echo = F}
PT_nebula_converged <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    converged <- nebula_results_list[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

nebula_summaries <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    df <- nebula_results_list[[gene_name]]$summary
    df <- df %>% mutate(Gene = gene_name)
    return(df)
  }
)
nonconverge_genes <- unique(PT_nebula_converged$Gene[which(PT_nebula_converged$Convergence_Code==-40)]) 

#Make dataframe of final results
full_results <- as.data.frame(nebula_summaries)
#Calculate number of genes filtered out for low expression 
low_exp <- length(genes_list)-length(full_results$gene)
#Filter out non-converging genes
full_results <- full_results %>% 
  filter(Gene %nin%  nonconverge_genes)
#Calculate nonconvergence rate
nebula_nonconverged_percent <- paste0(round((1-(length(genes_list)-length(nonconverge_genes))/length(genes_list))*100,3),"%")
# nebula_nonconverged_percent <- (length(rownames(counts_path))-length(unique(full_results$gene)))/length(rownames(counts_path))
# print(paste0(nebula_nonconverged_percent*100, "% failed to converge"))
full_results <- full_results %>%
  mutate(fdr=p.adjust(`p_GLP1_exclusiveNo GLP-1`,method="fdr"))  
# mutate(fdr3=p.adjust(PValue3,method="fdr"))
full_results$PValue10 <- -log10(pmax(full_results$`p_GLP1_exclusiveNo GLP-1`, 1e-10))  # Avoid log(0)

full_results$color <- ifelse(full_results$fdr < 0.05 & full_results$`logFC_GLP1_exclusiveNo GLP-1` > 0, "lightcoral",
                             ifelse(full_results$fdr < 0.05 & full_results$`logFC_GLP1_exclusiveNo GLP-1` < 0, "lightblue", "gray"))

# write.csv(full_results,fs::path(dir.results,"DECODE_NEBULA_PT_cells_T2D_SGLT2_unadjusted_pooled_offset.csv"))
```

```{r echo = F}
# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.05, ]

Genes <- length(unique(full_results$gene))
Cells <- ncol(so_celltype)
Nonconvergence_Rate <- nebula_nonconverged_percent
# full_results$color3 <- ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 > 0, "lightcoral",
#                               ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 < 0, "lightblue", "gray"))
# 
# # Identify significant points (fdr < 0.05)
# significant_df3 <- full_results[full_results$fdr3 < 0.2, ]

max <- max(full_results$`logFC_GLP1_exclusiveNo GLP-1`)
# max <- 3.1
min <- min(full_results$`logFC_GLP1_exclusiveNo GLP-1`)

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = `logFC_GLP1_exclusiveNo GLP-1`, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "Differentially Expressed 2000 HVG in PT Cells",
    subtitle = "GLP-1 vs. No GLP-1 (T2D), Unadjusted (Pooled Offset)",
    x = "FC",
    y = "-log10(P-Value)",
    color = "FC Direction Direction",
    caption = paste0("FDR < 0.05, Genes = ",Genes,", Cells = ",Cells,", Non-Convergence Rate: ",Nonconvergence_Rate,", Genes Filtered out for Low Expression: ",low_exp)
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 0, hjust = 1)
  )+
  xlim(min,max)+
  # xlim(-5,5)+
  # # Add labels for significant points
  geom_text(data = significant_df, aes(label = gene),
            vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
# Add labels for significant points with ggrepel
# geom_text_repel(data = significant_df, aes(label = Gene),
#                 size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)
# dot_plot <- ggplot(full_results, aes(
#   y = reorder(gene, logFC_groupType_2_Diabetes),
#   x = logFC_groupType_2_Diabetes,
#   color = color,
#   size = abs(logFC_groupType_2_Diabetes)
# )) +
#   geom_point(alpha = 0.7) +
#   scale_color_identity() +
#   scale_size(range = c(2, 6), name = "|LogFC|") +
#   geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
#   theme_minimal() +  # Retains grid lines
#   labs(
#     title = "Differentially Expressed 2000 HVG in PT Cells",
#     subtitle = "T2D vs. LC (No Medication), Unadjusted (Pooled Offset)",
#     x = "Log Fold Change",
#     y = "Gene",
#     caption = paste0(
#       "FDR < 0.05, Genes = ", Genes,
#       ", Nuclei = ", Nuclei,
#       ", Non-Convergence Rate: ", Nonconvergence_Rate,
#       ", Genes Filtered out for Low Expression: ", low_exp
#     )
#   ) +
#   theme(
#     plot.title = element_text(hjust = 0),
#     axis.text.y = element_text(size = 8),
#     # axis.text.x = element_text(angle = 0, hjust = 1),
#     axis.line = element_line(color = "black", size = 0.5),
#     axis.ticks.x = element_line(color = "black"),
#     panel.border = element_blank(),
#     panel.background = element_blank()
#   )
# dot_plot
volcano_plot
# png(fs::path(dir.results, "Plot_DECODE_NEBULA_PT_T2D_SGLT2_unadjusted_pooled_offset_T2D.png"), 
#     width = 2000, height = 1500, res = 300)
temp_file = tempfile(fileext = ".png")
bucket <- "scrna" # bucket name in Kopah
temp_file <- tempfile(fileext = ".rds") # need to create a temporary file
s3$upload_file(temp_file, bucket, "Kidney transcriptomics/Single cell RNA seq/PB_90_RPCAFix_Metadata_LR_RM_kpmpV1labelled.rds")
so_kpmp_sc <- readRDS(temp_file)


dev.off()
```

##### GSEA

```{r echo = F}
# Functions =================================================== https://biostatsquid.com/fgsea-tutorial-gsea/
## Function: Adjacency matrix to list -------------------------
matrix_to_list <- function(pws){
  pws.l <- list()
  for (pw in colnames(pws)) {
    pws.l[[pw]] <- rownames(pws)[as.logical(pws[, pw])]
  }
  return(pws.l)
}
## Function: prepare_gmt --------------------------------------
prepare_gmt <- function(gmt_file, genes_in_data, savefile = FALSE){
  # for debug
  #file <- gmt_files[1]
  #genes_in_data <- df$gene_symbol
  
  # Read in gmt file
  gmt <- gmtPathways(gmt_file)
  hidden <- unique(unlist(gmt))
  
  # Convert gmt file to a matrix with the genes as rows and for each go annotation (columns) the values are 0 or 1
  mat <- matrix(NA, dimnames = list(hidden, names(gmt)),
                nrow = length(hidden), ncol = length(gmt))
  for (i in 1:dim(mat)[2]){
    mat[,i] <- as.numeric(hidden %in% gmt[[i]])
  }
  
  #Subset to the genes that are present in our data to avoid bias
  hidden1 <- intersect(genes_in_data, hidden)
  mat <- mat[hidden1, colnames(mat)[which(colSums(mat[hidden1,])>5)]] # filter for gene sets with more than 5 genes annotated
  # And get the list again
  final_list <- matrix_to_list(mat) # for this we use the function we previously defined
  
  if(savefile){
    saveRDS(final_list, file = paste0(gsub('.gmt', '', gmt_file), '_subset_', format(Sys.time(), '%d%m'), '.RData'))
  }
  
  print('Wohoo! .gmt conversion successfull!:)')
  return(final_list)
}

```

```{r}
full_results <- full_results %>%
  clean_names() %>% 
  dplyr::rename(Gene=gene,LogFC=log_fc_glp1_exclusive_no_glp_1)

# Filter out the gmt files for KEGG, Reactome and GOBP
bucket <- "gsea" # bucket name in Kopah
temp_file <- tempfile(fileext = ".gmt") # need to create a temporary file

# GOBP
s3$download_file(bucket, "gmt_files/c5.go.v2024.1.Hs.symbols.gmt", temp_file)
go <- prepare_gmt(temp_file, unique(full_results$Gene), savefile = FALSE)

# KEGG
s3$download_file(bucket, "gmt_files/c2.cp.kegg_legacy.v2024.1.Hs.symbols.gmt", temp_file)
kegg_legacy <- prepare_gmt(temp_file, unique(full_results$Gene), savefile = FALSE)

# REACTOME
s3$download_file(bucket, "gmt_files/c2.cp.reactome.v2024.1.Hs.symbols.gmt", temp_file)
reactome <- prepare_gmt(temp_file, unique(full_results$Gene), savefile = FALSE)

# rank genes by t-stats in DiD
rankings_PT <- full_results$LogFC
names(rankings_PT) <- full_results$Gene
rankings_PT <- sort(rankings_PT, decreasing = TRUE)
plot(rankings_PT)
min(rankings_PT)
max(rankings_PT)
```


```{r echo = F}
set.seed(1234)

kegg_legacy_res_PT <- fgsea(pathways = kegg_legacy,
                            stats = rankings_PT,
                            scoreType = 'std', 
                            minSize = 3,
                            maxSize = 500,
                            nproc = 1)

reactome_res_PT <- fgsea(pathways = reactome,
                         stats = rankings_PT,
                         scoreType = 'std', 
                         minSize = 3,
                         maxSize = 500,
                         nproc = 1)
go_res_PT <- fgsea(pathways = go,
                   stats = rankings_PT,
                   scoreType = 'std', 
                   minSize = 5,
                   maxSize = 500,
                   nproc = 1)

PT_fgsea <- data.frame("KEGG Legacy"=c(sum(kegg_legacy_res_PT[, padj < 0.05], na.rm = T), 
                                       sum(kegg_legacy_res_PT[, pval < 0.05], na.rm = T)),
                       "REACTOME"=c(sum(reactome_res_PT[, padj < 0.05], na.rm = T), 
                                    sum(reactome_res_PT[, pval < 0.05], na.rm = T)),
                       "GO"=c(sum(go_res_PT[, padj < 0.05], na.rm = T), 
                              sum(go_res_PT[, pval < 0.05], na.rm = T)))
rownames(PT_fgsea) <- c("adj.pval", "p.val")
```

```{r echo = F}
dir.dat <- NULL
source("/mmfs1/gscratch/scrubbed/yejichoi/CHCO-Code/Petter Bjornstad/Kidney scRNA/Kidney scRNA/Kidney_functions_sc.R")

##### KEGG Legacy
a <- plot_fgsea_transpose(kegg_legacy_res_PT, title = "PT Unadjusted Top 30 KEGG (REML, Log Normal, Offset)",xlimit = 4, xnudge = 0.03)+ theme(legend.position.inside = c(0.2, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_kegg_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)

##### REACTOME
b <- plot_fgsea_transpose(reactome_res_PT, title = "PT Unadjusted Top 30 REACTOME (REML, Log Normal, Offset)", xlimit = 5) + theme(legend.position.inside = c(0.15, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_reactome_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)
##### GO
c <- plot_fgsea_transpose(go_res_PT, title = "PT Unadjusted Top 30 GO (REML, Log Normal, Offset)", xlimit = 8)+ theme(legend.position.inside = c(0.1, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_go_pathways_unadjusted_reml_offset.jpeg"),
#        width = 13, height = 10, scale = 1)

combined_plot <- b + c + plot_layout(ncol = 1)
print(combined_plot)
# ggsave(fs::path(dir.results,"PT_top30_pathways_unadjusted_T2D_SGLT2.jpeg"),
#        width = 15, height = 20, scale = 1)
```

#### iii. PT-S3
####NEBULA & GSEA
```{r}
#Filter to PT Cells
so_celltype <- subset(so_kpmp_sc,KPMP_celltype=="PT-S3")
so_celltype <- subset(so_celltype,Medication=="No Medication")
DefaultAssay(so_celltype) <- "RNA" 

nrow(so_celltype) #9416 genes
ncol(so_celltype) #10136 PT cells

## Select Highly Variable Genes (paths)
so_celltype <- FindVariableFeatures(so_celltype, selection.method = "vst", nfeatures = 2000)
hvg <- VariableFeatures(so_celltype)

# Subset Seurat object to only paths
so_celltype_hvg <- subset(so_celltype, features = hvg)
DefaultAssay(so_celltype_hvg) <- "RNA"

# #Select TCA and Ox Phos Genes
# # pathway_genes <- c(tca,ox_phos)
# so_celltype_path <- subset(so_celltype, features = tca)
# DefaultAssay(so_celltype_path) <- "RNA"

#Make sure exposure/independent/x variable or group variable is a factor variable
so_celltype_hvg$group <- factor(so_celltype_hvg$group)
#Make sure to set reference level
so_celltype_hvg$group  <- relevel(so_celltype_hvg$group ,ref="Lean_Control")

counts_path <- round(GetAssayData(so_celltype_hvg, layer = "counts")) # load counts and round

# With parallelization
# List of genes
genes_list <- hvg

cl <- makeCluster(10)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_results_list <- foreach(g = genes_list, .packages = c("nebula", "Matrix")) %dopar% {
  tryCatch({
    count_gene <- counts_path[g, , drop = FALSE]
    meta_gene <- so_celltype@meta.data
    pred_gene <- model.matrix(~group, data = meta_gene)
    # library <- meta_gene$library_size
    library <- meta_gene$pooled_offset
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$kit_id, pred = pred_gene,offset=library)
    
    if (is.null(data_g_gene)) {
      data_g_gene <- list(count = count_gene, id = meta_gene$kit_id, pred = pred_gene, offset = library)
    }
    
    #With offset
    result <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, ncore = 1, reml=T,model="NBLMM",output_re = T,covariance=T,offset=data_g_gene$library)
    
    list(gene = g, result = result)  # return both gene name and result
    
  }, error = function(e) {
    NULL
  })
}

stopCluster(cl)
end_time <- Sys.time()
print(end_time - start_time)

# set the names of results based on gene names
nebula_results_list <- Filter(Negate(is.null), nebula_results_list)  # remove NULLs first
names(nebula_results_list) <- sapply(nebula_results_list, function(x) x$gene)  # set names
nebula_results_list <- lapply(nebula_results_list, function(x) x$result)  # clean list back to just results

PT_nebula_converged <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    converged <- nebula_results_list[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

nebula_summaries <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    df <- nebula_results_list[[gene_name]]$summary
    df <- df %>% mutate(Gene = gene_name)
    return(df)
  }
)
nonconverge_genes <- unique(PT_nebula_converged$Gene[which(PT_nebula_converged$Convergence_Code==-40)]) 

#Make dataframe of final results
full_results <- as.data.frame(nebula_summaries)
#Calculate number of genes filtered out for low expression 
low_exp <- length(genes_list)-length(full_results$gene)
#Filter out non-converging genes
full_results <- full_results %>% 
  filter(!gene %in%  nonconverge_genes)
#Calculate nonconvergence rate
nebula_nonconverged_percent <- paste0(round((1-(length(genes_list)-length(nonconverge_genes))/length(genes_list))*100,3),"%")
# nebula_nonconverged_percent <- (length(rownames(counts_path))-length(unique(full_results$gene)))/length(rownames(counts_path))
# print(paste0(nebula_nonconverged_percent*100, "% failed to converge"))
full_results <- full_results %>%
  mutate(fdr=p.adjust(`p_groupType_2_Diabetes`,method="fdr"))  
# mutate(fdr3=p.adjust(PValue3,method="fdr"))
full_results$PValue10 <- -log10(pmax(full_results$`p_groupType_2_Diabetes`, 1e-10))  # Avoid log(0)

write.csv(full_results,fs::path(dir.results,"DECODE_NEBULA_PT_S3_cells_T2D_HC_No_Med_unadjusted_pooled_offset.csv"))

full_results$color <- ifelse(full_results$fdr < 0.05 & full_results$`logFC_groupType_2_Diabetes` > 0, "lightcoral",
                             ifelse(full_results$fdr < 0.05 & full_results$`logFC_groupType_2_Diabetes` < 0, "lightblue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.05, ]

Genes <- length(unique(full_results$gene))
Nuclei <- ncol(so_celltype)
Nonconvergence_Rate <- nebula_nonconverged_percent
# full_results$color3 <- ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 > 0, "lightcoral",
#                               ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 < 0, "lightblue", "gray"))
# 
# # Identify significant points (fdr < 0.05)
# significant_df3 <- full_results[full_results$fdr3 < 0.2, ]

max <- max(full_results$`logFC_groupType_2_Diabetes`)
# max <- 3.1
min <- min(full_results$`logFC_groupType_2_Diabetes`)

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = `logFC_groupType_2_Diabetes`, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "Differentially Expressed 2000 HVG in PT-S3 Cells",
    subtitle = "T2D vs. LC (No Medication), Unadjusted (Pooled Offset)",
    x = "FC",
    y = "-log10(P-Value)",
    color = "FC Direction Direction",
    caption = paste0("FDR < 0.05, Genes = ",Genes,", Nuclei = ",Nuclei,", Non-Convergence Rate: ",Nonconvergence_Rate,", Genes Filtered out for Low Expression: ",low_exp)
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 0, hjust = 1)
  )+
  # xlim(min,max)+
  xlim(-3,3)+
  # # Add labels for significant points
  geom_text(data = significant_df, aes(label = gene),
            vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
# Add labels for significant points with ggrepel
# geom_text_repel(data = significant_df, aes(label = Gene),
#                 size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)
# dot_plot <- ggplot(full_results, aes(
#   y = reorder(gene, logFC_groupType_2_Diabetes),
#   x = logFC_groupType_2_Diabetes,
#   color = color,
#   size = abs(logFC_groupType_2_Diabetes)
# )) +
#   geom_point(alpha = 0.7) +
#   scale_color_identity() +
#   scale_size(range = c(2, 6), name = "|LogFC|") +
#   geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
#   theme_minimal() +  # Retains grid lines
#   labs(
#     title = "Differentially Expressed 2000 HVG in PT Cells",
#     subtitle = "T2D vs. LC (No Medication), Unadjusted (Pooled Offset)",
#     x = "Log Fold Change",
#     y = "Gene",
#     caption = paste0(
#       "FDR < 0.05, Genes = ", Genes,
#       ", Nuclei = ", Nuclei,
#       ", Non-Convergence Rate: ", Nonconvergence_Rate,
#       ", Genes Filtered out for Low Expression: ", low_exp
#     )
#   ) +
#   theme(
#     plot.title = element_text(hjust = 0),
#     axis.text.y = element_text(size = 8),
#     # axis.text.x = element_text(angle = 0, hjust = 1),
#     axis.line = element_line(color = "black", size = 0.5),
#     axis.ticks.x = element_line(color = "black"),
#     panel.border = element_blank(),
#     panel.background = element_blank()
#   )
# dot_plot
volcano_plot
png(fs::path(dir.results, "Plot_DECODE_NEBULA_PT_S3_T2D_LC_No_Med_unadjusted_pooled_offset_T2D_truncated.png"), 
    width = 2000, height = 1500, res = 300)
print(volcano_plot)
dev.off()

#### GSEA
full_results <- read.csv(fs::path(dir.results,"DECODE_NEBULA_PT_S3_cells_T2D_HC_No_Med_unadjusted_pooled_offset.csv")) %>%
  clean_names() %>% 
  dplyr::select(-x) %>% 
  dplyr::rename(Gene=gene,LogFC=log_fc_group_type_2_diabetes)

# Filter out the gmt files for KEGG, Reactome and GOBP
list.files(bg_path)
gmt_files <- list.files(path = bg_path, pattern = '.gmt', full.names = TRUE)
gmt_files
kegg_legacy <- prepare_gmt(gmt_files[1], unique(full_results$Gene), savefile = FALSE)
reactome <- prepare_gmt(gmt_files[3], unique(full_results$Gene), savefile = FALSE)
go <- prepare_gmt(gmt_files[4], unique(full_results$Gene), savefile = FALSE)

# rank genes by t-stats in DiD
rankings_PT <- full_results$LogFC
names(rankings_PT) <- full_results$Gene
rankings_PT <- sort(rankings_PT, decreasing = TRUE)
plot(rankings_PT)
min(rankings_PT)
max(rankings_PT)


set.seed(1234)

kegg_legacy_res_PT <- fgsea(pathways = kegg_legacy,
                            stats = rankings_PT,
                            scoreType = 'std', 
                            minSize = 3,
                            maxSize = 500,
                            nproc = 1)

reactome_res_PT <- fgsea(pathways = reactome,
                         stats = rankings_PT,
                         scoreType = 'std', 
                         minSize = 3,
                         maxSize = 500,
                         nproc = 1)
go_res_PT <- fgsea(pathways = go,
                   stats = rankings_PT,
                   scoreType = 'std', 
                   minSize = 5,
                   maxSize = 500,
                   nproc = 1)

PT_fgsea <- data.frame("KEGG Legacy"=c(sum(kegg_legacy_res_PT[, padj < 0.05]), sum(kegg_legacy_res_PT[, pval < 0.05])),
                       "REACTOME"=c(sum(reactome_res_PT[, padj < 0.05]), sum(reactome_res_PT[, pval < 0.05])),
                       "GO"=c(sum(go_res_PT[, padj < 0.05]), sum(go_res_PT[, pval < 0.05])))
rownames(PT_fgsea) <- c("adj.pval", "p.val")

##### KEGG Legacy
a <- plot_fgsea_transpose(kegg_legacy_res_PT, title = "PT-S3 Unadjusted Top 30 KEGG (REML, Log Normal, Offset)",xlimit = 4, xnudge = 0.03)+ theme(legend.position.inside = c(0.2, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_kegg_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)

##### REACTOME
b <- plot_fgsea_transpose(reactome_res_PT, title = "PT-S3 Unadjusted Top 30 REACTOME (REML, Log Normal, Offset)", xlimit = 5) + theme(legend.position.inside = c(0.15, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_reactome_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)
##### GO
c <- plot_fgsea_transpose(go_res_PT, title = "PT-S3 Unadjusted Top 30 GO (REML, Log Normal, Offset)", xlimit = 8)+ theme(legend.position.inside = c(0.1, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_go_pathways_unadjusted_reml_offset.jpeg"),
#        width = 13, height = 10, scale = 1)

combined_plot <- b + c + plot_layout(ncol = 1)
print(combined_plot)
ggsave(fs::path(dir.results,"PT_S3_top30_pathways_unadjusted_LC_T2D_No_Med.jpeg"),
       width = 15, height = 20, scale = 1)
```

```{r}
#PT-S3
so_celltype <- subset(so_filtered,KPMP_celltype=="PT-S3")
# Extract the gene expression data for all genes
gene_expression <- as.data.frame(GetAssayData(so_celltype, layer = "data"))

#Assign gene names as rownames, cell names as colnames
# rownames(gene_expression) <- rownames(so_celltype) #Gene Names
# colnames(gene_expression) <- colnames(so_celltype) #Cell Names
#Transpose gene expression dataset to merge with metadata
gene_expression <- t(gene_expression)
gene_expression <- data.frame(gene_expression) #Make a dataframe again after transposing
#Set gene list
gene_list <- colnames(gene_expression)
gene_expression$cellname <- rownames(gene_expression) 
rownames(gene_expression) <- NULL

# Extract the metadata
metadata <- so_celltype@meta.data
# metadata <- metadata %>%
#   mutate(across(everything(),~ifelse(.==".",NA,.)))
metadata$cellname <- rownames(metadata)
rownames(metadata) <- NULL

# Combine the gene expression data and metadata
data <- tidylog::full_join(metadata,gene_expression,by="cellname")
rm(metadata,gene_expression)

#Compare Health Controls to Type 2 Diabetes on no meds
data_subset <- data %>%
  filter(group=="Type_2_Diabetes" | group=="Lean_Control") %>%
  filter(medication=="no_med")

data_subset$group <- factor(data_subset$group)

#Log transform gene expression
data_subset <- data_subset %>% 
  mutate(across(all_of(gene_list),~log2(.+1)))

full_results <- data.frame()

# Total number of genes
total_genes <- length(gene_list)

# Calculate the batch size
batch_size <- round(total_genes / 5)

# Simulate a vector of genes (replace this with your actual gene data)
genes <- 1:total_genes

# Loop through the genes in batches
for (i in seq(1, total_genes, by = batch_size)) {
  
  # Get the current batch (subsetting the gene vector)
  batch <- genes[i:min(i + batch_size - 1, total_genes)]
  for (gene in gene_list[batch]) { #tester genes
    # m0 <- as.formula(paste0(gene," ~ group + (1 | kit_id)"))
    # model <- lmer(m0,data=data_subset)
    #Adjust for key covariates
    if (sum(data_subset[[gene]])>0) {
      m1 <- as.formula(paste0(gene," ~ group + age + sex + bmi + (1 | kit_id)"))
      model1 <- lmer(m1,data=data_subset)
      
      # # Plot residuals vs fitted values
      # residuals <- residuals(model1)
      # fitted_values <- fitted(model1)
      # 
      # plot(fitted_values, residuals)
      # abline(h = 0, col = "red")
      # 
      # # Histogram of residuals
      # hist(residuals, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")
      # 
      # # Q-Q plot for normality
      # qqnorm(residuals)
      # qqline(residuals, col = "red")
      
      # beta <- round(summary(model)$coef[2,1],3)
      # pval <-round(summary(model)$coef[2,5],5)
      beta1 <- round(summary(model1)$coef[2,1],3)
      pval1 <-round(summary(model1)$coef[2,5],5)
      
    } else {
      beta1 <- NA
      pval1 <-NA
    }
    result <- data.frame(Gene=gene,Beta=beta1,PValue=pval1) 
    full_results <- rbind(full_results,result)
  }
}
# #Make volcano plot of all gene results for group
full_results <- full_results %>%
  mutate(fdr=p.adjust(PValue,method="fdr"))
# # Identify significant points (PValue < 0.05)
# significant_df <- full_results[full_results$PValue < 0.05, ]
full_results$PValue10 <- -log10(pmax(full_results$PValue, 1e-10))  # Avoid log(0)

# write.csv(full_results,fs::path(dir.results,"PT_S3_T2D_HC_No_Med.csv"))
full_results <- read.csv(fs::path(dir.results,"PT_S3_T2D_HC_No_Med.csv"))

# }
# Add a column to determine color based on the sign of the beta
# Create a new color column based on beta sign and FDR threshold
full_results$color <- ifelse(full_results$fdr < 0.05 & full_results$Beta > 0, "red",
                             ifelse(full_results$fdr < 0.05 & full_results$Beta < 0, "blue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.05, ]
# full_results$color <- ifelse(full_results$PValue < 0.05 & full_results$Beta > 0, "red", 
#                              ifelse(full_results$PValue < 0.05 & full_results$Beta < 0, "blue", "gray"))
#
# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = Beta, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "PT-S3 Cells: Lean Controls vs. Type 2 Diabetes (No Medication)",
    subtitle = "Adjusted for Age, Sex, & BMI",
    x = "Log2FC",
    y = "-log10(P-Value)",
    color = "Beta Direction",
    caption = "Positive Beta = Upregulation in T2D vs. LC, Negative Beta = Downregulation in T2D vs. LC \n Signficance threshold: FDR < 0.2"
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )+
  ylim(0, 40) +
  # # Add labels for significant points
  # geom_text(data = significant_df, aes(label = gene), 
  #           vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
  # Add labels for significant points with ggrepel
  # geom_text_repel(data = significant_df, aes(label = Gene),
  #                 size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)
  # Add labels for significant points with ggrepel
  geom_text_repel(data = significant_df, aes(label = Gene),
                  size = 3, color = "black", box.padding = 0.5, 
                  max.overlaps = 20, min.segment.length = 0) 

pdf(fs::path(dir.results,"Plot2_PT_S3_T2D_HC_No_Med.pdf"),width=10,height=7)
print(volcano_plot)
dev.off()
```
#### iv. aPT
####NEBULA & GSEA
```{r}
#Filter to PT Cells
so_celltype <- subset(so_kpmp_sc,KPMP_celltype=="aPT")
so_celltype <- subset(so_celltype,Medication=="No Medication")
DefaultAssay(so_celltype) <- "RNA" 

nrow(so_celltype) #9416 genes
ncol(so_celltype) #10136 PT cells

## Select Highly Variable Genes (paths)
so_celltype <- FindVariableFeatures(so_celltype, selection.method = "vst", nfeatures = 2000)
hvg <- VariableFeatures(so_celltype)

# Subset Seurat object to only paths
so_celltype_hvg <- subset(so_celltype, features = hvg)
DefaultAssay(so_celltype_hvg) <- "RNA"

# #Select TCA and Ox Phos Genes
# # pathway_genes <- c(tca,ox_phos)
# so_celltype_path <- subset(so_celltype, features = tca)
# DefaultAssay(so_celltype_path) <- "RNA"

#Make sure exposure/independent/x variable or group variable is a factor variable
so_celltype_hvg$group <- factor(so_celltype_hvg$group)
#Make sure to set reference level
so_celltype_hvg$group  <- relevel(so_celltype_hvg$group ,ref="Lean_Control")

counts_path <- round(GetAssayData(so_celltype_hvg, layer = "counts")) # load counts and round

# With parallelization
# List of genes
genes_list <- hvg

cl <- makeCluster(10)
registerDoParallel(cl)

start_time <- Sys.time()

nebula_results_list <- foreach(g = genes_list, .packages = c("nebula", "Matrix")) %dopar% {
  tryCatch({
    count_gene <- counts_path[g, , drop = FALSE]
    meta_gene <- so_celltype@meta.data
    pred_gene <- model.matrix(~group, data = meta_gene)
    # library <- meta_gene$library_size
    library <- meta_gene$pooled_offset
    data_g_gene <- group_cell(count = count_gene, id = meta_gene$kit_id, pred = pred_gene,offset=library)
    
    if (is.null(data_g_gene)) {
      data_g_gene <- list(count = count_gene, id = meta_gene$kit_id, pred = pred_gene, offset = library)
    }
    
    #With offset
    result <- nebula(count = data_g_gene$count, id = data_g_gene$id, pred = data_g_gene$pred, ncore = 1, reml=T,model="NBLMM",output_re = T,covariance=T,offset=data_g_gene$library)
    
    list(gene = g, result = result)  # return both gene name and result
    
  }, error = function(e) {
    NULL
  })
}

stopCluster(cl)
end_time <- Sys.time()
print(end_time - start_time)

# set the names of results based on gene names
nebula_results_list <- Filter(Negate(is.null), nebula_results_list)  # remove NULLs first
names(nebula_results_list) <- sapply(nebula_results_list, function(x) x$gene)  # set names
nebula_results_list <- lapply(nebula_results_list, function(x) x$result)  # clean list back to just results

PT_nebula_converged <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    converged <- nebula_results_list[[gene_name]]$convergence
    df <- data.frame(Gene = gene_name,
                     Convergence_Code = converged)
    return(df)
  }
)

nebula_summaries <- map_dfr(
  names(nebula_results_list),
  function(gene_name) {
    df <- nebula_results_list[[gene_name]]$summary
    df <- df %>% mutate(Gene = gene_name)
    return(df)
  }
)
nonconverge_genes <- unique(PT_nebula_converged$Gene[which(PT_nebula_converged$Convergence_Code==-40)]) 

#Make dataframe of final results
full_results <- as.data.frame(nebula_summaries)
#Calculate number of genes filtered out for low expression 
low_exp <- length(genes_list)-length(full_results$gene)
#Filter out non-converging genes
full_results <- full_results %>% 
  filter(!gene %in%  nonconverge_genes)
#Calculate nonconvergence rate
nebula_nonconverged_percent <- paste0(round((1-(length(genes_list)-length(nonconverge_genes))/length(genes_list))*100,3),"%")
# nebula_nonconverged_percent <- (length(rownames(counts_path))-length(unique(full_results$gene)))/length(rownames(counts_path))
# print(paste0(nebula_nonconverged_percent*100, "% failed to converge"))
full_results <- full_results %>%
  mutate(fdr=p.adjust(`p_groupType_2_Diabetes`,method="fdr"))  
# mutate(fdr3=p.adjust(PValue3,method="fdr"))
full_results$PValue10 <- -log10(pmax(full_results$`p_groupType_2_Diabetes`, 1e-10))  # Avoid log(0)

write.csv(full_results,fs::path(dir.results,"DECODE_NEBULA_aPT_cells_T2D_HC_No_Med_unadjusted_pooled_offset.csv"))

full_results$color <- ifelse(full_results$fdr < 0.05 & full_results$`logFC_groupType_2_Diabetes` > 0, "lightcoral",
                             ifelse(full_results$fdr < 0.05 & full_results$`logFC_groupType_2_Diabetes` < 0, "lightblue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.05, ]

Genes <- length(unique(full_results$gene))
Nuclei <- ncol(so_celltype)
Nonconvergence_Rate <- nebula_nonconverged_percent
# full_results$color3 <- ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 > 0, "lightcoral",
#                               ifelse(full_results$fdr3 < 0.2 & full_results$`logFC_GLP1_exclusiveNo GLP-1`3 < 0, "lightblue", "gray"))
# 
# # Identify significant points (fdr < 0.05)
# significant_df3 <- full_results[full_results$fdr3 < 0.2, ]

max <- max(full_results$`logFC_groupType_2_Diabetes`)
# max <- 3.1
min <- min(full_results$`logFC_groupType_2_Diabetes`)

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = `logFC_groupType_2_Diabetes`, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "Differentially Expressed 2000 HVG in aPT Cells",
    subtitle = "T2D vs. LC (No Medication), Unadjusted (Pooled Offset)",
    x = "FC",
    y = "-log10(P-Value)",
    color = "FC Direction Direction",
    caption = paste0("FDR < 0.05, Genes = ",Genes,", Nuclei = ",Nuclei,", Non-Convergence Rate: ",Nonconvergence_Rate,", Genes Filtered out for Low Expression: ",low_exp)
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 0, hjust = 1)
  )+
  # xlim(min,max)+
  # xlim(-5,5)+
  # # Add labels for significant points
  geom_text(data = significant_df, aes(label = gene),
            vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
# Add labels for significant points with ggrepel
# geom_text_repel(data = significant_df, aes(label = Gene),
#                 size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)
# dot_plot <- ggplot(full_results, aes(
#   y = reorder(gene, logFC_groupType_2_Diabetes),
#   x = logFC_groupType_2_Diabetes,
#   color = color,
#   size = abs(logFC_groupType_2_Diabetes)
# )) +
#   geom_point(alpha = 0.7) +
#   scale_color_identity() +
#   scale_size(range = c(2, 6), name = "|LogFC|") +
#   geom_vline(xintercept = 0, linetype = "dashed", color = "black") +
#   theme_minimal() +  # Retains grid lines
#   labs(
#     title = "Differentially Expressed 2000 HVG in PT Cells",
#     subtitle = "T2D vs. LC (No Medication), Unadjusted (Pooled Offset)",
#     x = "Log Fold Change",
#     y = "Gene",
#     caption = paste0(
#       "FDR < 0.05, Genes = ", Genes,
#       ", Nuclei = ", Nuclei,
#       ", Non-Convergence Rate: ", Nonconvergence_Rate,
#       ", Genes Filtered out for Low Expression: ", low_exp
#     )
#   ) +
#   theme(
#     plot.title = element_text(hjust = 0),
#     axis.text.y = element_text(size = 8),
#     # axis.text.x = element_text(angle = 0, hjust = 1),
#     axis.line = element_line(color = "black", size = 0.5),
#     axis.ticks.x = element_line(color = "black"),
#     panel.border = element_blank(),
#     panel.background = element_blank()
#   )
# dot_plot
volcano_plot
png(fs::path(dir.results, "Plot_DECODE_NEBULA_aPT_T2D_LC_No_Med_unadjusted_pooled_offset_T2D.png"), 
    width = 2000, height = 1500, res = 300)
print(volcano_plot)
dev.off()
```

#### GSEA
```{r}
full_results <- read.csv(fs::path(dir.results,"DECODE_NEBULA_aPT_cells_T2D_HC_No_Med_unadjusted_pooled_offset.csv")) %>%
  clean_names() %>% 
  dplyr::select(-x) %>% 
  dplyr::rename(Gene=gene,LogFC=log_fc_group_type_2_diabetes)

# Filter out the gmt files for KEGG, Reactome and GOBP
list.files(bg_path)
gmt_files <- list.files(path = bg_path, pattern = '.gmt', full.names = TRUE)
gmt_files
kegg_legacy <- prepare_gmt(gmt_files[1], unique(full_results$Gene), savefile = FALSE)
reactome <- prepare_gmt(gmt_files[3], unique(full_results$Gene), savefile = FALSE)
go <- prepare_gmt(gmt_files[4], unique(full_results$Gene), savefile = FALSE)

# rank genes by t-stats in DiD
rankings_PT <- full_results$LogFC
names(rankings_PT) <- full_results$Gene
rankings_PT <- sort(rankings_PT, decreasing = TRUE)
plot(rankings_PT)
min(rankings_PT)
max(rankings_PT)


set.seed(1234)

kegg_legacy_res_PT <- fgsea(pathways = kegg_legacy,
                            stats = rankings_PT,
                            scoreType = 'std', 
                            minSize = 3,
                            maxSize = 500,
                            nproc = 1)

reactome_res_PT <- fgsea(pathways = reactome,
                         stats = rankings_PT,
                         scoreType = 'std', 
                         minSize = 3,
                         maxSize = 500,
                         nproc = 1)
go_res_PT <- fgsea(pathways = go,
                   stats = rankings_PT,
                   scoreType = 'std', 
                   minSize = 5,
                   maxSize = 500,
                   nproc = 1)

PT_fgsea <- data.frame("KEGG Legacy"=c(sum(kegg_legacy_res_PT[, padj < 0.05]), sum(kegg_legacy_res_PT[, pval < 0.05])),
                       "REACTOME"=c(sum(reactome_res_PT[, padj < 0.05]), sum(reactome_res_PT[, pval < 0.05])),
                       "GO"=c(sum(go_res_PT[, padj < 0.05]), sum(go_res_PT[, pval < 0.05])))
rownames(PT_fgsea) <- c("adj.pval", "p.val")

##### KEGG Legacy
a <- plot_fgsea_transpose(kegg_legacy_res_PT, title = "aPT Unadjusted Top 30 KEGG (REML, Log Normal, Offset)",xlimit = 4, xnudge = 0.03)+ theme(legend.position.inside = c(0.2, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_kegg_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)

##### REACTOME
b <- plot_fgsea_transpose(reactome_res_PT, title = "aPT Unadjusted Top 30 REACTOME (REML, Log Normal, Offset)", xlimit = 5) + theme(legend.position.inside = c(0.15, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_reactome_pathways_unadjusted.jpeg"),
#        width = 13, height = 10, scale = 1)
##### GO
c <- plot_fgsea_transpose(go_res_PT, title = "aPT Unadjusted Top 30 GO (REML, Log Normal, Offset)", xlimit = 8)+ theme(legend.position.inside = c(0.1, 0.5))

# ggsave(fs::path(dir.results,"PT_top30_go_pathways_unadjusted_reml_offset.jpeg"),
#        width = 13, height = 10, scale = 1)

combined_plot <- b + c + plot_layout(ncol = 1)
print(combined_plot)
ggsave(fs::path(dir.results,"aPT_top30_pathways_unadjusted_LC_T2D_No_Med.jpeg"),
       width = 15, height = 20, scale = 1)
```

```{r}
#aPT
so_celltype <- subset(so_filtered,KPMP_celltype=="aPT")
# Extract the gene expression data for all genes
gene_expression <- as.data.frame(GetAssayData(so_celltype, layer = "data"))

#Assign gene names as rownames, cell names as colnames
# rownames(gene_expression) <- rownames(so_celltype) #Gene Names
# colnames(gene_expression) <- colnames(so_celltype) #Cell Names
#Transpose gene expression dataset to merge with metadata
gene_expression <- t(gene_expression)
gene_expression <- data.frame(gene_expression) #Make a dataframe again after transposing
#Set gene list
gene_list <- colnames(gene_expression)
gene_expression$cellname <- rownames(gene_expression) 
rownames(gene_expression) <- NULL

# Extract the metadata
metadata <- so_celltype@meta.data
# metadata <- metadata %>%
#   mutate(across(everything(),~ifelse(.==".",NA,.)))
metadata$cellname <- rownames(metadata)
rownames(metadata) <- NULL

# Combine the gene expression data and metadata
data <- tidylog::full_join(metadata,gene_expression,by="cellname")
rm(metadata,gene_expression)

#Compare Health Controls to Type 2 Diabetes on no meds
data_subset <- data %>%
  filter(group=="Type_2_Diabetes" | group=="Lean_Control") %>%
  filter(medication=="no_med")

data_subset$group <- factor(data_subset$group)

#Log transform gene expression
data_subset <- data_subset %>% 
  mutate(across(all_of(gene_list),~log2(.+1)))

full_results <- data.frame()

# Total number of genes
total_genes <- length(gene_list)

# Calculate the batch size
batch_size <- round(total_genes / 5)

# Simulate a vector of genes (replace this with your actual gene data)
genes <- 1:total_genes

# Loop through the genes in batches
for (i in seq(1, total_genes, by = batch_size)) {
  
  # Get the current batch (subsetting the gene vector)
  batch <- genes[i:min(i + batch_size - 1, total_genes)]
  for (gene in gene_list[batch]) { #tester genes
    # m0 <- as.formula(paste0(gene," ~ group + (1 | kit_id)"))
    # model <- lmer(m0,data=data_subset)
    #Adjust for key covariates
    m1 <- as.formula(paste0(gene," ~ group + age + sex + bmi + (1 | kit_id)"))
    model1 <- lmer(m1,data=data_subset)
    
    # # Plot residuals vs fitted values
    # residuals <- residuals(model1)
    # fitted_values <- fitted(model1)
    # 
    # plot(fitted_values, residuals)
    # abline(h = 0, col = "red")
    # 
    # # Histogram of residuals
    # hist(residuals, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")
    # 
    # # Q-Q plot for normality
    # qqnorm(residuals)
    # qqline(residuals, col = "red")
    
    # beta <- round(summary(model)$coef[2,1],3)
    # pval <-round(summary(model)$coef[2,5],5)
    beta1 <- round(summary(model1)$coef[2,1],3)
    pval1 <-round(summary(model1)$coef[2,5],5)
    
    result <- data.frame(Gene=gene,Beta=beta1,PValue=pval1)
    full_results <- rbind(full_results,result)
  }
}
# #Make volcano plot of all gene results for group
full_results <- full_results %>%
  mutate(fdr=p.adjust(PValue,method="fdr"))

write.csv(full_results,fs::path(dir.results,"aPT_T2D_HC_No_Med.csv"))

# }
# Add a column to determine color based on the sign of the beta
# Create a new color column based on beta sign and FDR threshold
full_results$color <- ifelse(full_results$fdr < 0.3 & full_results$Beta > 0, "salmon",
                             ifelse(full_results$fdr < 0.3 & full_results$Beta < 0, "lightblue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.3, ]
# full_results$color <- ifelse(full_results$PValue < 0.05 & full_results$Beta > 0, "red", 
#                              ifelse(full_results$PValue < 0.05 & full_results$Beta < 0, "blue", "gray"))
# 
# # Identify significant points (PValue < 0.05)
# significant_df <- full_results[full_results$PValue < 0.05, ]

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = Beta, y = -log10(PValue), color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "aPT Cells: Lean Controls vs. Type 2 Diabetes (No Medication)",
    subtitle = "Adjusted for Age, Sex, & BMI",
    x = "Log2FC",
    y = "-log10(P-Value)",
    color = "Beta Direction",
    caption = "Positive Beta = Upregulation in T2D vs. LC, Negative Beta = Downregulation in T2D vs. LC \n Signficance threshold: FDR < 0.3"
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )+
  # # Add labels for significant points
  # geom_text(data = significant_df, aes(label = gene), 
  #           vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
  # Add labels for significant points with ggrepel
  geom_text_repel(data = significant_df, aes(label = Gene),
                  size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)

pdf(fs::path(dir.results,"Plot_aPT_T2D_HC_No_Med.pdf"),width=10,height=7)
print(volcano_plot)
dev.off()
```








### i. Pseudobulk PT Cells
```{r}
#PT Cells
so_filtered$celltype_new <- ifelse(grepl("PT",so_filtered$KPMP_celltype),"PT",
                                   ifelse(grepl("TAL",so_filtered$KPMP_celltype),"TAL",
                                          ifelse(grepl("POD",so_filtered$KPMP_celltype),"POD",
                                                 ifelse(grepl("EC",so_filtered$KPMP_celltype),"EC",NA))))
#PT
so_celltype <- subset(so_filtered,celltype_new=="PT")
ncol(so_celltype) #41383 cells
nrow(so_celltype) #9289 genes

# Extract the gene expression data for all genes
gene_expression <- as.data.frame(GetAssayData(so_celltype, layer = "data"))

#Assign gene names as rownames, cell names as colnames
# rownames(gene_expression) <- rownames(so_celltype) #Gene Names
# colnames(gene_expression) <- colnames(so_celltype) #Cell Names
#Transpose gene expression dataset to merge with metadata
gene_expression <- t(gene_expression)
gene_expression <- data.frame(gene_expression) #Make a dataframe again after transposing
#Set gene list
gene_list <- colnames(gene_expression)
gene_expression$cellname <- rownames(gene_expression) 
rownames(gene_expression) <- NULL

# Extract the metadata
metadata <- so_celltype@meta.data
# metadata <- metadata %>%
#   mutate(across(everything(),~ifelse(.==".",NA,.)))
metadata$cellname <- rownames(metadata)
rownames(metadata) <- NULL

# Combine the gene expression data and metadata
data <- tidylog::full_join(metadata,gene_expression,by="cellname")
rm(metadata,gene_expression)

#Compare Health Controls to Type 2 Diabetes on no meds
data_subset <- data %>%
  filter(group=="Type_2_Diabetes") 
# filter(medication=="no_med")

data_subset$medication <- factor(data_subset$medication)

#Log transform gene expression
data_subset <- data_subset %>% 
  mutate(across(all_of(gene_list),~log2(.+1)))

# Number of cores to use for parallel processing
num_cores <- detectCores() - 1  # Use one less than the total number of cores

# Total number of genes
total_genes <- length(gene_list)

# Calculate the batch size
batch_size <- round(total_genes / 5)

# Create a function that will handle the analysis for each gene
process_gene <- function(gene) {
  
  # Check if gene exists in data (skipping if not present in data)
  if (sum(data_subset[[gene]]) > 0) {
    
    # Fit the model with key covariates
    m1 <- as.formula(paste0(gene, " ~ medication + age + sex + bmi + (1 | kit_id)"))
    model1 <- lmer(m1, data = data_subset)
    
    # Compute estimated marginal means
    emm <- emmeans(model1, ~ medication, lmerTest.limit = 19037, pbkrtest.limit = 19037)
    
    # Define and test the contrasts
    contrast_results <- contrast(emm, list(
      "GLP1 vs No Med" = c(0, 1, 0, -1),  # GLP1 vs No Med
      "SGT2 vs No Med" = c(0, 0, 1, -1),  # SGT2 vs No Med
      "GLP1+SGT2 vs No Med" = c(0, 0, 0, 1),  # GLP1+SGT2 vs No Med
      "GLP1+SGT2 vs GLP1" = c(0, -1, 1, 0),  # GLP1+SGT2 vs GLP1
      "GLP1+SGT2 vs SGT2" = c(0, 0, -1, 1)  # GLP1+SGT2 vs SGT2
    ))
    
    contrast_p <- as.data.frame(summary(contrast_results))
    contrast_summary <- confint(contrast_results)
    contrast_df <- as.data.frame(contrast_summary)
    contrast_df$PValue <- contrast_p$p.value
    contrast_df$Gene <- gene
    
    # Estimate the overall beta and confidence intervals
    beta1 <- round(summary(model1)$coef[2, 1], 3)
    pval1 <- round(summary(model1)$coef[2, 5], 5)
    se <- round(summary(model1)$coef[2, 2], 5)
    df <- round(summary(model1)$coef[2, 3], 5)
    lowerci <- round(summary(model1)$coef[2, 1] - 1.96 * se, 5)
    upperci <- round(summary(model1)$coef[2, 1] + 1.96 * se, 5)
    
    result <- data.frame(contrast = "Overall", estimate = beta1, SE = se, df = df,
                         lower.CL = lowerci, upper.CL = upperci, PValue = pval1, Gene = gene)
    result2 <- rbind(result, contrast_df)
    
    return(result2)  # Return the processed result
  } else {
    return(NULL)  # If the gene is not present, return NULL
  }
}

# Now use mclapply to run the analysis in parallel for all genes
gene_results <- mclapply(gene_list, process_gene, mc.cores = num_cores)

# Filter out any NULL results and combine all data into a single data frame
full_results <- do.call(rbind, gene_results)
# full_results <- na.omit(full_results)  # Remove any NULL or incomplete results
view(full_results)

# full_results <- data.frame()
# 
# # Total number of genes
# total_genes <- length(gene_list)
# 
# # Calculate the batch size
# batch_size <- round(total_genes / 5)
# 
# # Simulate a vector of genes (replace this with your actual gene data)
# genes <- 1:total_genes
# 
# # Loop through the genes in batches
# for (i in seq(1, total_genes, by = batch_size)) {
#   
#   # Get the current batch (subsetting the gene vector)
#   batch <- genes[i:min(i + batch_size - 1, total_genes)]
#   for (gene in gene_list[batch]) { #tester genes
#     # m0 <- as.formula(paste0(gene," ~ group + (1 | kit_id)"))
#     # model <- lmer(m0,data=data_subset)
#     #Adjust for key covariates
#     m1 <- as.formula(paste0(gene," ~ medication + age + sex + bmi + (1 | kit_id)"))
#     model1 <- lmer(m1,data=data_subset)
#     
#     # Compute estimated marginal means
#     # emm <- emmeans(model1, ~ medication, pbkrtest.limit = 19037)
#     emm <- emmeans(model1, ~ medication, lmerTest.limit = 19037, pbkrtest.limit = 19037)
#     
#     # Define and test the contrasts
#     contrast_results  <- contrast(emm, list(
#       "GLP1 vs No Med" = c(0, 1, 0, -1),  # GLP1 vs No Med
#       "SGT2 vs No Med" = c(0, 0, 1, -1),  # SGT2 vs No Med
#       "GLP1+SGT2 vs No Med" = c(0, 0, 0, 1),  # GLP1+SGT2 vs No Med
#       "GLP1+SGT2 vs GLP1" = c(0, -1, 1, 0),  # GLP1+SGT2 vs GLP1
#       "GLP1+SGT2 vs SGT2" = c(0, 0, -1, 1)  # GLP1+SGT2 vs SGT2
#     ))
#     
#     contrast_p <-  as.data.frame(summary(contrast_results))
#     contrast_summary <- confint(contrast_results)
#     contrast_df <- as.data.frame(contrast_summary)
#     contrast_df$PValue <- contrast_p$p.value
#     contrast_df$Gene <- gene
#     
#     # # Plot the pairwise comparisons with ggplot
#     # ggplot(contrast_df, aes(x = contrast, y = estimate, ymin = lower.CL, ymax = upper.CL)) +
#     #   geom_pointrange(color = "blue", size = 1.5) +  # Points with confidence intervals
#     #   geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Line at 0 (no difference)
#     #   theme_minimal() +  # Minimal theme
#     #   labs(
#     #     title = "Pairwise Comparisons of Medication Groups",
#     #     x = "Contrast",
#     #     y = "Estimated Difference (Log2FC)",
#     #     caption = "Red dashed line represents no difference (Estimate = 0)"
#     #   ) +
#     #   theme(
#     #     axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
#     #     plot.title = element_text(hjust = 0.5)  # Center title
#     #   )
#     
#     
#     # beta <- round(summary(model)$coef[2,1],3)
#     # pval <-round(summary(model)$coef[2,5],5)
#     beta1 <- round(summary(model1)$coef[2,1],3)
#     pval1 <-round(summary(model1)$coef[2,5],5)
#     se <- round(summary(model1)$coef[2,2],5)
#     df <- round(summary(model1)$coef[2,3],5)
#     lowerci <- round(summary(model1)$coef[2,1] - 1.96*se,5)
#     upperci <- round(summary(model1)$coef[2,1] + 1.96*se,5)
#     result <- data.frame(contrast="Overall", estimate=beta1, SE=se,df=df,lower.CL=lowerci, upper.CL=upperci, PValue=pval1,Gene=gene  )
#     result2 <- rbind(result,contrast_df)
#     full_results <- rbind(full_results,result2)
#   }
# }
# # #Make volcano plot of all gene results for group
full_results <- full_results %>%
  mutate(fdr=p.adjust(PValue,method="fdr"))
full_results$PValue10 <- -log10(pmax(full_results$PValue, 1e-10))  # Avoid log(0)


# write.csv(full_results,fs::path(dir.results,"PT_S1_S2_T2D_HC_No_Med.csv"))
full_results <- read.csv(fs::path(dir.results,"PT_S1_S2_T2D_HC_No_Med.csv"))

# }
# Add a column to determine color based on the sign of the beta
# Create a new color column based on beta sign and FDR threshold
full_results$color <- ifelse(full_results$fdr < 0.2 & full_results$Beta > 0, "lightcoral",
                             ifelse(full_results$fdr < 0.2 & full_results$Beta < 0, "lightblue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.2, ]
# full_results$color <- ifelse(full_results$PValue < 0.05 & full_results$Beta > 0, "red", 
#                              ifelse(full_results$PValue < 0.05 & full_results$Beta < 0, "blue", "gray"))
# 
# # Identify significant points (PValue < 0.05)
# significant_df <- full_results[full_results$PValue < 0.05, ]

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = Beta, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "PT-S1/S2 Cells: Lean Controls vs. Type 2 Diabetes (No Medication)",
    subtitle = "Adjusted for Age, Sex, & BMI",
    x = "Log2FC",
    y = "-log10(P-Value)",
    color = "Beta Direction",
    caption = "Positive Beta = Upregulation in T2D vs. LC, Negative Beta = Downregulation in T2D vs. LC \n Signficance threshold: FDR < 0.2"
  ) +
  # Add a horizontal line at -log10(0.05) ≈ 1.3 (FDR threshold)
  # geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red", linewidth = 1) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )+
  # # Add labels for significant points
  # geom_text(data = significant_df, aes(label = gene), 
  #           vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
  # Add labels for significant points with ggrepel
  geom_text_repel(data = significant_df, aes(label = Gene),
                  size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)

pdf(fs::path(dir.results,"Plot_PT_S1_S2_T2D_HC_No_Med.pdf"),width=10,height=7)
print(volcano_plot)
dev.off()
```
#### ii. PT-S1/2
```{r}
#PT-S1/2
so_celltype <- subset(so_filtered,KPMP_celltype=="PT-S1/S2")
# Extract the gene expression data for all genes
gene_expression <- as.data.frame(GetAssayData(so_celltype, layer = "data"))

#Assign gene names as rownames, cell names as colnames
# rownames(gene_expression) <- rownames(so_celltype) #Gene Names
# colnames(gene_expression) <- colnames(so_celltype) #Cell Names
#Transpose gene expression dataset to merge with metadata
gene_expression <- t(gene_expression)
gene_expression <- data.frame(gene_expression) #Make a dataframe again after transposing
#Set gene list
gene_list <- colnames(gene_expression)
gene_expression$cellname <- rownames(gene_expression) 
rownames(gene_expression) <- NULL

# Extract the metadata
metadata <- so_celltype@meta.data
# metadata <- metadata %>%
#   mutate(across(everything(),~ifelse(.==".",NA,.)))
metadata$cellname <- rownames(metadata)
rownames(metadata) <- NULL

# Combine the gene expression data and metadata
data <- tidylog::full_join(metadata,gene_expression,by="cellname")
rm(metadata,gene_expression)

#Compare Health Controls to Type 2 Diabetes on no meds
data_subset <- data %>%
  filter(group=="Type_2_Diabetes") 
# filter(medication=="no_med")

data_subset$group <- factor(data_subset$group)

#Log transform gene expression
data_subset <- data_subset %>% 
  mutate(across(all_of(gene_list),~log2(.+1)))

full_results <- data.frame()

# Total number of genes
total_genes <- length(gene_list)

# Calculate the batch size
batch_size <- round(total_genes / 5)

# Simulate a vector of genes (replace this with your actual gene data)
genes <- 1:total_genes

# Loop through the genes in batches
for (i in seq(1, total_genes, by = batch_size)) {
  
  # Get the current batch (subsetting the gene vector)
  batch <- genes[i:min(i + batch_size - 1, total_genes)]
  for (gene in gene_list[batch]) { #tester genes
    # m0 <- as.formula(paste0(gene," ~ group + (1 | kit_id)"))
    # model <- lmer(m0,data=data_subset)
    #Adjust for key covariates
    m1 <- as.formula(paste0(gene," ~ medication + age + sex + bmi + (1 | kit_id)"))
    model1 <- lmer(m1,data=data_subset)
    
    # Compute estimated marginal means
    emm <- emmeans(model1, ~ medication)
    
    # Define and test the contrasts
    contrast(emm, list(
      "GLP1 vs No Med" = c(0, 1, 0, -1),  # GLP1 vs No Med
      "SGT2 vs No Med" = c(0, 0, 1, -1),  # SGT2 vs No Med
      "GLP1+SGT2 vs No Med" = c(0, 0, 0, 1),  # GLP1+SGT2 vs No Med
      "GLP1+SGT2 vs GLP1" = c(0, -1, 1, 0),  # GLP1+SGT2 vs GLP1
      "GLP1+SGT2 vs SGT2" = c(0, 0, -1, 1)  # GLP1+SGT2 vs SGT2
    ))
    
    
    # beta <- round(summary(model)$coef[2,1],3)
    # pval <-round(summary(model)$coef[2,5],5)
    beta1 <- round(summary(model1)$coef[2,1],3)
    pval1 <-round(summary(model1)$coef[2,5],5)
    
    result <- data.frame(Gene=gene,Beta=beta1,PValue=pval1)
    full_results <- rbind(full_results,result)
  }
}
# #Make volcano plot of all gene results for group
full_results <- full_results %>%
  mutate(fdr=p.adjust(PValue,method="fdr"))
full_results$PValue10 <- -log10(pmax(full_results$PValue, 1e-10))  # Avoid log(0)


# write.csv(full_results,fs::path(dir.results,"PT_S1_S2_T2D_HC_No_Med.csv"))
full_results <- read.csv(fs::path(dir.results,"PT_S1_S2_T2D_HC_No_Med.csv"))

# }
# Add a column to determine color based on the sign of the beta
# Create a new color column based on beta sign and FDR threshold
full_results$color <- ifelse(full_results$fdr < 0.2 & full_results$Beta > 0, "lightcoral",
                             ifelse(full_results$fdr < 0.2 & full_results$Beta < 0, "lightblue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.2, ]
# full_results$color <- ifelse(full_results$PValue < 0.05 & full_results$Beta > 0, "red", 
#                              ifelse(full_results$PValue < 0.05 & full_results$Beta < 0, "blue", "gray"))
# 
# # Identify significant points (PValue < 0.05)
# significant_df <- full_results[full_results$PValue < 0.05, ]

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = Beta, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "PT-S1/S2 Cells: Lean Controls vs. Type 2 Diabetes (No Medication)",
    subtitle = "Adjusted for Age, Sex, & BMI",
    x = "Log2FC",
    y = "-log10(P-Value)",
    color = "Beta Direction",
    caption = "Positive Beta = Upregulation in T2D vs. LC, Negative Beta = Downregulation in T2D vs. LC \n Signficance threshold: FDR < 0.2"
  ) +
  # Add a horizontal line at -log10(0.05) ≈ 1.3 (FDR threshold)
  # geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red", linewidth = 1) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )+
  # # Add labels for significant points
  # geom_text(data = significant_df, aes(label = gene), 
  #           vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
  # Add labels for significant points with ggrepel
  geom_text_repel(data = significant_df, aes(label = Gene),
                  size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)

pdf(fs::path(dir.results,"Plot_PT_S1_S2_T2D_HC_No_Med.pdf"),width=10,height=7)
print(volcano_plot)
dev.off()
```
#### iii. PT-S3
```{r}
#PT-S3
so_celltype <- subset(so_filtered,KPMP_celltype=="PT-S3")
# Extract the gene expression data for all genes
gene_expression <- as.data.frame(GetAssayData(so_celltype, layer = "data"))

#Assign gene names as rownames, cell names as colnames
# rownames(gene_expression) <- rownames(so_celltype) #Gene Names
# colnames(gene_expression) <- colnames(so_celltype) #Cell Names
#Transpose gene expression dataset to merge with metadata
gene_expression <- t(gene_expression)
gene_expression <- data.frame(gene_expression) #Make a dataframe again after transposing
#Set gene list
gene_list <- colnames(gene_expression)
gene_expression$cellname <- rownames(gene_expression) 
rownames(gene_expression) <- NULL

# Extract the metadata
metadata <- so_celltype@meta.data
# metadata <- metadata %>%
#   mutate(across(everything(),~ifelse(.==".",NA,.)))
metadata$cellname <- rownames(metadata)
rownames(metadata) <- NULL

# Combine the gene expression data and metadata
data <- tidylog::full_join(metadata,gene_expression,by="cellname")
rm(metadata,gene_expression)

#Compare Health Controls to Type 2 Diabetes on no meds
data_subset <- data %>%
  filter(group=="Type_2_Diabetes" | group=="Lean_Control") %>%
  filter(medication=="no_med")

data_subset$group <- factor(data_subset$group)

#Log transform gene expression
data_subset <- data_subset %>% 
  mutate(across(all_of(gene_list),~log2(.+1)))

full_results <- data.frame()

# Total number of genes
total_genes <- length(gene_list)

# Calculate the batch size
batch_size <- round(total_genes / 5)

# Simulate a vector of genes (replace this with your actual gene data)
genes <- 1:total_genes

# Loop through the genes in batches
for (i in seq(1, total_genes, by = batch_size)) {
  
  # Get the current batch (subsetting the gene vector)
  batch <- genes[i:min(i + batch_size - 1, total_genes)]
  for (gene in gene_list[batch]) { #tester genes
    # m0 <- as.formula(paste0(gene," ~ group + (1 | kit_id)"))
    # model <- lmer(m0,data=data_subset)
    #Adjust for key covariates
    if (sum(data_subset[[gene]])>0) {
      m1 <- as.formula(paste0(gene," ~ group + age + sex + bmi + (1 | kit_id)"))
      model1 <- lmer(m1,data=data_subset)
      
      # # Plot residuals vs fitted values
      # residuals <- residuals(model1)
      # fitted_values <- fitted(model1)
      # 
      # plot(fitted_values, residuals)
      # abline(h = 0, col = "red")
      # 
      # # Histogram of residuals
      # hist(residuals, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")
      # 
      # # Q-Q plot for normality
      # qqnorm(residuals)
      # qqline(residuals, col = "red")
      
      # beta <- round(summary(model)$coef[2,1],3)
      # pval <-round(summary(model)$coef[2,5],5)
      beta1 <- round(summary(model1)$coef[2,1],3)
      pval1 <-round(summary(model1)$coef[2,5],5)
      
    } else {
      beta1 <- NA
      pval1 <-NA
    }
    result <- data.frame(Gene=gene,Beta=beta1,PValue=pval1) 
    full_results <- rbind(full_results,result)
  }
}
# #Make volcano plot of all gene results for group
full_results <- full_results %>%
  mutate(fdr=p.adjust(PValue,method="fdr"))
# # Identify significant points (PValue < 0.05)
# significant_df <- full_results[full_results$PValue < 0.05, ]
full_results$PValue10 <- -log10(pmax(full_results$PValue, 1e-10))  # Avoid log(0)

# write.csv(full_results,fs::path(dir.results,"PT_S3_T2D_HC_No_Med.csv"))
full_results <- read.csv(fs::path(dir.results,"PT_S3_T2D_HC_No_Med.csv"))

# }
# Add a column to determine color based on the sign of the beta
# Create a new color column based on beta sign and FDR threshold
full_results$color <- ifelse(full_results$fdr < 0.05 & full_results$Beta > 0, "red",
                             ifelse(full_results$fdr < 0.05 & full_results$Beta < 0, "blue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.05, ]
# full_results$color <- ifelse(full_results$PValue < 0.05 & full_results$Beta > 0, "red", 
#                              ifelse(full_results$PValue < 0.05 & full_results$Beta < 0, "blue", "gray"))
#
# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = Beta, y = PValue10, color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "PT-S3 Cells: Lean Controls vs. Type 2 Diabetes (No Medication)",
    subtitle = "Adjusted for Age, Sex, & BMI",
    x = "Log2FC",
    y = "-log10(P-Value)",
    color = "Beta Direction",
    caption = "Positive Beta = Upregulation in T2D vs. LC, Negative Beta = Downregulation in T2D vs. LC \n Signficance threshold: FDR < 0.2"
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )+
  ylim(0, 40) +
  # # Add labels for significant points
  # geom_text(data = significant_df, aes(label = gene), 
  #           vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
  # Add labels for significant points with ggrepel
  # geom_text_repel(data = significant_df, aes(label = Gene),
  #                 size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)
  # Add labels for significant points with ggrepel
  geom_text_repel(data = significant_df, aes(label = Gene),
                  size = 3, color = "black", box.padding = 0.5, 
                  max.overlaps = 20, min.segment.length = 0) 

pdf(fs::path(dir.results,"Plot2_PT_S3_T2D_HC_No_Med.pdf"),width=10,height=7)
print(volcano_plot)
dev.off()
```
#### iv. aPT
```{r}
#aPT
so_celltype <- subset(so_kpmp_sc,KPMP_celltype=="aPT")
# genes <- rownames(so_celltype)[1:10]
# so_subset <- subset(so_celltype,features=genes)
# Extract the gene expression data for all genes
gene_expression <- as.data.frame(GetAssayData(so_celltype, layer = "data"))

#Assign gene names as rownames, cell names as colnames
# rownames(gene_expression) <- rownames(so_celltype) #Gene Names
# colnames(gene_expression) <- colnames(so_celltype) #Cell Names
#Transpose gene expression dataset to merge with metadata
gene_expression <- t(gene_expression)
gene_expression <- data.frame(gene_expression) #Make a dataframe again after transposing
#Set gene list
gene_list <- colnames(gene_expression)
gene_expression$cellname <- rownames(gene_expression) 
rownames(gene_expression) <- NULL

# Extract the metadata
metadata <- so_celltype@meta.data
# metadata <- metadata %>%
#   mutate(across(everything(),~ifelse(.==".",NA,.)))
metadata$cellname <- rownames(metadata)
rownames(metadata) <- NULL

# Combine the gene expression data and metadata
data <- tidylog::full_join(metadata,gene_expression,by="cellname")
rm(metadata,gene_expression)

#Compare Health Controls to Type 2 Diabetes on no meds
data_subset <- data %>%
  filter(group=="Type_2_Diabetes" | group=="Lean_Control") %>%
  filter(medication=="no_med")

data_subset$group <- factor(data_subset$group)

#Log transform gene expression
data_subset <- data_subset %>% 
  mutate(across(all_of(gene_list),~log2(.+1)))

full_results <- data.frame()

# Total number of genes
total_genes <- length(gene_list)

# Calculate the batch size
batch_size <- round(total_genes / 5)

# Simulate a vector of genes (replace this with your actual gene data)
genes <- 1:total_genes

# Loop through the genes in batches
for (i in seq(1, total_genes, by = batch_size)) {
  
  # Get the current batch (subsetting the gene vector)
  batch <- genes[i:min(i + batch_size - 1, total_genes)]
  for (gene in gene_list[batch]) { #tester genes
    # m0 <- as.formula(paste0(gene," ~ group + (1 | kit_id)"))
    # model <- lmer(m0,data=data_subset)
    #Adjust for key covariates
    m1 <- as.formula(paste0(gene," ~ group + age + sex + bmi + (1 | kit_id)"))
    model1 <- lmer(m1,data=data_subset)
    
    # # Plot residuals vs fitted values
    # residuals <- residuals(model1)
    # fitted_values <- fitted(model1)
    # 
    # plot(fitted_values, residuals)
    # abline(h = 0, col = "red")
    # 
    # # Histogram of residuals
    # hist(residuals, main = "Histogram of Residuals", xlab = "Residuals", col = "lightblue", border = "black")
    # 
    # # Q-Q plot for normality
    # qqnorm(residuals)
    # qqline(residuals, col = "red")
    
    # beta <- round(summary(model)$coef[2,1],3)
    # pval <-round(summary(model)$coef[2,5],5)
    beta1 <- round(summary(model1)$coef[2,1],3)
    pval1 <-round(summary(model1)$coef[2,5],5)
    
    result <- data.frame(Gene=gene,Beta=beta1,PValue=pval1)
    full_results <- rbind(full_results,result)
  }
}
# #Make volcano plot of all gene results for group
full_results <- full_results %>%
  mutate(fdr=p.adjust(PValue,method="fdr"))

write.csv(full_results,fs::path(dir.results,"aPT_T2D_HC_No_Med.csv"))

# }
# Add a column to determine color based on the sign of the beta
# Create a new color column based on beta sign and FDR threshold
full_results$color <- ifelse(full_results$fdr < 0.3 & full_results$Beta > 0, "salmon",
                             ifelse(full_results$fdr < 0.3 & full_results$Beta < 0, "lightblue", "gray"))

# Identify significant points (fdr < 0.05)
significant_df <- full_results[full_results$fdr < 0.3, ]
# full_results$color <- ifelse(full_results$PValue < 0.05 & full_results$Beta > 0, "red", 
#                              ifelse(full_results$PValue < 0.05 & full_results$Beta < 0, "blue", "gray"))
# 
# # Identify significant points (PValue < 0.05)
# significant_df <- full_results[full_results$PValue < 0.05, ]

# Create the volcano plot using ggplot
volcano_plot <- ggplot(full_results, aes(x = Beta, y = -log10(PValue), color = color)) +
  geom_point(alpha = 0.7) +  # Plot points with transparency
  scale_color_identity() +  # Use the color column directly
  theme_minimal() +  # Minimal theme
  labs(
    title = "aPT Cells: Lean Controls vs. Type 2 Diabetes (No Medication)",
    subtitle = "Adjusted for Age, Sex, & BMI",
    x = "Log2FC",
    y = "-log10(P-Value)",
    color = "Beta Direction",
    caption = "Positive Beta = Upregulation in T2D vs. LC, Negative Beta = Downregulation in T2D vs. LC \n Signficance threshold: FDR < 0.3"
  ) +
  theme(
    plot.title = element_text(hjust = 0),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )+
  # # Add labels for significant points
  # geom_text(data = significant_df, aes(label = gene), 
  #           vjust = 1, hjust = 1, size = 3, check_overlap = TRUE, color = "black")
  # Add labels for significant points with ggrepel
  geom_text_repel(data = significant_df, aes(label = Gene),
                  size = 3, color = "black", box.padding = 0.5, max.overlaps = 20)

pdf(fs::path(dir.results,"Plot_aPT_T2D_HC_No_Med.pdf"),width=10,height=7)
print(volcano_plot)
dev.off()
```

