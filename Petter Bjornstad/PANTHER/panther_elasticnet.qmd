---
title: "PANTHER proteomics - Elastic net regression"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
editor: visual
---

```{r libraries, echo=F, include = F}
library(SomaDataIO)
library(SomaPlotr)
library(purrr)
library(tidyverse)
library(dplyr)
library(arsenal)
library(ggplot2)
library(tidyr)
library(DEqMS)
library(fgsea)
library(ggrepel)
library(labelled)
library(glmnet)
library(broom)
library(knitr)
library(ensr)
library(kableExtra)
library(gt)
library(psych)
library(growthcleanr)
library(behaviorchange)
library(ppcor)
library(correlation)
library(grid)
library(forestploter)
```

```{r load-data, echo = F, include = F}
# Load elastic net function
source("/Users/choiyej/GitHub/CHCO-Code/Petter Bjornstad/TODAY proteomics metabolomics/Proteomics analyses/easy_elasticnet.R")

# Load SOMAScan analytes data (analytes)
load("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Data_Cleaned/panther_analytes.RData")

# Panther dat + SOMA scaled (cleanData_panther)
load("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Data_Cleaned/panther_data_soma_std.RData")
```

# Elastic Net Regression (with 10-fold cross-validation)

Associate minmod results and TKV data with proteomics in an effort to find multi-protein signatures that associate with insulin sensitivity and secretion as well as total kidney volume in PANTHER (if underpowered for the insulin sensitivity - we might pull in data from other cohorts with proteomic data)

### AIRg (Insulin secretion)

```{r elastic-net-airg, echo = F, warning = F, message=F}
# Limit to records with non-missing AIRg
panther_mm_airg <- cleanData_panther %>% 
  filter(!is.na(mm_airg) & mm_airg > 0 ) %>% 
  dplyr::select(mm_airg, starts_with("seq")) 

# Top 100 associations to AIRg
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_mm_airg))
predictors <- colnames(panther_mm_airg[seq])

result_airg <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(mm_airg) ~ ",predictors[i])
  mod <- lm(data = panther_mm_airg, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_airg <- rbind(result_airg,tidymod)
}

result_airg$adj.p.value <- p.adjust(result_airg$p.value, "fdr")
result_airg$AptName <- result_airg$term
result_airg$term <- NULL
result_airg <- merge(result_airg,analytes,by="AptName",all.x = T, all.y = F)
result_airg <- result_airg[order(result_airg$p.value),] 
result_airg_100 <- head(result_airg, 100)$AptName
predictors_airg <- as.matrix(subset(panther_mm_airg, select = result_airg_100))

# Elastic net regression
en_airg <- easy_elasticnet(data = panther_mm_airg, 
                        outcome = "mm_airg", out = "min.error",
                        predictors = predictors_airg,
                        cv_method="kfold", folds = 10)

retained_vars_airg = analytes[analytes$AptName %in% en_airg, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_airg, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/airg_panther_proteomics.csv", 
          row.names = F)

form_airg = as.formula(paste0("log(mm_airg) ~ ",paste0(en_airg,collapse = "+")))
mod_airg = lm(formula = form_airg, data = panther_mm_airg)
mod_df_airg = as.data.frame(tidy(mod_airg, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_airg) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_airg,p.value), digits = 3)
ggplot(mod_df_airg[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_airg_100)` proteins included in analysis. No. of proteins identified: `r length(en_airg)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_airg))
plot(mod_airg)

# Adjusted R-squared 95% CI
conf.level = 0.95
z <- qnorm(1 - (1 - conf.level)/2)

rsq_airg <- summary(mod_airg)$adj.r.squared
k_airg <- ncol(mod_airg$model) - 1
n_airg <- mod_airg$df.residual + k_airg + 1
rsq.se_airg <- sqrt((4 * rsq_airg * (1 - rsq_airg)^2 * (n_airg - k_airg - 1)^2)/((n_airg^2 - 1) * (3 + n_airg)))
LL_airg <- rsq_airg - z*rsq.se_airg
UL_airg <- rsq_airg + z*rsq.se_airg
```

### DI (disposition index: measure of how well the body compensates for insulin resistance)

```{r elastic-net-di, echo = F, warning = F, message=F}
# Limit to records with non-missing di
panther_mm_di <- cleanData_panther %>% 
  filter(!is.na(mm_di) & mm_di > 0) %>% 
  dplyr::select(mm_di, starts_with("seq")) 

# Top 100 associations to di
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_mm_di))
predictors <- colnames(panther_mm_di[seq])

result_di <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(mm_di) ~ ",predictors[i])
  mod <- lm(data = panther_mm_di, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_di <- rbind(result_di,tidymod)
}

result_di$adj.p.value <- p.adjust(result_di$p.value, "fdr")
result_di$AptName <- result_di$term
result_di$term <- NULL
result_di <- merge(result_di,analytes,by="AptName",all.x = T, all.y = F)
result_di <- result_di[order(result_di$p.value),] 
result_di_100 <- head(result_di, 150)$AptName
predictors_di <- as.matrix(subset(panther_mm_di, select = result_di_100))
# Elastic net regression
en_di <- easy_elasticnet(data = panther_mm_di, 
                        outcome = "mm_di", out = "min.error",
                        predictors = predictors_di,
                        cv_method="kfold", folds = 10)

retained_vars_di = analytes[analytes$AptName %in% en_di, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_di, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/di_panther_proteomics.csv", 
          row.names = F)

form_di = as.formula(paste0("log(mm_di) ~ ",paste0(en_di,collapse = "+")))
mod_di = lm(formula = form_di, data = panther_mm_di)
mod_df_di = as.data.frame(tidy(mod_di, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_di) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_di,p.value), digits = 3)
ggplot(mod_df_di[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_di_100)` proteins included in analysis. No. of proteins identified: `r length(en_di)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_di))
plot(mod_di)

# Adjusted R-squared 95% CI
rsq_di <- summary(mod_di)$adj.r.squared
k_di <- ncol(mod_di$model) - 1
n_di <- mod_di$df.residual + k_di + 1
rsq.se_di <- sqrt((4 * rsq_di * (1 - rsq_di)^2 * (n_di - k_di - 1)^2)/((n_di^2 - 1) * (3 + n_di)))
LL_di <- rsq_di - z*rsq.se_di
UL_di <- rsq_di + z*rsq.se_di
```

### SI (insulin sensitivity)

```{r elastic-net-si, echo = F, warning = F, message=F}
# Limit to records with non-missing si
panther_mm_si <- cleanData_panther %>% 
  filter(!is.na(mm_si) & mm_si > 0) %>% 
  dplyr::select(mm_si, starts_with("seq"))

# Top 100 associations to si
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_mm_si))
predictors <- colnames(panther_mm_si[seq])

result_si <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(mm_si) ~ ",predictors[i])
  mod <- lm(data = panther_mm_si, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_si <- rbind(result_si,tidymod)
}

result_si$adj.p.value <- p.adjust(result_si$p.value, "fdr")
result_si$AptName <- result_si$term
result_si$term <- NULL
result_si <- merge(result_si,analytes,by="AptName",all.x = T, all.y = F)
result_si <- result_si[order(result_si$p.value),] 
result_si_100 <- head(result_si, 100)$AptName
predictors_si <- as.matrix(subset(panther_mm_si, select = result_si_100))

# Elastic net regression
en_si <- easy_elasticnet(data = panther_mm_si, 
                        outcome = "mm_si", out = "min.error",
                        predictors = predictors_si,
                        cv_method="kfold", folds = 10)

retained_vars_si = analytes[analytes$AptName %in% en_si, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_si, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/si_panther_proteomics.csv", 
          row.names = F)

form_si = as.formula(paste0("log(mm_si) ~ ",paste0(en_si,collapse = "+")))
mod_si = lm(formula = form_si, data = panther_mm_si)
mod_df_si = as.data.frame(tidy(mod_si, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_si) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_si,p.value), digits = 3)
ggplot(mod_df_si[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_si_100)` proteins included in analysis. No. of proteins identified: `r length(en_si)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_si))
plot(mod_si)

# Adjusted R-squared 95% CI
rsq_si <- summary(mod_si)$adj.r.squared
k_si <- ncol(mod_si$model) - 1
n_si <- mod_si$df.residual + k_si + 1
rsq.se_si <- sqrt((4 * rsq_si * (1 - rsq_si)^2 * (n_si - k_si - 1)^2)/((n_si^2 - 1) * (3 + n_si)))
LL_si <- rsq_si - z*rsq.se_si
UL_si <- rsq_si + z*rsq.se_si
```

### Beta-cell function

```{r elastic-net-betacell, echo = F, warning = F, message=F}
# Limit to records with non-missing bcell
panther_mm_bcell <- cleanData_panther %>% 
  filter(!is.na(mm_bcell) & mm_bcell > 0) %>% 
  dplyr::select(mm_bcell, starts_with("seq")) 

# Top 100 associations to bcell
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_mm_bcell))
predictors <- colnames(panther_mm_bcell[seq])

result_bcell <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(mm_bcell) ~ ",predictors[i])
  mod <- lm(data = panther_mm_bcell, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_bcell <- rbind(result_bcell,tidymod)
}

result_bcell$adj.p.value <- p.adjust(result_bcell$p.value, "fdr")
result_bcell$AptName <- result_bcell$term
result_bcell$term <- NULL
result_bcell <- merge(result_bcell,analytes,by="AptName",all.x = T, all.y = F)
result_bcell <- result_bcell[order(result_bcell$p.value),] 
result_bcell_100 <- head(result_bcell, 100)$AptName
predictors_bcell <- as.matrix(subset(panther_mm_bcell, select = result_bcell_100))
# Elastic net regression
en_bcell <- easy_elasticnet(data = panther_mm_bcell, 
                        outcome = "mm_bcell", out = "min.error",
                        predictors = predictors_bcell,
                        cv_method="kfold", folds = 10)

retained_vars_bcell = analytes[analytes$AptName %in% en_bcell, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_bcell, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/bcell_panther_proteomics.csv", 
          row.names = F)


form_bcell = as.formula(paste0("log(mm_bcell) ~ ",paste0(en_bcell,collapse = "+")))
mod_bcell = lm(formula = form_bcell, data = panther_mm_bcell)
mod_df_bcell = as.data.frame(tidy(mod_bcell, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_bcell) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_bcell,p.value), digits = 3)
ggplot(mod_df_bcell[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_bcell_100)` proteins included in analysis. No. of proteins identified: `r length(en_bcell)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_bcell))
plot(mod_bcell)

# Adjusted R-squared 95% CI
rsq_bcell <- summary(mod_bcell)$adj.r.squared
k_bcell <- ncol(mod_bcell$model) - 1
n_bcell <- mod_bcell$df.residual + k_bcell + 1
rsq.se_bcell <- sqrt((4 * rsq_bcell * (1 - rsq_bcell)^2 * (n_bcell - k_bcell - 1)^2)/((n_bcell^2 - 1) * (3 + n_bcell)))
LL_bcell <- rsq_bcell - z*rsq.se_bcell
UL_bcell <- rsq_bcell + z*rsq.se_bcell
```

### Total Kidney Volume

```{r elastic-net-tkv, echo = F, warning = F, message=F}
hist(cleanData_panther$total_kidney_volume_ml)
# Limit to records with non-missing tkv
panther_total_kidney_volume_ml <- cleanData_panther %>% 
  filter(!is.na(total_kidney_volume_ml)) %>% 
  dplyr::select(total_kidney_volume_ml, starts_with("seq"))

# Top 100 associations to tkv
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_total_kidney_volume_ml))
predictors <- colnames(panther_total_kidney_volume_ml[seq])

result_tkv <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("total_kidney_volume_ml ~ ",predictors[i])
  mod <- lm(data = panther_total_kidney_volume_ml, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_tkv <- rbind(result_tkv,tidymod)
}

result_tkv$adj.p.value <- p.adjust(result_tkv$p.value, "fdr")
result_tkv$AptName <- result_tkv$term
result_tkv$term <- NULL
result_tkv <- merge(result_tkv,analytes,by="AptName",all.x = T, all.y = F)
result_tkv <- result_tkv[order(result_tkv$p.value),] 
result_tkv_100 <- head(result_tkv, 60)$AptName
predictors_tkv <- as.matrix(subset(panther_total_kidney_volume_ml, select = result_tkv_100))
# Elastic net regression
en_tkv <- easy_elasticnet(data = panther_total_kidney_volume_ml, 
                        outcome = "total_kidney_volume_ml", out = "min.error",
                        predictors = predictors_tkv,
                        cv_method="kfold", folds = 10)

retained_vars_tkv = analytes[analytes$AptName %in% en_tkv, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_tkv, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/tkv_panther_proteomics.csv", 
          row.names = F)

form_tkv = as.formula(paste0("total_kidney_volume_ml ~ ",paste0(en_tkv,collapse = "+")))
mod_tkv = lm(formula = form_tkv, data = panther_total_kidney_volume_ml)
mod_df_tkv = as.data.frame(tidy(mod_tkv, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_tkv) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_tkv,p.value), digits = 3)
ggplot(mod_df_tkv[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_tkv_100)` proteins included in analysis. No. of proteins identified: `r length(en_tkv)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_tkv))
plot(mod_tkv)

# Adjusted R-squared 95% CI
rsq_tkv <- summary(mod_tkv)$adj.r.squared
k_tkv <- ncol(mod_tkv$model) - 1
n_tkv <- mod_tkv$df.residual + k_tkv + 1
rsq.se_tkv <- sqrt((4 * rsq_tkv * (1 - rsq_tkv)^2 * (n_tkv - k_tkv - 1)^2)/((n_tkv^2 - 1) * (3 + n_tkv)))
LL_tkv <- rsq_tkv - z*rsq.se_tkv
UL_tkv <- rsq_tkv + z*rsq.se_tkv
```

### Height adjusted TKV

```{r elastic-net-httkv, echo = F, warning = F, message=F}
hist(cleanData_panther$ht_adj_tkv)
# Limit to records with non-missing ht_adj_tkv
panther_ht_adj_tkv <- cleanData_panther %>% 
  filter(!is.na(ht_adj_tkv)) %>% 
  dplyr::select(ht_adj_tkv, starts_with("seq")) 

# Top 100 associations to ht_adj_tkv
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_ht_adj_tkv))
predictors <- colnames(panther_ht_adj_tkv[seq])

result_ht_adj_tkv <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("ht_adj_tkv ~ ",predictors[i])
  mod <- lm(data = panther_ht_adj_tkv, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_ht_adj_tkv <- rbind(result_ht_adj_tkv,tidymod)
}

result_ht_adj_tkv$adj.p.value <- p.adjust(result_ht_adj_tkv$p.value, "fdr")
result_ht_adj_tkv$AptName <- result_ht_adj_tkv$term
result_ht_adj_tkv$term <- NULL
result_ht_adj_tkv <- merge(result_ht_adj_tkv,analytes,by="AptName",all.x = T, all.y = F)
result_ht_adj_tkv <- result_ht_adj_tkv[order(result_ht_adj_tkv$p.value),] 
result_ht_adj_tkv_100 <- head(result_ht_adj_tkv, 100)$AptName
predictors_ht_adj_tkv <- as.matrix(subset(panther_ht_adj_tkv, select = result_ht_adj_tkv_100))
# Elastic net regression
en_ht_adj_tkv <- easy_elasticnet(data = panther_ht_adj_tkv, 
                        outcome = "ht_adj_tkv", out = "min.error",
                        predictors = predictors_ht_adj_tkv,
                        cv_method="kfold", folds = 10)

retained_vars_ht_adj_tkv = analytes[analytes$AptName %in% en_ht_adj_tkv, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_ht_adj_tkv, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/ht_adj_tkv_panther_proteomics.csv", 
          row.names = F)

form_ht_adj_tkv = as.formula(paste0("ht_adj_tkv ~ ",paste0(en_ht_adj_tkv,collapse = "+")))
mod_ht_adj_tkv = lm(formula = form_ht_adj_tkv, data = panther_ht_adj_tkv)
mod_df_ht_adj_tkv = as.data.frame(tidy(mod_ht_adj_tkv, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_ht_adj_tkv) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_ht_adj_tkv,p.value), digits = 3)

ggplot(mod_df_ht_adj_tkv[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_ht_adj_tkv_100)` proteins included in analysis. No. of proteins identified: `r length(en_ht_adj_tkv)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_ht_adj_tkv))
plot(mod_ht_adj_tkv)

# Adjusted R-squared 95% CI
rsq_ht_adj_tkv <- summary(mod_ht_adj_tkv)$adj.r.squared
k_ht_adj_tkv <- ncol(mod_ht_adj_tkv$model) - 1
n_ht_adj_tkv <- mod_ht_adj_tkv$df.residual + k_ht_adj_tkv + 1
rsq.se_ht_adj_tkv <- sqrt((4 * rsq_ht_adj_tkv * (1 - rsq_ht_adj_tkv)^2 * (n_ht_adj_tkv - k_ht_adj_tkv - 1)^2)/((n_ht_adj_tkv^2 - 1) * (3 + n_ht_adj_tkv)))
LL_ht_adj_tkv <- rsq_ht_adj_tkv - z*rsq.se_ht_adj_tkv
UL_ht_adj_tkv <- rsq_ht_adj_tkv + z*rsq.se_ht_adj_tkv
```

### GFR (Raw plasma)

```{r elastic-net-gfr, echo = F, warning = F, message=F}
# Limit to records with non-missing gfr
panther_gfr_raw_plasma <- cleanData_panther %>% 
  filter(!is.na(gfr_raw_plasma) & gfr_raw_plasma > 0) %>% 
  dplyr::select(gfr_raw_plasma, starts_with("seq")) 

# Top 100 associations to gfr
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_gfr_raw_plasma))
predictors <- colnames(panther_gfr_raw_plasma[seq])

result_gfr <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(gfr_raw_plasma) ~ ",predictors[i])
  mod <- lm(data = panther_gfr_raw_plasma, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_gfr <- rbind(result_gfr,tidymod)
}

result_gfr$adj.p.value <- p.adjust(result_gfr$p.value, "fdr")
result_gfr$AptName <- result_gfr$term
result_gfr$term <- NULL
result_gfr <- merge(result_gfr,analytes,by="AptName",all.x = T, all.y = F)
result_gfr <- result_gfr[order(result_gfr$p.value),] 
result_gfr_100 <- head(result_gfr, 75)$AptName
predictors_gfr <- as.matrix(subset(panther_gfr_raw_plasma, select = result_gfr_100))
# Elastic net regression
en_gfr <- easy_elasticnet(data = panther_gfr_raw_plasma, 
                        outcome = "gfr_raw_plasma", out = "min.error",
                        predictors = predictors_gfr,
                        cv_method="kfold", folds = 10)

retained_vars_gfr = analytes[analytes$AptName %in% en_gfr, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_gfr, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_panther_proteomics.csv", 
          row.names = F)

form_gfr = as.formula(paste0("log(gfr_raw_plasma) ~ ",paste0(en_gfr,collapse = "+")))
mod_gfr = lm(formula = form_gfr, data = panther_gfr_raw_plasma)
mod_df_gfr = as.data.frame(tidy(mod_gfr, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_gfr) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_gfr,p.value), digits = 3)
ggplot(mod_df_gfr[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_gfr_100)` proteins included in analysis. No. of proteins identified: `r length(en_gfr)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_gfr))
plot(mod_gfr)

# Adjusted R-squared 95% CI
rsq_gfr <- summary(mod_gfr)$adj.r.squared
k_gfr <- ncol(mod_gfr$model) - 1
n_gfr <- mod_gfr$df.residual + k_gfr + 1
rsq.se_gfr <- sqrt((4 * rsq_gfr * (1 - rsq_gfr)^2 * (n_gfr - k_gfr - 1)^2)/((n_gfr^2 - 1) * (3 + n_gfr)))
LL_gfr <- rsq_gfr - z*rsq.se_gfr
UL_gfr <- rsq_gfr + z*rsq.se_gfr
```

### GFR (BSA plasma)

```{r elastic-net-gfr-bsa, echo = F, warning = F, message=F}
# Limit to records with non-missing gfr
panther_gfr_bsa_plasma <- cleanData_panther %>% 
  filter(!is.na(gfr_bsa_plasma) & gfr_bsa_plasma > 0) %>% 
  dplyr::select(gfr_bsa_plasma, starts_with("seq")) 

# Top 100 associations to gfr
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_gfr_bsa_plasma))
predictors <- colnames(panther_gfr_bsa_plasma[seq])

result_gfr_bsa <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(gfr_bsa_plasma) ~ ",predictors[i])
  mod <- lm(data = panther_gfr_bsa_plasma, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_gfr_bsa <- rbind(result_gfr_bsa,tidymod)
}

result_gfr_bsa$adj.p.value <- p.adjust(result_gfr_bsa$p.value, "fdr")
result_gfr_bsa$AptName <- result_gfr_bsa$term
result_gfr_bsa$term <- NULL
result_gfr_bsa <- merge(result_gfr_bsa,analytes,by="AptName",all.x = T, all.y = F)
result_gfr_bsa <- result_gfr_bsa[order(result_gfr_bsa$p.value),] 
result_gfr_bsa_100 <- head(result_gfr_bsa, 75)$AptName
predictors_gfr_bsa <- as.matrix(subset(panther_gfr_bsa_plasma, select = result_gfr_bsa_100))
# Elastic net regression
en_gfr_bsa <- easy_elasticnet(data = panther_gfr_bsa_plasma, 
                        outcome = "gfr_bsa_plasma", out = "min.error",
                        predictors = predictors_gfr_bsa,
                        cv_method="kfold", folds = 10)

retained_vars_gfr_bsa = analytes[analytes$AptName %in% en_gfr_bsa, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_gfr_bsa, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_bsa_panther_proteomics.csv", 
          row.names = F)

form_gfr_bsa = as.formula(paste0("log(gfr_bsa_plasma) ~ ",paste0(en_gfr_bsa,collapse = "+")))
mod_gfr_bsa = lm(formula = form_gfr_bsa, data = panther_gfr_bsa_plasma)
mod_df_gfr_bsa = as.data.frame(tidy(mod_gfr_bsa, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_gfr_bsa) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_gfr_bsa,p.value), digits = 3)
ggplot(mod_df_gfr_bsa[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_gfr_100)` proteins included in analysis. No. of proteins identified: `r length(en_gfr_bsa)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_gfr_bsa))
plot(mod_gfr_bsa)

# Adjusted R-squared 95% CI
rsq_gfr_bsa <- summary(mod_gfr_bsa)$adj.r.squared
k_gfr_bsa <- ncol(mod_gfr_bsa$model) - 1
n_gfr_bsa <- mod_gfr_bsa$df.residual + k_gfr_bsa + 1
rsq.se_gfr_bsa <- sqrt((4 * rsq_gfr_bsa * (1 - rsq_gfr_bsa)^2 * (n_gfr_bsa - k_gfr_bsa - 1)^2)/((n_gfr_bsa^2 - 1) * (3 + n_gfr_bsa)))
LL_gfr_bsa <- rsq_gfr_bsa - z*rsq.se_gfr_bsa
UL_gfr_bsa <- rsq_gfr_bsa + z*rsq.se_gfr_bsa
```

### RPF (Raw plasma)

```{r elastic-net-rpf, echo = F, warning = F, message=F}
# Limit to records with non-missing rpf
panther_erpf_raw_plasma <- cleanData_panther %>% 
  filter(!is.na(erpf_raw_plasma) & erpf_raw_plasma > 0) %>% 
  dplyr::select(erpf_raw_plasma, starts_with("seq")) 

# Top 100 associations to rpf
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_erpf_raw_plasma))
predictors <- colnames(panther_erpf_raw_plasma[seq])

result_rpf <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(erpf_raw_plasma) ~ ",predictors[i])
  mod <- lm(data = panther_erpf_raw_plasma, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_rpf <- rbind(result_rpf,tidymod)
}

result_rpf$adj.p.value <- p.adjust(result_rpf$p.value, "fdr")
result_rpf$AptName <- result_rpf$term
result_rpf$term <- NULL
result_rpf <- merge(result_rpf,analytes,by="AptName",all.x = T, all.y = F)
result_rpf <- result_rpf[order(result_rpf$p.value),] 
result_rpf_100 <- head(result_rpf, 100)$AptName
predictors_rpf <- as.matrix(subset(panther_erpf_raw_plasma, select = result_rpf_100))
# Elastic net regression
en_rpf <- easy_elasticnet(data = panther_erpf_raw_plasma, 
                        outcome = "erpf_raw_plasma", out = "min.error",
                        predictors = predictors_rpf,
                        cv_method="kfold", folds = 10)

retained_vars_rpf = analytes[analytes$AptName %in% en_rpf, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_rpf, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/rpf_panther_proteomics.csv", 
          row.names = F)

form_rpf = as.formula(paste0("log(erpf_raw_plasma) ~ ",paste0(en_rpf,collapse = "+")))
mod_rpf = lm(formula = form_rpf, data = panther_erpf_raw_plasma)
mod_df_rpf = as.data.frame(tidy(mod_rpf, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_rpf) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_rpf,p.value), digits = 3)
ggplot(mod_df_rpf[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_rpf_100)` proteins included in analysis. No. of proteins identified: `r length(en_rpf)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_rpf))
plot(mod_rpf)

# Adjusted R-squared 95% CI
rsq_rpf <- summary(mod_rpf)$adj.r.squared
k_rpf <- ncol(mod_rpf$model) - 1
n_rpf <- mod_rpf$df.residual + k_rpf + 1
rsq.se_rpf <- sqrt((4 * rsq_rpf * (1 - rsq_rpf)^2 * (n_rpf - k_rpf - 1)^2)/((n_rpf^2 - 1) * (3 + n_rpf)))
LL_rpf <- rsq_rpf - z*rsq.se_rpf
UL_rpf <- rsq_rpf + z*rsq.se_rpf
```

### RPF (BSA plasma)

```{r elastic-net-rpf-bsa, echo = F, warning = F, message=F}
# Limit to records with non-missing rpf
panther_erpf_bsa_plasma <- cleanData_panther %>% 
  filter(!is.na(erpf_bsa_plasma) & erpf_bsa_plasma > 0) %>% 
  dplyr::select(erpf_bsa_plasma, starts_with("seq")) 

# Top 100 associations to rpf
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(panther_erpf_bsa_plasma))
predictors <- colnames(panther_erpf_bsa_plasma[seq])

result_rpf_bsa <- NULL
for (i in 1:length(predictors)) {
  form <- paste0("log(erpf_bsa_plasma) ~ ",predictors[i])
  mod <- lm(data = panther_erpf_bsa_plasma, formula = as.formula(form))
  tidymod <- tidy(mod, exponentiate=F, conf.int = TRUE)
  tidymod <- tidymod[2,]
  result_rpf_bsa <- rbind(result_rpf_bsa,tidymod)
}

result_rpf_bsa$adj.p.value <- p.adjust(result_rpf_bsa$p.value, "fdr")
result_rpf_bsa$AptName <- result_rpf_bsa$term
result_rpf_bsa$term <- NULL
result_rpf_bsa <- merge(result_rpf_bsa,analytes,by="AptName",all.x = T, all.y = F)
result_rpf_bsa <- result_rpf_bsa[order(result_rpf_bsa$p.value),] 
result_rpf_bsa_100 <- head(result_rpf_bsa, 100)$AptName
predictors_rpf_bsa <- as.matrix(subset(panther_erpf_bsa_plasma, select = result_rpf_bsa_100))
# Elastic net regression
en_rpf_bsa <- easy_elasticnet(data = panther_erpf_bsa_plasma, 
                        outcome = "erpf_bsa_plasma", out = "min.error",
                        predictors = predictors_rpf_bsa,
                        cv_method="kfold", folds = 10)

retained_vars_rpf_bsa = analytes[analytes$AptName %in% en_rpf_bsa, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_rpf_bsa, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/rpf_bsa_panther_proteomics.csv", 
          row.names = F)

form_rpf_bsa = as.formula(paste0("log(erpf_bsa_plasma) ~ ",paste0(en_rpf_bsa,collapse = "+")))
mod_rpf_bsa = lm(formula = form_rpf_bsa, data = panther_erpf_bsa_plasma)
mod_df_rpf_bsa = as.data.frame(tidy(mod_rpf_bsa, exponentiate = F, conf.int = T), digits = 3) %>% left_join(retained_vars_rpf_bsa) %>%
  dplyr::mutate(Target_nodup = case_when(is.na(Target_nodup) ~ "Intercept", T ~ Target_nodup),
         TargetFullName = case_when(is.na(TargetFullName) ~ "Intercept", T ~ TargetFullName)) %>%
  dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)

kable(arrange(mod_df_rpf_bsa,p.value), digits = 3)
ggplot(mod_df_rpf_bsa[-1,], 
       aes(estimate, 
           reorder(Target_nodup,desc(p.value)), 
           xmin = conf.low, 
           xmax = conf.high, 
           height = 0)) +
  geom_point() +
  geom_vline(xintercept = 0, lty = 4) +
  geom_errorbarh() +
  labs(y = NULL)
```

Top `r length(result_rpf_100)` proteins included in analysis. No. of proteins identified: `r length(en_rpf_bsa)`.

```{r echo = F, warning = F, message=F}
kable(glance(mod_rpf_bsa))
plot(mod_rpf_bsa)

# Adjusted R-squared 95% CI
rsq_rpf_bsa <- summary(mod_rpf_bsa)$adj.r.squared
k_rpf_bsa <- ncol(mod_rpf_bsa$model) - 1
n_rpf_bsa <- mod_rpf_bsa$df.residual + k_rpf_bsa + 1
rsq.se_rpf_bsa <- sqrt((4 * rsq_rpf_bsa * (1 - rsq_rpf_bsa)^2 * (n_rpf_bsa - k_rpf_bsa - 1)^2)/((n_rpf_bsa^2 - 1) * (3 + n_rpf_bsa)))
LL_rpf_bsa <- rsq_rpf_bsa - z*rsq.se_rpf_bsa
UL_rpf_bsa <- rsq_rpf_bsa + z*rsq.se_rpf_bsa
```

## Elastic net models combined

```{r elastic-net-combined1, echo=F}
elasticnet_combined <- data.frame(r2 = c(rsq_airg, rsq_bcell, rsq_di, rsq_si, rsq_tkv, rsq_ht_adj_tkv, rsq_gfr, rsq_gfr_bsa, rsq_rpf, rsq_rpf_bsa),
                                  lower = c(LL_airg, LL_bcell, LL_di, LL_si, LL_tkv, LL_ht_adj_tkv, LL_gfr, LL_gfr_bsa, LL_rpf, LL_rpf_bsa),
                                  upper = c(UL_airg, UL_bcell, UL_di, UL_si, UL_tkv, UL_ht_adj_tkv, UL_gfr, UL_gfr_bsa, UL_rpf, UL_rpf_bsa),
                                  Model = c("AIRg", "B-cell", "DI", "SI", "TKV", "Ht-adj TKV", "GFR - Raw", "GFR - BSA", "RPF - Raw", "RPF - BSA"),
                                  No.proteins = c(length(en_airg), length(en_bcell), length(en_di), length(en_si), 
                                        length(en_tkv), length(en_ht_adj_tkv), length(en_gfr),length(en_gfr_bsa),
                                        length(en_rpf),length(en_rpf_bsa)))
elasticnet_combined$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined$r2, elasticnet_combined$lower, elasticnet_combined$upper))

forest(data = elasticnet_combined[,c(4:7)], 
       est = elasticnet_combined$r2,
       lower = elasticnet_combined$lower,
       upper = elasticnet_combined$upper, ci_column = 3)
```

```{r elastic-net-combined2, echo=F}
elasticnet_combined <- data.frame(r2 = c(rsq_airg, rsq_bcell, rsq_di, rsq_si, rsq_tkv, rsq_ht_adj_tkv),
                                  lower = c(LL_airg, LL_bcell, LL_di, LL_si, LL_tkv, LL_ht_adj_tkv),
                                  upper = c(UL_airg, UL_bcell, UL_di, UL_si, UL_tkv, UL_ht_adj_tkv),
                                  Model = c("AIRg", "B-cell", "DI", "SI", "TKV", "Ht-adj TKV"),
                                  No.proteins = c(length(en_airg), length(en_bcell), length(en_di), length(en_si), 
                                        length(en_tkv), length(en_ht_adj_tkv)))
elasticnet_combined$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined$r2, elasticnet_combined$lower, elasticnet_combined$upper))

forest(data = elasticnet_combined[,c(4:7)], 
       est = elasticnet_combined$r2,
       lower = elasticnet_combined$lower,
       upper = elasticnet_combined$upper, ci_column = 3)
```

```{r elastic-net-combined3, echo=F}
elasticnet_combined <- data.frame(r2 = c(rsq_airg, rsq_bcell, rsq_di, rsq_si),
                                  lower = c(LL_airg, LL_bcell, LL_di, LL_si),
                                  upper = c(UL_airg, UL_bcell, UL_di, UL_si),
                                  Model = c("AIRg", "B-cell", "DI", "SI"),
                                  No.proteins = c(length(en_airg), length(en_bcell), length(en_di), length(en_si)))
elasticnet_combined$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined$r2, elasticnet_combined$lower, elasticnet_combined$upper))

forest(data = elasticnet_combined[,c(4:7)], 
       est = elasticnet_combined$r2,
       lower = elasticnet_combined$lower,
       upper = elasticnet_combined$upper, ci_column = 3)
```

