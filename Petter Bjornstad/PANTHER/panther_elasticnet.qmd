---
title: "PANTHER proteomics - Elastic net regression"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

```{r libraries, echo=F, include = F}
library(SomaDataIO)
library(purrr)
library(tidyverse)
library(dplyr)
library(arsenal)
library(ggplot2)
library(tidyr)
library(fgsea)
library(ggrepel)
library(labelled)
library(glmnet)
library(broom)
library(knitr)
library(ensr)
library(kableExtra)
library(gt)
library(psych)
library(growthcleanr)
library(behaviorchange)
library(ppcor)
library(correlation)
library(grid)
library(forestploter)
```

```{r load-data, echo = F, include = F}
# Load elastic net function
source("/Users/choiyej/GitHub/CHCO-Code/Petter Bjornstad/TODAY proteomics metabolomics/Proteomics analyses/easy_elasticnet.R")

# Load SOMAScan analytes data (analytes)
load("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Data_Cleaned/panther_analytes.RData")

# Panther dat + SOMA scaled (cleanData_panther)
load("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Data_Cleaned/panther_data_soma_std.RData")
```

```{r include = F}
top_associations <- function(data, response_var, analyte_filter, top_n = 100, adjust_method = "fdr", covariates = NULL, log = F) {
  
  # Filter data based on specified criteria
  filtered_data <- data %>%
    filter(!is.na(!!sym(response_var)) & !!sym(response_var) > 0)
  
  # Identify analyte columns (those containing 'seq')
  is_seq <- function(.x) grepl("seq", .x)
  seq_cols <- is_seq(names(filtered_data))
  predictors <- colnames(filtered_data[seq_cols])
  
  # Initialize result storage
  result <- NULL
  
  # Loop through each predictor and fit a model
  for (i in 1:length(predictors)) {
    if(log){ 
      form <- paste0("log(", response_var, ") ~ ", predictors[i])}
    if(!log){
      form <- paste0(response_var, "~ ", predictors[i])}
    mod <- lm(data = filtered_data, formula = as.formula(form))
    tidymod <- tidy(mod, exponentiate = FALSE, conf.int = TRUE)
    tidymod <- tidymod[2, ]  # Keep only the predictor row
    result <- rbind(result, tidymod)
  }
  
  # Adjust p-values
  result$adj.p.value <- p.adjust(result$p.value, method = adjust_method)
  
  # Rename and merge with analyte metadata
  result$AptName <- result$term
  result$term <- NULL
  result <- merge(result, analyte_filter, by = "AptName", all.x = TRUE)
  
  # Order by p-value and select top N results
  result <- result[order(result$p.value), ]
  result_100 <- head(result, top_n)$AptName
  
  # Create the final matrix of predictors, including 'age'
  predictors_matrix <- as.matrix(subset(filtered_data, select = c(covariates, result_100)))
  
  return(list(top_associations = result, predictors_matrix = predictors_matrix))
}

create_lm_summary <- function(data, response_var, predictors, retained_vars, log = F) {
  
  # Create formula for the linear model
  if(log){
    form <- as.formula(paste0("log(", response_var, ") ~ ", paste0(predictors, collapse = "+")))
  }
  if(!log){
    form <- as.formula(paste0(response_var, " ~ ", paste0(predictors, collapse = "+")))
  }
  
  # Fit the linear model
  model <- lm(formula = form, data = data)
  
  # Tidy the model output and convert to a data frame
  model_df <- as.data.frame(tidy(model, exponentiate = FALSE, conf.int = TRUE), digits = 3)
  
  # Left join with retained variables (retained_vars) and handle missing values for Target_nodup and TargetFullName
  model_df <- model_df %>%
    left_join(retained_vars, by = "term") %>%
    dplyr::mutate(
      Target_nodup = case_when(is.na(Target_nodup) ~ term, TRUE ~ Target_nodup),
      TargetFullName = case_when(is.na(TargetFullName) ~ term, TRUE ~ TargetFullName)
    ) %>%
    dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)
  
  return(list(model = model, model_df = model_df))
}

create_lm_summary_table_plot <- function(model_df, digits = 3, ...) {
  
  # Generate a sorted table using kable
  sorted_table <- kable(arrange(model_df, p.value), digits = digits, ...)
  
  # Create the plot, excluding the first row (usually the intercept)
  plot <- ggplot(model_df[-1,], 
                 aes(estimate, 
                     reorder(Target_nodup, dplyr::desc(p.value)), 
                     xmin = conf.low, 
                     xmax = conf.high, 
                     height = 0)) +
    geom_point() +
    geom_vline(xintercept = 0, lty = 4) +
    geom_errorbarh() +
    labs(y = NULL, x = "Estimate") +
    theme_minimal()
  
  return(list(table = sorted_table, plot = plot))
}

compute_rsq_conf_interval <- function(model, conf.level = 0.95) {
  
  # Calculate z-score for the specified confidence level
  z <- qnorm(1 - (1 - conf.level) / 2)
  
  # Extract necessary model statistics
  rsq <- summary(model)$adj.r.squared
  k <- ncol(model$model) - 1  # Number of predictors
  n <- model$df.residual + k + 1  # Total sample size
  
  # Compute the standard error of adjusted R-squared
  rsq_se <- sqrt((4 * rsq * (1 - rsq)^2 * (n - k - 1)^2) / ((n^2 - 1) * (3 + n)))
  
  # Calculate lower and upper limits of the confidence interval
  LL <- rsq - z * rsq_se
  UL <- rsq + z * rsq_se
  
  return(list(
    rsq_adj = rsq,
    rsq_se = rsq_se,
    conf.low = LL,
    conf.high = UL
  ))
}

```

# Elastic Net Regression (with 10-fold cross-validation)

Associate minmod results and TKV data with proteomics in an effort to find multi-protein signatures that associate with insulin sensitivity and secretion as well as total kidney volume in PANTHER (if underpowered for the insulin sensitivity - we might pull in data from other cohorts with proteomic data)

### AIRg (Insulin secretion)

#### Unadjusted model

```{r elastic-net-airg-unadj, echo = F, warning = F, message=F, results ='asis'}
airg_dat <- subset(cleanData_panther, !is.na(mm_airg) & mm_airg > 0)
top_airg <- top_associations(airg_dat, "mm_airg", analytes, log = T)

# Elastic net regression
en_airg <- easy_elasticnet(data = airg_dat, 
                           outcome = "mm_airg", 
                           out = "1se.error",
                           predictors = top_airg$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_airg)

# Save retained variables from elastic net
retained_vars_airg = analytes[analytes$AptName %in% en_airg, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_airg, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/airg_panther_proteomics.csv", 
          row.names = F)

mod_df_airg <- create_lm_summary(airg_dat, "mm_airg", en_airg, retained_vars_airg, log = T)
create_lm_summary_table_plot(mod_df_airg$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_airg)`.

```{r echo = F, warning = F, message=F}
mod_airg <- mod_df_airg$model
kable(glance(mod_airg))
plot(mod_airg)

# Adjusted R-squared 95% CI
mod_airg_specs <- compute_rsq_conf_interval(mod_airg)
```

#### Adjusted for age and sex

```{r elastic-net-airg-adj, echo = F, warning = F, message=F, results = 'asis'}
# Create dummy variables for 'sex'
airg_dat$sexfemale <- ifelse(airg_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_airg <- as.matrix(cbind(subset(airg_dat, select = c("age", "sexfemale")), top_airg$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_airg_adj <- easy_elasticnet(data = airg_dat, 
                               outcome = "mm_airg", out = "1se.error",
                               predictors = predictors_airg,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_airg)-2)))
length(en_airg_adj)

retained_vars_airg_adj = analytes[analytes$AptName %in% en_airg_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_airg_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/airg_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_airg_adj <- create_lm_summary(airg_dat, "mm_airg", en_airg_adj, retained_vars_airg_adj, log = T)
create_lm_summary_table_plot(mod_df_airg_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_airg)`.

```{r echo = F, warning = F, message=F}
mod_airg_adj <- mod_df_airg_adj$model
kable(glance(mod_airg_adj))
plot(mod_airg_adj)

# Adjusted R-squared 95% CI
mod_airg_adj_specs <- compute_rsq_conf_interval(mod_airg_adj)
```

### DI (disposition index: measure of how well the body compensates for insulin resistance)

#### Unadjusted model

```{r elastic-net-di-unadj, echo = F, warning = F, message=F, results ='asis'}
di_dat <- subset(cleanData_panther, !is.na(mm_di) & mm_di > 0)
top_di <- top_associations(di_dat, "mm_di", analytes, log = T, top_n = 200)

# Elastic net regression
en_di <- easy_elasticnet(data = di_dat, 
                         outcome = "mm_di", 
                         out = "1se.error",
                         predictors = top_di$predictors_matrix,
                         cv_method="kfold", 
                         folds = 10)
length(en_di)

# Save retained variables from elastic net
retained_vars_di = analytes[analytes$AptName %in% en_di, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_di, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/di_panther_proteomics.csv", 
          row.names = F)

mod_df_di <- create_lm_summary(di_dat, "mm_di", en_di, retained_vars_di, log = T)
create_lm_summary_table_plot(mod_df_di$model_df, format = "html")
```

Top 200 proteins included in analysis. No. of proteins identified: `r length(en_di)`.

```{r echo = F, warning = F, message=F}
mod_di <- mod_df_di$model
kable(glance(mod_di))
plot(mod_di)

# Adjusted R-squared 95% CI
mod_di_specs <- compute_rsq_conf_interval(mod_di)
```

#### Adjusted for age and sex

```{r elastic-net-di-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
di_dat$sexfemale <- ifelse(di_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_di <- as.matrix(cbind(subset(di_dat, select = c("age", "sexfemale")), top_di$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_di_adj <- easy_elasticnet(data = di_dat, 
                               outcome = "mm_di", out = "1se.error",
                               predictors = predictors_di,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_di)-2)))
length(en_di_adj)

retained_vars_di_adj = analytes[analytes$AptName %in% en_di_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_di_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/di_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_di_adj <- create_lm_summary(di_dat, "mm_di", en_di_adj, retained_vars_di_adj, log = T)
create_lm_summary_table_plot(mod_df_di_adj$model_df, format = "html")
```

Top 200 proteins included in analysis. No. of proteins identified: `r length(en_di)`.

```{r echo = F, warning = F, message=F}
mod_di_adj <- mod_df_di_adj$model
kable(glance(mod_di_adj))
plot(mod_di_adj)

# Adjusted R-squared 95% CI
mod_di_adj_specs <- compute_rsq_conf_interval(mod_di_adj)
```

### SI (insulin sensitivity)

#### Unadjusted model

```{r elastic-net-si-unadj, echo = F, warning = F, message=F, results ='asis'}
si_dat <- subset(cleanData_panther, !is.na(mm_si) & mm_si > 0)
top_si <- top_associations(si_dat, "mm_si", analytes, log = T)

# Elastic net regression
en_si <- easy_elasticnet(data = si_dat, 
                           outcome = "mm_si", 
                           out = "1se.error",
                           predictors = top_si$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_si)

# Save retained variables from elastic net
retained_vars_si = analytes[analytes$AptName %in% en_si, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_si, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/si_panther_proteomics.csv", 
          row.names = F)

mod_df_si <- create_lm_summary(si_dat, "mm_si", en_si, retained_vars_si, log = T)
create_lm_summary_table_plot(mod_df_si$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_si)`.

```{r echo = F, warning = F, message=F}
mod_si <- mod_df_si$model
kable(glance(mod_si))
plot(mod_si)

# Adjusted R-squared 95% CI
mod_si_specs <- compute_rsq_conf_interval(mod_si)
```

#### Adjusted for age and sex

```{r elastic-net-si-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
si_dat$sexfemale <- ifelse(si_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_si <- as.matrix(cbind(subset(si_dat, select = c("age", "sexfemale")), top_si$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_si_adj <- easy_elasticnet(data = si_dat, 
                               outcome = "mm_si", out = "1se.error",
                               predictors = predictors_si,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_si)-2)))
length(en_si_adj)

retained_vars_si_adj = analytes[analytes$AptName %in% en_si_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_si_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/si_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_si_adj <- create_lm_summary(si_dat, "mm_si", en_si_adj, retained_vars_si_adj, log = T)
create_lm_summary_table_plot(mod_df_si_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_si)`.

```{r echo = F, warning = F, message=F}
mod_si_adj <- mod_df_si_adj$model
kable(glance(mod_si_adj))
plot(mod_si_adj)

# Adjusted R-squared 95% CI
mod_si_adj_specs <- compute_rsq_conf_interval(mod_si_adj)
```

### Beta-cell function

#### Unadjusted model

```{r elastic-net-bcell-unadj, echo = F, warning = F, message=F, results ='asis'}
bcell_dat <- subset(cleanData_panther, !is.na(mm_bcell) & mm_bcell > 0)
top_bcell <- top_associations(bcell_dat, "mm_bcell", analytes, log = T, top_n = 80)

# Elastic net regression
en_bcell <- easy_elasticnet(data = bcell_dat, 
                           outcome = "mm_bcell", 
                           out = "1se.error",
                           predictors = top_bcell$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_bcell)

# Save retained variables from elastic net
retained_vars_bcell = analytes[analytes$AptName %in% en_bcell, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_bcell, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/bcell_panther_proteomics.csv", 
          row.names = F)

mod_df_bcell <- create_lm_summary(bcell_dat, "mm_bcell", en_bcell, retained_vars_bcell, log = T)
create_lm_summary_table_plot(mod_df_bcell$model_df, format = "html")
```

Top 80 proteins included in analysis. No. of proteins identified: `r length(en_bcell)`.

```{r echo = F, warning = F, message=F}
mod_bcell <- mod_df_bcell$model
kable(glance(mod_bcell))
plot(mod_bcell)

# Adjusted R-squared 95% CI
mod_bcell_specs <- compute_rsq_conf_interval(mod_bcell)
```

#### Adjusted for age and sex

```{r elastic-net-bcell-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
bcell_dat$sexfemale <- ifelse(bcell_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_bcell <- as.matrix(cbind(subset(bcell_dat, select = c("age", "sexfemale")), top_bcell$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_bcell_adj <- easy_elasticnet(data = bcell_dat, 
                               outcome = "mm_bcell", out = "1se.error",
                               predictors = predictors_bcell,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_bcell)-2)))
length(en_bcell_adj)

retained_vars_bcell_adj = analytes[analytes$AptName %in% en_bcell_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_bcell_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/bcell_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_bcell_adj <- create_lm_summary(bcell_dat, "mm_bcell", en_bcell_adj, retained_vars_bcell_adj, log = T)
create_lm_summary_table_plot(mod_df_bcell_adj$model_df, format = "html")
```

Top 80 proteins included in analysis. No. of proteins identified: `r length(en_bcell)`.

```{r echo = F, warning = F, message=F}
mod_bcell_adj <- mod_df_bcell_adj$model
kable(glance(mod_bcell_adj))
plot(mod_bcell_adj)

# Adjusted R-squared 95% CI
mod_bcell_adj_specs <- compute_rsq_conf_interval(mod_bcell_adj)
```

### Total Kidney Volume

#### Unadjusted model

```{r elastic-net-tkv-unadj, echo = F, warning = F, message=F, results ='asis'}
tkv_dat <- subset(cleanData_panther, !is.na(total_kidney_volume_ml) & total_kidney_volume_ml > 0)
top_tkv <- top_associations(tkv_dat, "total_kidney_volume_ml", analytes, log = F)

# Elastic net regression
en_tkv <- easy_elasticnet(data = tkv_dat, 
                           outcome = "total_kidney_volume_ml", 
                           out = "1se.error",
                           predictors = top_tkv$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_tkv)

# Save retained variables from elastic net
retained_vars_tkv = analytes[analytes$AptName %in% en_tkv, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_tkv, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/tkv_panther_proteomics.csv", 
          row.names = F)

mod_df_tkv <- create_lm_summary(tkv_dat, "total_kidney_volume_ml", en_tkv, retained_vars_tkv, log = F)
create_lm_summary_table_plot(mod_df_tkv$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_tkv)`.

```{r echo = F, warning = F, message=F}
mod_tkv <- mod_df_tkv$model
kable(glance(mod_tkv))
plot(mod_tkv)

# Adjusted R-squared 95% CI
mod_tkv_specs <- compute_rsq_conf_interval(mod_tkv)
```

#### Adjusted for age and sex

```{r elastic-net-tkv-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
tkv_dat$sexfemale <- ifelse(tkv_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_tkv <- as.matrix(cbind(subset(tkv_dat, select = c("age", "sexfemale")), top_tkv$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_tkv_adj <- easy_elasticnet(data = tkv_dat, 
                               outcome = "total_kidney_volume_ml", out = "1se.error",
                               predictors = predictors_tkv,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_tkv)-2)))
length(en_tkv_adj)

retained_vars_tkv_adj = analytes[analytes$AptName %in% en_tkv_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_tkv_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/tkv_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_tkv_adj <- create_lm_summary(tkv_dat, "total_kidney_volume_ml", en_tkv_adj, retained_vars_tkv_adj, log = F)
create_lm_summary_table_plot(mod_df_tkv_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_tkv)`.

```{r echo = F, warning = F, message=F}
mod_tkv_adj <- mod_df_tkv_adj$model
kable(glance(mod_tkv_adj))
plot(mod_tkv_adj)

# Adjusted R-squared 95% CI
mod_tkv_adj_specs <- compute_rsq_conf_interval(mod_tkv_adj)
```

### Height adjusted TKV

#### Unadjusted model

```{r elastic-net-ht_adj_tkv-unadj, echo = F, warning = F, message=F, results ='asis'}
ht_adj_tkv_dat <- subset(cleanData_panther, !is.na(ht_adj_tkv) & ht_adj_tkv > 0)
top_ht_adj_tkv <- top_associations(ht_adj_tkv_dat, "ht_adj_tkv", analytes, log = F)

# Elastic net regression
en_ht_adj_tkv <- easy_elasticnet(data = ht_adj_tkv_dat, 
                           outcome = "ht_adj_tkv", 
                           out = "1se.error",
                           predictors = top_ht_adj_tkv$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_ht_adj_tkv)

# Save retained variables from elastic net
retained_vars_ht_adj_tkv = analytes[analytes$AptName %in% en_ht_adj_tkv, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_ht_adj_tkv, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/ht_adj_tkv_panther_proteomics.csv", 
          row.names = F)

mod_df_ht_adj_tkv <- create_lm_summary(ht_adj_tkv_dat, "ht_adj_tkv", en_ht_adj_tkv, retained_vars_ht_adj_tkv, log = F)
create_lm_summary_table_plot(mod_df_ht_adj_tkv$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_ht_adj_tkv)`.

```{r echo = F, warning = F, message=F}
mod_ht_adj_tkv <- mod_df_ht_adj_tkv$model
kable(glance(mod_ht_adj_tkv))
plot(mod_ht_adj_tkv)

# Adjusted R-squared 95% CI
mod_ht_adj_tkv_specs <- compute_rsq_conf_interval(mod_ht_adj_tkv)
```

#### Adjusted for age and sex

```{r elastic-net-ht_adj_tkv-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
ht_adj_tkv_dat$sexfemale <- ifelse(ht_adj_tkv_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_ht_adj_tkv <- as.matrix(cbind(subset(ht_adj_tkv_dat, select = c("age", "sexfemale")), top_ht_adj_tkv$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_ht_adj_tkv_adj <- easy_elasticnet(data = ht_adj_tkv_dat, 
                               outcome = "ht_adj_tkv", out = "1se.error",
                               predictors = predictors_ht_adj_tkv,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_ht_adj_tkv)-2)))
length(en_ht_adj_tkv_adj)

retained_vars_ht_adj_tkv_adj = analytes[analytes$AptName %in% en_ht_adj_tkv_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_ht_adj_tkv_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/ht_adj_tkv_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_ht_adj_tkv_adj <- create_lm_summary(ht_adj_tkv_dat, "ht_adj_tkv", en_ht_adj_tkv_adj, retained_vars_ht_adj_tkv_adj, log = F)
create_lm_summary_table_plot(mod_df_ht_adj_tkv_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_ht_adj_tkv)`.

```{r echo = F, warning = F, message=F}
mod_ht_adj_tkv_adj <- mod_df_ht_adj_tkv_adj$model
kable(glance(mod_ht_adj_tkv_adj))
plot(mod_ht_adj_tkv_adj)

# Adjusted R-squared 95% CI
mod_ht_adj_tkv_adj_specs <- compute_rsq_conf_interval(mod_ht_adj_tkv_adj)
```

### GFR (Raw plasma)

#### Unadjusted model

```{r elastic-net-gfr-unadj, echo = F, warning = F, message=F, results ='asis'}
gfr_dat <- subset(cleanData_panther, !is.na(gfr_raw_plasma) & gfr_raw_plasma > 0)
top_gfr <- top_associations(gfr_dat, "gfr_raw_plasma", analytes, log = T, top_n = 80)

# Elastic net regression
en_gfr <- easy_elasticnet(data = gfr_dat, 
                          outcome = "gfr_raw_plasma", 
                          out = "1se.error",
                          predictors = top_gfr$predictors_matrix,
                          cv_method="kfold", 
                          folds = 10)
length(en_gfr)

# Save retained variables from elastic net
retained_vars_gfr = analytes[analytes$AptName %in% en_gfr, 
                             c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_gfr, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_panther_proteomics.csv", 
          row.names = F)

mod_df_gfr <- create_lm_summary(gfr_dat, "gfr_raw_plasma", en_gfr, retained_vars_gfr, log = T)
create_lm_summary_table_plot(mod_df_gfr$model_df, format = "html")
```

Top 80 proteins included in analysis. No. of proteins identified: `r length(en_gfr)`.

```{r echo = F, warning = F, message=F}
mod_gfr <- mod_df_gfr$model
kable(glance(mod_gfr))
plot(mod_gfr)

# Adjusted R-squared 95% CI
mod_gfr_specs <- compute_rsq_conf_interval(mod_gfr)
```

#### Adjusted for age and sex

```{r elastic-net-gfr-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
gfr_dat$sexfemale <- ifelse(gfr_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_gfr <- as.matrix(cbind(subset(gfr_dat, select = c("age", "sexfemale")), top_gfr$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_gfr_adj <- easy_elasticnet(data = gfr_dat, 
                              outcome = "gfr_raw_plasma", out = "1se.error",
                              predictors = predictors_gfr,
                              cv_method="kfold", folds = 10,
                              penalty.factor = c(rep(0,2), rep(1, ncol(predictors_gfr)-2)))
length(en_gfr_adj)

retained_vars_gfr_adj = analytes[analytes$AptName %in% en_gfr_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_gfr_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_gfr_adj <- create_lm_summary(gfr_dat, "gfr_raw_plasma", en_gfr_adj, retained_vars_gfr_adj, log = T)
create_lm_summary_table_plot(mod_df_gfr_adj$model_df, format = "html")
```

Top 80 proteins included in analysis. No. of proteins identified: `r length(en_gfr)`.

```{r echo = F, warning = F, message=F}
mod_gfr_adj <- mod_df_gfr_adj$model
kable(glance(mod_gfr_adj))
plot(mod_gfr_adj)

# Adjusted R-squared 95% CI
mod_gfr_adj_specs <- compute_rsq_conf_interval(mod_gfr_adj)
```

### GFR (BSA plasma)

#### Unadjusted model

```{r elastic-net-gfr_bsa-unadj, echo = F, warning = F, message=F, results ='asis'}
gfr_bsa_dat <- subset(cleanData_panther, !is.na(gfr_bsa_plasma) & gfr_bsa_plasma > 0)
top_gfr_bsa <- top_associations(gfr_bsa_dat, "gfr_bsa_plasma", analytes, log = T)

# Elastic net regression
en_gfr_bsa <- easy_elasticnet(data = gfr_bsa_dat, 
                           outcome = "gfr_bsa_plasma", 
                           out = "1se.error",
                           predictors = top_gfr_bsa$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_gfr_bsa)

# Save retained variables from elastic net
retained_vars_gfr_bsa = analytes[analytes$AptName %in% en_gfr_bsa, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_gfr_bsa, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_bsa_panther_proteomics.csv", 
          row.names = F)

mod_df_gfr_bsa <- create_lm_summary(gfr_bsa_dat, "gfr_bsa_plasma", en_gfr_bsa, retained_vars_gfr_bsa, log = T)
create_lm_summary_table_plot(mod_df_gfr_bsa$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_bsa)`.

```{r echo = F, warning = F, message=F}
mod_gfr_bsa <- mod_df_gfr_bsa$model
kable(glance(mod_gfr_bsa))
plot(mod_gfr_bsa)

# Adjusted R-squared 95% CI
mod_gfr_bsa_specs <- compute_rsq_conf_interval(mod_gfr_bsa)
```

#### Adjusted for age and sex

```{r elastic-net-gfr_bsa-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
gfr_bsa_dat$sexfemale <- ifelse(gfr_bsa_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_gfr_bsa <- as.matrix(cbind(subset(gfr_bsa_dat, select = c("age", "sexfemale")), top_gfr_bsa$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_gfr_bsa_adj <- easy_elasticnet(data = gfr_bsa_dat, 
                               outcome = "gfr_bsa_plasma", out = "1se.error",
                               predictors = predictors_gfr_bsa,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_gfr_bsa)-2)))
length(en_gfr_bsa_adj)

retained_vars_gfr_bsa_adj = analytes[analytes$AptName %in% en_gfr_bsa_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_gfr_bsa_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_bsa_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_gfr_bsa_adj <- create_lm_summary(gfr_bsa_dat, "gfr_bsa_plasma", en_gfr_bsa_adj, retained_vars_gfr_bsa_adj, log = T)
create_lm_summary_table_plot(mod_df_gfr_bsa_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_bsa)`.

```{r echo = F, warning = F, message=F}
mod_gfr_bsa_adj <- mod_df_gfr_bsa_adj$model
kable(glance(mod_gfr_bsa_adj))
plot(mod_gfr_bsa_adj)

# Adjusted R-squared 95% CI
mod_gfr_bsa_adj_specs <- compute_rsq_conf_interval(mod_gfr_bsa_adj)
```

### RPF (Raw plasma)

#### Unadjusted model

```{r elastic-net-rpf-unadj, echo = F, warning = F, message=F, results ='asis'}
rpf_dat <- subset(cleanData_panther, !is.na(erpf_raw_plasma) & erpf_raw_plasma > 0)
top_rpf <- top_associations(rpf_dat, "erpf_raw_plasma", analytes, log = T)

# Elastic net regression
en_rpf <- easy_elasticnet(data = rpf_dat, 
                          outcome = "erpf_raw_plasma", 
                          out = "1se.error",
                          predictors = top_rpf$predictors_matrix,
                          cv_method="kfold", 
                          folds = 10)
length(en_rpf)

# Save retained variables from elastic net
retained_vars_rpf = analytes[analytes$AptName %in% en_rpf, 
                             c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_rpf, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/rpf_panther_proteomics.csv", 
          row.names = F)

mod_df_rpf <- create_lm_summary(rpf_dat, "erpf_raw_plasma", en_rpf, retained_vars_rpf, log = T)
create_lm_summary_table_plot(mod_df_rpf$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_rpf)`.

```{r echo = F, warning = F, message=F}
mod_rpf <- mod_df_rpf$model
kable(glance(mod_rpf))
plot(mod_rpf)

# Adjusted R-squared 95% CI
mod_rpf_specs <- compute_rsq_conf_interval(mod_rpf)
```

#### Adjusted for age and sex

```{r elastic-net-rpf-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
rpf_dat$sexfemale <- ifelse(rpf_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_rpf <- as.matrix(cbind(subset(rpf_dat, select = c("age", "sexfemale")), top_rpf$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_rpf_adj <- easy_elasticnet(data = rpf_dat, 
                              outcome = "erpf_raw_plasma", out = "1se.error",
                              predictors = predictors_rpf,
                              cv_method="kfold", folds = 10,
                              penalty.factor = c(rep(0,2), rep(1, ncol(predictors_rpf)-2)))
length(en_rpf_adj)

retained_vars_rpf_adj = analytes[analytes$AptName %in% en_rpf_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_rpf_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/rpf_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_rpf_adj <- create_lm_summary(rpf_dat, "erpf_raw_plasma", en_rpf_adj, retained_vars_rpf_adj, log = T)
create_lm_summary_table_plot(mod_df_rpf_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_rpf)`.

```{r echo = F, warning = F, message=F}
mod_rpf_adj <- mod_df_rpf_adj$model
kable(glance(mod_rpf_adj))
plot(mod_rpf_adj)

# Adjusted R-squared 95% CI
mod_rpf_adj_specs <- compute_rsq_conf_interval(mod_rpf_adj)
```

### RPF (BSA plasma)

#### Unadjusted model

```{r elastic-net-erpf_bsa-unadj, echo = F, warning = F, message=F, results ='asis'}
erpf_bsa_dat <- subset(cleanData_panther, !is.na(erpf_bsa_plasma) & erpf_bsa_plasma > 0)
top_erpf_bsa <- top_associations(erpf_bsa_dat, "erpf_bsa_plasma", analytes, log = T)

# Elastic net regression
en_erpf_bsa <- easy_elasticnet(data = erpf_bsa_dat, 
                           outcome = "erpf_bsa_plasma", 
                           out = "1se.error",
                           predictors = top_erpf_bsa$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_erpf_bsa)

# Save retained variables from elastic net
retained_vars_erpf_bsa = analytes[analytes$AptName %in% en_erpf_bsa, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

write.csv(retained_vars_erpf_bsa, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/erpf_bsa_panther_proteomics.csv", 
          row.names = F)

mod_df_erpf_bsa <- create_lm_summary(erpf_bsa_dat, "erpf_bsa_plasma", en_erpf_bsa, retained_vars_erpf_bsa, log = T)
create_lm_summary_table_plot(mod_df_erpf_bsa$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_erpf_bsa)`.

```{r echo = F, warning = F, message=F}
mod_erpf_bsa <- mod_df_erpf_bsa$model
kable(glance(mod_erpf_bsa))
plot(mod_erpf_bsa)

# Adjusted R-squared 95% CI
mod_erpf_bsa_specs <- compute_rsq_conf_interval(mod_erpf_bsa)
```

#### Adjusted for age and sex

```{r elastic-net-erpf_bsa-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
erpf_bsa_dat$sexfemale <- ifelse(erpf_bsa_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_erpf_bsa <- as.matrix(cbind(subset(erpf_bsa_dat, select = c("age", "sexfemale")), top_erpf_bsa$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_erpf_bsa_adj <- easy_elasticnet(data = erpf_bsa_dat, 
                               outcome = "erpf_bsa_plasma", out = "1se.error",
                               predictors = predictors_erpf_bsa,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_erpf_bsa)-2)))
length(en_erpf_bsa_adj)

retained_vars_erpf_bsa_adj = analytes[analytes$AptName %in% en_erpf_bsa_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)
write.csv(retained_vars_erpf_bsa_adj, 
          "/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/erpf_bsa_adj_panther_proteomics.csv", 
          row.names = F)

mod_df_erpf_bsa_adj <- create_lm_summary(erpf_bsa_dat, "erpf_bsa_plasma", en_erpf_bsa_adj, retained_vars_erpf_bsa_adj, log = T)
create_lm_summary_table_plot(mod_df_erpf_bsa_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_erpf_bsa)`.

```{r echo = F, warning = F, message=F}
mod_erpf_bsa_adj <- mod_df_erpf_bsa_adj$model
kable(glance(mod_erpf_bsa_adj))
plot(mod_erpf_bsa_adj)

# Adjusted R-squared 95% CI
mod_erpf_bsa_adj_specs <- compute_rsq_conf_interval(mod_erpf_bsa_adj)
```

## Elastic net models combined
#### Unadjusted models

```{r elastic-net-combined-all, echo=F}
elasticnet_combined <- data.frame(r2 = c(mod_airg_specs$rsq_adj, mod_bcell_specs$rsq_adj, mod_di_specs$rsq_adj, mod_si_specs$rsq_adj, mod_tkv_specs$rsq_adj, mod_ht_adj_tkv_specs$rsq_adj, mod_gfr_specs$rsq_adj, mod_gfr_bsa_specs$rsq_adj, mod_rpf_specs$rsq_adj, mod_erpf_bsa_specs$rsq_adj),
                                  lower = c(mod_airg_specs$conf.low, mod_bcell_specs$conf.low, mod_di_specs$conf.low, mod_si_specs$conf.low, mod_tkv_specs$conf.low, mod_ht_adj_tkv_specs$conf.low, mod_gfr_specs$conf.low, mod_gfr_bsa_specs$conf.low, mod_rpf_specs$conf.low, mod_erpf_bsa_specs$conf.low),
                                  upper = c(mod_airg_specs$conf.high, mod_bcell_specs$conf.high, mod_di_specs$conf.high, mod_si_specs$conf.high, mod_tkv_specs$conf.high, mod_ht_adj_tkv_specs$conf.high, mod_gfr_specs$conf.high, mod_gfr_bsa_specs$conf.high, mod_rpf_specs$conf.high, mod_erpf_bsa_specs$conf.high),
                                  Model = c("AIRg", "B-cell", "DI", "SI", "TKV", "Ht-adj TKV", "GFR - Raw", "GFR - BSA", "RPF - Raw", "RPF - BSA"),
                                  No.proteins = c(length(en_airg), length(en_bcell), length(en_di), length(en_si), 
                                                  length(en_tkv), length(en_ht_adj_tkv), length(en_gfr),length(en_gfr_bsa),
                                                  length(en_rpf),length(en_erpf_bsa)))
elasticnet_combined$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined$r2, elasticnet_combined$lower, elasticnet_combined$upper))

forest(data = elasticnet_combined[,c(4:7)], 
       est = elasticnet_combined$r2,
       lower = elasticnet_combined$lower,
       upper = elasticnet_combined$upper, ci_column = 3)
```

```{r elastic-net-combined-ipna, echo=F}
elasticnet_combined_ipna <- data.frame(r2 = c(mod_tkv_specs$rsq_adj, mod_ht_adj_tkv_specs$rsq_adj, mod_gfr_specs$rsq_adj, mod_rpf_specs$rsq_adj),
                                  lower = c(mod_tkv_specs$conf.low, mod_ht_adj_tkv_specs$conf.low, mod_gfr_specs$conf.low, mod_rpf_specs$conf.low),
                                  upper = c(mod_tkv_specs$conf.high, mod_ht_adj_tkv_specs$conf.high, mod_gfr_specs$conf.high, mod_rpf_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR", "RPF"),
                                  No.proteins = c(length(en_tkv), length(en_ht_adj_tkv), length(en_gfr),
                                                  length(en_rpf)))
elasticnet_combined_ipna$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined_ipna$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined_ipna$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined_ipna$r2, elasticnet_combined_ipna$lower, elasticnet_combined_ipna$upper))

forest(data = elasticnet_combined_ipna[,c(4:7)], 
       est = elasticnet_combined_ipna$r2,
       lower = elasticnet_combined_ipna$lower,
       upper = elasticnet_combined_ipna$upper, ci_column = 3)
```

```{r elastic-net-combined-ivgtt, echo=F}
elasticnet_combined_ivgtt <- data.frame(r2 = c(mod_airg_specs$rsq_adj, mod_bcell_specs$rsq_adj, mod_di_specs$rsq_adj, mod_si_specs$rsq_adj, mod_tkv_specs$rsq_adj, mod_ht_adj_tkv_specs$rsq_adj, mod_gfr_specs$rsq_adj, mod_gfr_bsa_specs$rsq_adj, mod_rpf_specs$rsq_adj, mod_erpf_bsa_specs$rsq_adj),
                                  lower = c(mod_airg_specs$conf.low, mod_bcell_specs$conf.low, mod_di_specs$conf.low, mod_si_specs$conf.low, mod_tkv_specs$conf.low, mod_ht_adj_tkv_specs$conf.low, mod_gfr_specs$conf.low, mod_gfr_bsa_specs$conf.low, mod_rpf_specs$conf.low, mod_erpf_bsa_specs$conf.low),
                                  upper = c(mod_airg_specs$conf.high, mod_bcell_specs$conf.high, mod_di_specs$conf.high, mod_si_specs$conf.high, mod_tkv_specs$conf.high, mod_ht_adj_tkv_specs$conf.high, mod_gfr_specs$conf.high, mod_gfr_bsa_specs$conf.high, mod_rpf_specs$conf.high, mod_erpf_bsa_specs$conf.high),
                                  Model = c("AIRg", "B-cell", "DI", "SI", "TKV", "Ht-adj TKV", "GFR - Raw", "GFR - BSA", "RPF - Raw", "RPF - BSA"),
                                  No.proteins = c(length(en_airg), length(en_bcell), length(en_di), length(en_si), 
                                                  length(en_tkv), length(en_ht_adj_tkv), length(en_gfr),length(en_gfr_bsa),
                                                  length(en_rpf),length(en_erpf_bsa)))
elasticnet_combined_ivgtt$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined_ivgtt$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined_ivgtt$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined_ivgtt$r2, elasticnet_combined_ivgtt$lower, elasticnet_combined_ivgtt$upper))

forest(data = elasticnet_combined_ivgtt[,c(4:7)], 
       est = elasticnet_combined_ivgtt$r2,
       lower = elasticnet_combined_ivgtt$lower,
       upper = elasticnet_combined_ivgtt$upper, ci_column = 3)
```

#### Adjusted models by age and sex

```{r elastic-net-combined-all-adj, echo=F}
elasticnet_combined_adj <- data.frame(r2 = c(mod_airg_adj_specs$rsq_adj, mod_bcell_adj_specs$rsq_adj, mod_di_adj_specs$rsq_adj, mod_si_adj_specs$rsq_adj, mod_tkv_adj_specs$rsq_adj, mod_ht_adj_tkv_adj_specs$rsq_adj, mod_gfr_adj_specs$rsq_adj, mod_gfr_bsa_adj_specs$rsq_adj, mod_rpf_adj_specs$rsq_adj, mod_erpf_bsa_adj_specs$rsq_adj),
                                  lower = c(mod_airg_adj_specs$conf.low, mod_bcell_adj_specs$conf.low, mod_di_adj_specs$conf.low, mod_si_adj_specs$conf.low, mod_tkv_adj_specs$conf.low, mod_ht_adj_tkv_adj_specs$conf.low, mod_gfr_adj_specs$conf.low, mod_gfr_bsa_adj_specs$conf.low, mod_rpf_adj_specs$conf.low, mod_erpf_bsa_adj_specs$conf.low),
                                  upper = c(mod_airg_adj_specs$conf.high, mod_bcell_adj_specs$conf.high, mod_di_adj_specs$conf.high, mod_si_adj_specs$conf.high, mod_tkv_adj_specs$conf.high, mod_ht_adj_tkv_adj_specs$conf.high, mod_gfr_adj_specs$conf.high, mod_gfr_bsa_adj_specs$conf.high, mod_rpf_adj_specs$conf.high, mod_erpf_bsa_adj_specs$conf.high),
                                  Model = c("AIRg", "B-cell", "DI", "SI", "TKV", "Ht-adj TKV", "GFR - Raw", "GFR - BSA", "RPF - Raw", "RPF - BSA"),
                                  No.proteins = c(length(en_airg_adj)-2, 
                                                  length(en_bcell_adj)-2, 
                                                  length(en_di_adj)-2, 
                                                  length(en_si_adj)-2, 
                                                  length(en_tkv_adj)-2, 
                                                  length(en_ht_adj_tkv_adj)-2, 
                                                  length(en_gfr_adj)-2,
                                                  length(en_gfr_bsa_adj)-2,
                                                  length(en_rpf_adj)-2,
                                                  length(en_erpf_bsa_adj)-2))
elasticnet_combined_adj$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined_adj$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined_adj$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined_adj$r2, elasticnet_combined_adj$lower, elasticnet_combined_adj$upper))

forest(data = elasticnet_combined_adj[,c(4:7)], 
       est = elasticnet_combined_adj$r2,
       lower = elasticnet_combined_adj$lower,
       upper = elasticnet_combined_adj$upper, ci_column = 3)
```

```{r elastic-net-combined-ipna-adj, echo=F}
elasticnet_combined_adj_ipna <- data.frame(r2 = c(mod_tkv_adj_specs$rsq_adj, mod_ht_adj_tkv_adj_specs$rsq_adj, mod_gfr_adj_specs$rsq_adj, mod_rpf_adj_specs$rsq_adj),
                                  lower = c(mod_tkv_adj_specs$conf.low, mod_ht_adj_tkv_adj_specs$conf.low, mod_gfr_adj_specs$conf.low, mod_rpf_adj_specs$conf.low),
                                  upper = c(mod_tkv_adj_specs$conf.high, mod_ht_adj_tkv_adj_specs$conf.high, mod_gfr_adj_specs$conf.high, mod_rpf_adj_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR", "RPF"),
                                  No.proteins = c(length(en_tkv_adj)-2, 
                                                  length(en_ht_adj_tkv_adj)-2, 
                                                  length(en_gfr_adj)-2, 
                                                  length(en_rpf_adj)-2))
elasticnet_combined_adj_ipna$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined_adj_ipna$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined_adj_ipna$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined_adj_ipna$r2, elasticnet_combined_adj_ipna$lower, elasticnet_combined_adj_ipna$upper))

forest(data = elasticnet_combined_adj_ipna[,c(4:7)], 
       est = elasticnet_combined_adj_ipna$r2,
       lower = elasticnet_combined_adj_ipna$lower,
       upper = elasticnet_combined_adj_ipna$upper, ci_column = 3)
```

```{r elastic-net-combined-ivgtt-adj, echo=F}
elasticnet_combined_adj_ivgtt <- data.frame(r2 = c(mod_airg_adj_specs$rsq_adj, mod_bcell_adj_specs$rsq_adj, mod_di_adj_specs$rsq_adj, mod_si_adj_specs$rsq_adj),
                                  lower = c(mod_airg_adj_specs$conf.low, mod_bcell_adj_specs$conf.low, mod_di_adj_specs$conf.low, mod_si_adj_specs$conf.low),
                                  upper = c(mod_airg_adj_specs$conf.high, mod_bcell_adj_specs$conf.high, mod_di_adj_specs$conf.high, mod_si_adj_specs$conf.high),
                                  Model = c("AIRg", "B-cell", "DI", "SI"),
                                  No.proteins = c(length(en_airg_adj)-2, 
                                                  length(en_bcell_adj)-2, 
                                                  length(en_di_adj)-2, 
                                                  length(en_si_adj)-2))
elasticnet_combined_adj_ivgtt$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
elasticnet_combined_adj_ivgtt$`Adjusted R-squared (95% CI)` <- ifelse(is.na(elasticnet_combined_adj_ivgtt$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     elasticnet_combined_adj_ivgtt$r2, elasticnet_combined_adj_ivgtt$lower, elasticnet_combined_adj_ivgtt$upper))

forest(data = elasticnet_combined_adj_ivgtt[,c(4:7)], 
       est = elasticnet_combined_adj_ivgtt$r2,
       lower = elasticnet_combined_adj_ivgtt$lower,
       upper = elasticnet_combined_adj_ivgtt$upper, ci_column = 3)
```