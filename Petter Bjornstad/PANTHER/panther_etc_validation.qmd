---
title: "panther_etc_validation"
author: "Ye Ji Choi"
date: "`r lubridate::today()`"
format: 
  html:
    toc: true
    toc-depth: 5
    toc-location: left
    code-fold: true
    embed-resources: true
---

# Validation (in RH/RH2/IMP)

```{r libraries, echo=F, include = F}
library(purrr)
library(tidyverse)
library(dplyr)
library(arsenal)
library(ggplot2)
library(tidyr)
library(fgsea)
library(ggrepel)
library(labelled)
library(glmnet)
library(broom)
library(knitr)
library(ensr)
library(kableExtra)
library(gt)
library(psych)
library(growthcleanr)
library(behaviorchange)
library(ppcor)
library(correlation)
library(grid)
library(forestploter)
library(eulerr)
library(UpSetR)
library(ComplexHeatmap)
```

```{r load-data-2, echo = F, include = F}
# Panther + RH + RH2 + IMPROVE data + SOMA scaled (cleanData_comb)
load("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Data_Cleaned/panther+rh+rh2+imp_data_soma_std.RData")
cleanData_comb$sexfemale <- ifelse(cleanData_comb$sex == "female", 1, 0)
retained_vars_tkv <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/tkv_panther_proteomics.csv")
retained_vars_ht_adj_tkv <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/ht_adj_tkv_panther_proteomics.csv")
retained_vars_gfr <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_panther_proteomics.csv")
retained_vars_gfr_bsa <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_bsa_panther_proteomics.csv")
retained_vars_rpf <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/rpf_panther_proteomics.csv")
retained_vars_erpf_bsa <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/erpf_bsa_panther_proteomics.csv")

retained_vars_tkv_adj <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/tkv_adj_panther_proteomics.csv")
retained_vars_ht_adj_tkv_adj <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/ht_adj_tkv_adj_panther_proteomics.csv")
retained_vars_gfr_adj <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_adj_panther_proteomics.csv")
retained_vars_gfr_bsa_adj <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/gfr_bsa_adj_panther_proteomics.csv")
retained_vars_rpf_adj <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/rpf_adj_panther_proteomics.csv")
retained_vars_erpf_bsa_adj <- read.csv("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Results/Proteomics/erpf_bsa_panther_proteomics.csv")
# Load elastic net function
source("/Users/choiyej/GitHub/CHCO-Code/Petter Bjornstad/TODAY proteomics metabolomics/Proteomics analyses/Elastic net/easy_elasticnet.R")
# Load SOMAScan analytes data (analytes)
load("/Volumes/Peds Endo/Petter Bjornstad/PANTHER/Data_Cleaned/panther_analytes.RData")
```

```{r include = F}
top_associations <- function(data, response_var, analyte_filter, top_n = 100, adjust_method = "fdr", covariates = NULL, log = F) {
  
  # Filter data based on specified criteria
  filtered_data <- data %>%
    filter(!is.na(!!sym(response_var)) & !!sym(response_var) > 0)
  
  # Identify analyte columns (those containing 'seq')
  is_seq <- function(.x) grepl("seq", .x)
  seq_cols <- is_seq(names(filtered_data))
  predictors <- colnames(filtered_data[seq_cols])
  
  # Initialize result storage
  result <- NULL
  
  # Loop through each predictor and fit a model
  for (i in 1:length(predictors)) {
    if(log){ 
      form <- paste0("log(", response_var, ") ~ ", predictors[i])}
    if(!log){
      form <- paste0(response_var, "~ ", predictors[i])}
    mod <- lm(data = filtered_data, formula = as.formula(form))
    tidymod <- tidy(mod, exponentiate = FALSE, conf.int = TRUE)
    tidymod <- tidymod[2, ]  # Keep only the predictor row
    result <- rbind(result, tidymod)
  }
  
  # Adjust p-values
  result$adj.p.value <- p.adjust(result$p.value, method = adjust_method)
  
  # Rename and merge with analyte metadata
  result$AptName <- result$term
  result$term <- NULL
  result <- merge(result, analyte_filter, by = "AptName", all.x = TRUE)
  
  # Order by p-value and select top N results
  result <- result[order(result$p.value), ]
  result_100 <- head(result, top_n)$AptName
  
  # Create the final matrix of predictors, including 'age'
  predictors_matrix <- as.matrix(subset(filtered_data, select = c(covariates, result_100)))
  
  return(list(top_associations = result, predictors_matrix = predictors_matrix))
}

create_lm_summary <- function(data, response_var, predictors, retained_vars, log = F) {
  
  # Create formula for the linear model
  if(log){
    form <- as.formula(paste0("log(", response_var, ") ~ ", paste0(predictors, collapse = "+")))
  }
  if(!log){
    form <- as.formula(paste0(response_var, " ~ ", paste0(predictors, collapse = "+")))
  }
  
  # Fit the linear model
  model <- lm(formula = form, data = data)
  
  # Tidy the model output and convert to a data frame
  model_df <- as.data.frame(tidy(model, exponentiate = FALSE, conf.int = TRUE), digits = 3)
  
  # Left join with retained variables (retained_vars) and handle missing values for Target_nodup and TargetFullName
  model_df <- model_df %>%
    left_join(retained_vars, by = "term") %>%
    dplyr::mutate(
      Target_nodup = case_when(is.na(Target_nodup) ~ term, TRUE ~ Target_nodup),
      TargetFullName = case_when(is.na(TargetFullName) ~ term, TRUE ~ TargetFullName)
    ) %>%
    dplyr::select(Target_nodup, TargetFullName, estimate, std.error, statistic, p.value, conf.low, conf.high)
  
  return(list(model = model, model_df = model_df))
}

create_lm_summary_table_plot <- function(model_df, digits = 3, ...) {
  
  # Generate a sorted table using kable
  sorted_table <- kable(arrange(model_df, p.value), digits = digits, ...)
  
  # Create the plot, excluding the first row (usually the intercept)
  plot <- ggplot(model_df[-1,], 
                 aes(estimate, 
                     reorder(sub("\\(.*", "", Target_nodup), dplyr::desc(p.value)), 
                     xmin = conf.low, 
                     xmax = conf.high, 
                     height = 0)) +
    geom_point() +
    geom_vline(xintercept = 0, lty = 4) +
    geom_errorbarh() +
    labs(y = NULL, x = "Estimate") +
    theme_minimal()
  
  return(list(table = sorted_table, plot = plot))
}

compute_rsq_conf_interval <- function(model, conf.level = 0.95) {
  
  # Calculate z-score for the specified confidence level
  z <- qnorm(1 - (1 - conf.level) / 2)
  
  # Extract necessary model statistics
  rsq <- summary(model)$adj.r.squared
  k <- ncol(model$model) - 1  # Number of predictors
  n <- model$df.residual + k + 1  # Total sample size
  
  # Compute the standard error of adjusted R-squared
  rsq_se <- sqrt((4 * rsq * (1 - rsq)^2 * (n - k - 1)^2) / ((n^2 - 1) * (3 + n)))
  
  # Calculate lower and upper limits of the confidence interval
  LL <- rsq - z * rsq_se
  UL <- rsq + z * rsq_se
  
  return(list(
    rsq_adj = rsq,
    rsq_se = rsq_se,
    conf.low = LL,
    conf.high = UL
  ))
}

```

## Approach 1

Validate the multi-protein signatures identified in PANTHER to explain the variance in htTKV, TKV, GFR and RPF in pooled a RH/RH2/IT2D sample set. If the multi-protein signatures identified in PANTHER do not explain the variance in htTKV, TKV, GFR and RPF in a mostly TS5 cohort (RH/RH2/IT2D), this might be ascribed to differences in pubertal status, which is interesting! However, if they perform well the proteins are likely not puberty related.

### Total Kidney Volume
#### Unadjusted
```{r tkv-validation, echo = F, results= 'asis'}
tkv_val_dat <- subset(cleanData_comb, !is.na(combined_tkv))
mod_df_tkv_val <- create_lm_summary(tkv_val_dat, "combined_tkv", retained_vars_tkv$term, retained_vars_tkv)
create_lm_summary_table_plot(mod_df_tkv_val$model_df, format = "html")

mod_tkv_val <- mod_df_tkv_val$model
kable(glance(mod_tkv_val))
plot(mod_tkv_val)

# Adjusted R-squared 95% CI
mod_tkv_val_specs <- compute_rsq_conf_interval(mod_tkv_val)
```
#### Adjusted for age and sex
```{r tkv-validation-adj, echo = F, results= 'asis'}
mod_df_tkv_val_adj <- create_lm_summary(tkv_val_dat, "combined_tkv", c("age", "sexfemale", retained_vars_tkv_adj$term), retained_vars_tkv_adj)
create_lm_summary_table_plot(mod_df_tkv_val_adj$model_df, format = "html")

mod_tkv_val_adj <- mod_df_tkv_val_adj$model
kable(glance(mod_tkv_val_adj))
plot(mod_tkv_val_adj)

# Adjusted R-squared 95% CI
mod_tkv_val_adj_specs <- compute_rsq_conf_interval(mod_tkv_val_adj)
```

### Height adjusted TKV
#### Unadjusted
```{r ht-adj-tkv-validation, echo = F, results= 'asis'}
ht_tkv_val_dat <- subset(cleanData_comb, !is.na(combined_ht_tkv))
mod_df_ht_tkv_val <- create_lm_summary(ht_tkv_val_dat, "combined_ht_tkv", retained_vars_ht_adj_tkv$term, retained_vars_ht_adj_tkv)
create_lm_summary_table_plot(mod_df_ht_tkv_val$model_df, format = "html")

mod_ht_tkv_val <- mod_df_ht_tkv_val$model
kable(glance(mod_ht_tkv_val))
plot(mod_ht_tkv_val)

# Adjusted R-squared 95% CI
mod_ht_tkv_val_specs <- compute_rsq_conf_interval(mod_ht_tkv_val)
```

#### Adjusted for age and sex
```{r ht-adj-tkv-validation-adj, echo = F, results= 'asis'}
mod_df_ht_tkv_val_adj <- create_lm_summary(ht_tkv_val_dat, "combined_ht_tkv", c("age", "sexfemale", retained_vars_ht_adj_tkv$term), retained_vars_ht_adj_tkv)
create_lm_summary_table_plot(mod_df_ht_tkv_val_adj$model_df, format = "html")

mod_ht_tkv_val_adj <- mod_df_ht_tkv_val_adj$model
kable(glance(mod_ht_tkv_val_adj))
plot(mod_ht_tkv_val_adj)

# Adjusted R-squared 95% CI
mod_ht_tkv_val_adj_specs <- compute_rsq_conf_interval(mod_ht_tkv_val_adj)
```

### GFR (Raw plasma)
#### Unadjusted
```{r gfr-validation, echo = F, results= 'asis'}
gfr_val_dat <- subset(cleanData_comb, !is.na(gfr_raw_plasma))
mod_df_gfr_val <- create_lm_summary(gfr_val_dat, "gfr_raw_plasma", retained_vars_gfr$term, retained_vars_gfr)
create_lm_summary_table_plot(mod_df_gfr_val$model_df, format = "html")

mod_gfr_val <- mod_df_gfr_val$model
kable(glance(mod_gfr_val))
plot(mod_gfr_val)

# Adjusted R-squared 95% CI
mod_gfr_val_specs <- compute_rsq_conf_interval(mod_gfr_val)
```
#### Adjusted for age and sex
```{r gfr-validation-adj, echo = F, results= 'asis'}
mod_df_gfr_val_adj <- create_lm_summary(gfr_val_dat, "gfr_raw_plasma", c("age", "sexfemale", retained_vars_gfr_adj$term), retained_vars_gfr_adj)
create_lm_summary_table_plot(mod_df_gfr_val_adj$model_df, format = "html")

mod_gfr_val_adj <- mod_df_gfr_val_adj$model
kable(glance(mod_gfr_val_adj))
plot(mod_gfr_val_adj)

# Adjusted R-squared 95% CI
mod_gfr_val_adj_specs <- compute_rsq_conf_interval(mod_gfr_val_adj)
```

### GFR (BSA plasma)

#### Unadjusted
```{r gfr-bsa-validation, echo = F, results= 'asis'}
gfr_bsa_val_dat <- subset(cleanData_comb, !is.na(gfr_bsa_plasma))
mod_df_gfr_bsa_val <- create_lm_summary(gfr_bsa_val_dat, "gfr_bsa_plasma", retained_vars_gfr_bsa$term, retained_vars_gfr_bsa)
create_lm_summary_table_plot(mod_df_gfr_bsa_val$model_df, format = "html")

mod_gfr_bsa_val <- mod_df_gfr_bsa_val$model
kable(glance(mod_gfr_bsa_val))
plot(mod_gfr_bsa_val)

# Adjusted R-squared 95% CI
mod_gfr_bsa_val_specs <- compute_rsq_conf_interval(mod_gfr_bsa_val)
```
#### Adjusted for age and sex
```{r gfr-bsa-validation-adj, echo = F, results= 'asis'}
mod_df_gfr_bsa_val_adj <- create_lm_summary(gfr_bsa_val_dat, "gfr_bsa_plasma", c("age", "sexfemale", retained_vars_gfr_bsa_adj$term), retained_vars_gfr_bsa_adj)
create_lm_summary_table_plot(mod_df_gfr_bsa_val_adj$model_df, format = "html")

mod_gfr_bsa_val_adj <- mod_df_gfr_bsa_val_adj$model
kable(glance(mod_gfr_bsa_val_adj))
plot(mod_gfr_bsa_val_adj)

# Adjusted R-squared 95% CI
mod_gfr_bsa_val_adj_specs <- compute_rsq_conf_interval(mod_gfr_bsa_val_adj)
```

### RPF (Raw plasma)
#### Unadjusted
```{r rpf-validation, echo = F, results= 'asis'}
rpf_val_dat <- subset(cleanData_comb, !is.na(erpf_raw_plasma))
mod_df_rpf_val <- create_lm_summary(rpf_val_dat, "erpf_raw_plasma", retained_vars_rpf$term, retained_vars_rpf)
create_lm_summary_table_plot(mod_df_rpf_val$model_df, format = "html")

mod_rpf_val <- mod_df_rpf_val$model
kable(glance(mod_rpf_val))
plot(mod_rpf_val)

# Adjusted R-squared 95% CI
mod_rpf_val_specs <- compute_rsq_conf_interval(mod_rpf_val)
```
#### Adjusted for age and sex
```{r rpf-validation-adj, echo = F, results= 'asis'}
mod_df_rpf_val_adj <- create_lm_summary(rpf_val_dat, "erpf_raw_plasma", c("age", "sexfemale", retained_vars_rpf_adj$term), retained_vars_rpf_adj)
create_lm_summary_table_plot(mod_df_rpf_val_adj$model_df, format = "html")

mod_rpf_val_adj <- mod_df_rpf_val_adj$model
kable(glance(mod_rpf_val_adj))
plot(mod_rpf_val_adj)

# Adjusted R-squared 95% CI
mod_rpf_val_adj_specs <- compute_rsq_conf_interval(mod_rpf_val_adj)
```

### RPF (BSA plasma)

#### Unadjusted
```{r rpf-bsa-validation, echo = F, results= 'asis'}
erpf_bsa_val_dat <- subset(cleanData_comb, !is.na(erpf_bsa_plasma))
mod_df_erpf_bsa_val <- create_lm_summary(erpf_bsa_val_dat, "erpf_bsa_plasma", retained_vars_erpf_bsa$term, retained_vars_erpf_bsa)
create_lm_summary_table_plot(mod_df_erpf_bsa_val$model_df, format = "html")

mod_erpf_bsa_val <- mod_df_erpf_bsa_val$model
kable(glance(mod_erpf_bsa_val))
plot(mod_erpf_bsa_val)

# Adjusted R-squared 95% CI
mod_erpf_bsa_val_specs <- compute_rsq_conf_interval(mod_erpf_bsa_val)
```
#### Adjusted for age and sex
```{r rpf-bsa-validation-adj, echo = F, results= 'asis'}
mod_df_erpf_bsa_val_adj <- create_lm_summary(erpf_bsa_val_dat, "erpf_bsa_plasma", c("age", "sexfemale", retained_vars_erpf_bsa_adj$term), retained_vars_erpf_bsa_adj)
create_lm_summary_table_plot(mod_df_erpf_bsa_val_adj$model_df, format = "html")

mod_erpf_bsa_val_adj <- mod_df_erpf_bsa_val_adj$model
kable(glance(mod_erpf_bsa_val_adj))
plot(mod_erpf_bsa_val_adj)

# Adjusted R-squared 95% CI
mod_erpf_bsa_val_adj_specs <- compute_rsq_conf_interval(mod_erpf_bsa_val_adj)
```

## Model comparison
#### Unadjusted
```{r models-combined-val-all, echo=F}
validation_combined <- data.frame(r2 = c(mod_tkv_val_specs$rsq_adj, mod_ht_tkv_val_adj_specs$rsq_adj, mod_gfr_val_specs$rsq_adj, mod_gfr_bsa_val_specs$rsq_adj, mod_rpf_val_specs$rsq_adj, mod_erpf_bsa_val_specs$rsq_adj),
                                  lower = c(mod_tkv_val_specs$conf.low, mod_ht_tkv_val_adj_specs$conf.low, mod_gfr_val_specs$conf.low, mod_gfr_bsa_val_specs$conf.low, mod_rpf_val_specs$conf.low, mod_erpf_bsa_val_specs$conf.low),
                                  upper = c(mod_tkv_val_specs$conf.high, mod_ht_tkv_val_adj_specs$conf.high, mod_gfr_val_specs$conf.high, mod_gfr_bsa_val_specs$conf.high, mod_rpf_val_specs$conf.high, mod_erpf_bsa_val_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR-Raw", "GFR-BSA", "RPF-Raw", "RPF-BSA"),
                                  No.proteins = c(nrow(retained_vars_tkv), 
                                                  nrow(retained_vars_ht_adj_tkv), 
                                                  nrow(retained_vars_gfr), 
                                                  nrow(retained_vars_gfr_bsa), 
                                                  nrow(retained_vars_rpf), 
                                                  nrow(retained_vars_erpf_bsa)))
validation_combined$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
validation_combined$`Adjusted R-squared (95% CI)` <- ifelse(is.na(validation_combined$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     validation_combined$r2, validation_combined$lower, validation_combined$upper))
forest(data = validation_combined[,c(4:7)], 
       est = validation_combined$r2,
       lower = validation_combined$lower,
       upper = validation_combined$upper, ci_column = 3)
```

```{r models-combined-val-ipna, echo=F}
validation_combined_ipna <- data.frame(r2 = c(mod_tkv_val_specs$rsq_adj, mod_ht_tkv_val_adj_specs$rsq_adj, mod_gfr_val_specs$rsq_adj, mod_rpf_val_specs$rsq_adj),
                                  lower = c(mod_tkv_val_specs$conf.low, mod_ht_tkv_val_adj_specs$conf.low, mod_gfr_val_specs$conf.low, mod_rpf_val_specs$conf.low),
                                  upper = c(mod_tkv_val_specs$conf.high, mod_ht_tkv_val_adj_specs$conf.high, mod_gfr_val_specs$conf.high, mod_rpf_val_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR", "RPF"),
                                  No.proteins = c(nrow(retained_vars_tkv), 
                                                  nrow(retained_vars_ht_adj_tkv), 
                                                  nrow(retained_vars_gfr), 
                                                  nrow(retained_vars_rpf)))
validation_combined_ipna$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
validation_combined_ipna$`Adjusted R-squared (95% CI)` <- ifelse(is.na(validation_combined_ipna$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     validation_combined_ipna$r2, validation_combined_ipna$lower, validation_combined_ipna$upper))
forest(data = validation_combined_ipna[,c(4:7)], 
       est = validation_combined_ipna$r2,
       lower = validation_combined_ipna$lower,
       upper = validation_combined_ipna$upper, ci_column = 3)
```

#### Adjusted for age and sex
```{r models-combined-val-all-adj, echo=F}
validation_combined_adj <- data.frame(r2 = c(mod_tkv_val_adj_specs$rsq_adj, mod_ht_tkv_val_adj_specs$rsq_adj, mod_gfr_val_adj_specs$rsq_adj, mod_gfr_bsa_val_adj_specs$rsq_adj, mod_rpf_val_adj_specs$rsq_adj, mod_erpf_bsa_val_adj_specs$rsq_adj),
                                  lower = c(mod_tkv_val_adj_specs$conf.low, mod_ht_tkv_val_adj_specs$conf.low, mod_gfr_val_adj_specs$conf.low, mod_gfr_bsa_val_adj_specs$conf.low, mod_rpf_val_adj_specs$conf.low, mod_erpf_bsa_val_adj_specs$conf.low),
                                  upper = c(mod_tkv_val_adj_specs$conf.high, mod_ht_tkv_val_adj_specs$conf.high, mod_gfr_val_adj_specs$conf.high, mod_gfr_bsa_val_adj_specs$conf.high, mod_rpf_val_adj_specs$conf.high, mod_erpf_bsa_val_adj_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR-Raw", "GFR-BSA", "RPF-Raw", "RPF-BSA"),
                                  No.proteins = c(nrow(retained_vars_tkv_adj), 
                                                  nrow(retained_vars_ht_adj_tkv_adj), 
                                                  nrow(retained_vars_gfr_adj), 
                                                  nrow(retained_vars_gfr_bsa_adj), 
                                                  nrow(retained_vars_rpf_adj), 
                                                  nrow(retained_vars_erpf_bsa_adj)))
validation_combined_adj$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
validation_combined_adj$`Adjusted R-squared (95% CI)` <- ifelse(is.na(validation_combined_adj$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     validation_combined_adj$r2, validation_combined_adj$lower, validation_combined_adj$upper))
forest(data = validation_combined_adj[,c(4:7)], 
       est = validation_combined_adj$r2,
       lower = validation_combined_adj$lower,
       upper = validation_combined_adj$upper, ci_column = 3)
```
```{r models-combined-val-ipna-adj, echo=F}
validation_combined_adj_ipna <- data.frame(r2 = c(mod_tkv_val_adj_specs$rsq_adj, mod_ht_tkv_val_adj_specs$rsq_adj, mod_gfr_val_adj_specs$rsq_adj,  mod_rpf_val_adj_specs$rsq_adj),
                                  lower = c(mod_tkv_val_adj_specs$conf.low, mod_ht_tkv_val_adj_specs$conf.low, mod_gfr_val_adj_specs$conf.low,  mod_rpf_val_adj_specs$conf.low),
                                  upper = c(mod_tkv_val_adj_specs$conf.high, mod_ht_tkv_val_adj_specs$conf.high, mod_gfr_val_adj_specs$conf.high,  mod_rpf_val_adj_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR", "RPF"),
                                  No.proteins = c(nrow(retained_vars_tkv_adj), 
                                                  nrow(retained_vars_ht_adj_tkv_adj), 
                                                  nrow(retained_vars_gfr_adj), 
                                                  nrow(retained_vars_rpf_adj)))
validation_combined_adj_ipna$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
validation_combined_adj_ipna$`Adjusted R-squared (95% CI)` <- ifelse(is.na(validation_combined_adj_ipna$r2), "",
                             sprintf("%.2f (%.2f to %.2f)",
                                     validation_combined_adj_ipna$r2, validation_combined_adj_ipna$lower, validation_combined_adj_ipna$upper))
forest(data = validation_combined_adj_ipna[,c(4:7)], 
       est = validation_combined_adj_ipna$r2,
       lower = validation_combined_adj_ipna$lower,
       upper = validation_combined_adj_ipna$upper, ci_column = 3)
```

# Elastic net for RH/RH2/IMPROVE

```{r echo = F}
cleanData_others <- cleanData_comb %>% filter(study != "PANTHER")
```


### Total Kidney Volume

#### Unadjusted model

```{r elastic-net-tkv_others-unadj, echo = F, warning = F, message=F, results ='asis'}
tkv_others_dat <- subset(cleanData_others, !is.na(total_kidney_volume_ml) & total_kidney_volume_ml > 0)
top_tkv_others <- top_associations(tkv_others_dat, "total_kidney_volume_ml", analytes, log = F)

# Elastic net regression
en_tkv_others <- easy_elasticnet(data = tkv_others_dat, 
                           outcome = "total_kidney_volume_ml", 
                           out = "1se.error",
                           predictors = top_tkv_others$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_tkv_others)

# Save retained variables from elastic net
retained_vars_tkv_others = analytes[analytes$AptName %in% en_tkv_others, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_tkv_others <- create_lm_summary(tkv_others_dat, "total_kidney_volume_ml", en_tkv_others, retained_vars_tkv_others, log = F)
create_lm_summary_table_plot(mod_df_tkv_others$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_tkv_others)`.

```{r echo = F, warning = F, message=F}
mod_tkv_others <- mod_df_tkv_others$model
kable(glance(mod_tkv_others))
plot(mod_tkv_others)

# Adjusted R-squared 95% CI
mod_tkv_others_specs <- compute_rsq_conf_interval(mod_tkv_others)
```

#### Adjusted for age and sex

```{r elastic-net-tkv_others-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
tkv_others_dat$sexfemale <- ifelse(tkv_others_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_tkv_others <- as.matrix(cbind(subset(tkv_others_dat, select = c("age", "sexfemale")), top_tkv_others$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_tkv_others_adj <- easy_elasticnet(data = tkv_others_dat, 
                               outcome = "total_kidney_volume_ml", out = "1se.error",
                               predictors = predictors_tkv_others,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_tkv_others)-2)))
length(en_tkv_others_adj)

retained_vars_tkv_others_adj = analytes[analytes$AptName %in% en_tkv_others_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_tkv_others_adj <- create_lm_summary(tkv_others_dat, "total_kidney_volume_ml", en_tkv_others_adj, retained_vars_tkv_others_adj, log = F)
create_lm_summary_table_plot(mod_df_tkv_others_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_tkv_others)`.

```{r echo = F, warning = F, message=F}
mod_tkv_others_adj <- mod_df_tkv_others_adj$model
kable(glance(mod_tkv_others_adj))
plot(mod_tkv_others_adj)

# Adjusted R-squared 95% CI
mod_tkv_others_adj_specs <- compute_rsq_conf_interval(mod_tkv_others_adj)
```




### Height adjusted TKV
#### Unadjusted model
```{r elastic-net-ht_adj_tkv_others-unadj, echo = F, warning = F, message=F, results ='asis'}
ht_adj_tkv_others_dat <- subset(cleanData_others, !is.na(ht_adj_tkv) & ht_adj_tkv > 0)
top_ht_adj_tkv_others <- top_associations(ht_adj_tkv_others_dat, "ht_adj_tkv", analytes, log = F)

# Elastic net regression
en_ht_adj_tkv_others <- easy_elasticnet(data = ht_adj_tkv_others_dat, 
                           outcome = "ht_adj_tkv", 
                           out = "1se.error",
                           predictors = top_ht_adj_tkv_others$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_ht_adj_tkv_others)

# Save retained variables from elastic net
retained_vars_ht_adj_tkv_others = analytes[analytes$AptName %in% en_ht_adj_tkv_others, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_ht_adj_tkv_others <- create_lm_summary(ht_adj_tkv_others_dat, "ht_adj_tkv", en_ht_adj_tkv_others, retained_vars_ht_adj_tkv_others, log = F)
create_lm_summary_table_plot(mod_df_ht_adj_tkv_others$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_ht_adj_tkv_others)`.

```{r echo = F, warning = F, message=F}
mod_ht_adj_tkv_others <- mod_df_ht_adj_tkv_others$model
kable(glance(mod_ht_adj_tkv_others))
plot(mod_ht_adj_tkv_others)

# Adjusted R-squared 95% CI
mod_ht_adj_tkv_others_specs <- compute_rsq_conf_interval(mod_ht_adj_tkv_others)
```

#### Adjusted for age and sex

```{r elastic-net-ht_adj_tkv_others-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
ht_adj_tkv_others_dat$sexfemale <- ifelse(ht_adj_tkv_others_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_ht_adj_tkv_others <- as.matrix(cbind(subset(ht_adj_tkv_others_dat, select = c("age", "sexfemale")), top_ht_adj_tkv_others$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_ht_adj_tkv_others_adj <- easy_elasticnet(data = ht_adj_tkv_others_dat, 
                               outcome = "ht_adj_tkv", out = "1se.error",
                               predictors = predictors_ht_adj_tkv_others,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_ht_adj_tkv_others)-2)))
length(en_ht_adj_tkv_others_adj)

retained_vars_ht_adj_tkv_others_adj = analytes[analytes$AptName %in% en_ht_adj_tkv_others_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_ht_adj_tkv_others_adj <- create_lm_summary(ht_adj_tkv_others_dat, "ht_adj_tkv", en_ht_adj_tkv_others_adj, retained_vars_ht_adj_tkv_others_adj, log = F)
create_lm_summary_table_plot(mod_df_ht_adj_tkv_others_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_ht_adj_tkv_others)`.

```{r echo = F, warning = F, message=F}
mod_ht_adj_tkv_others_adj <- mod_df_ht_adj_tkv_others_adj$model
kable(glance(mod_ht_adj_tkv_others_adj))
plot(mod_ht_adj_tkv_others_adj)

# Adjusted R-squared 95% CI
mod_ht_adj_tkv_others_adj_specs <- compute_rsq_conf_interval(mod_ht_adj_tkv_others_adj)
```

### GFR (Raw plasma)
#### Unadjusted model

```{r elastic-net-gfr_others-unadj, echo = F, warning = F, message=F, results ='asis'}
gfr_others_dat <- subset(cleanData_others, !is.na(gfr_raw_plasma) & gfr_raw_plasma > 0)
top_gfr_others <- top_associations(gfr_others_dat, "gfr_raw_plasma", analytes, log = T, top_n = 100)

# Elastic net regression
en_gfr_others <- easy_elasticnet(data = gfr_others_dat, 
                          outcome = "gfr_raw_plasma", 
                          out = "1se.error",
                          predictors = top_gfr_others$predictors_matrix,
                          cv_method="kfold", 
                          folds = 10)
length(en_gfr_others)

# Save retained variables from elastic net
retained_vars_gfr_others = analytes[analytes$AptName %in% en_gfr_others, 
                             c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_others <- create_lm_summary(gfr_others_dat, "gfr_raw_plasma", en_gfr_others, retained_vars_gfr_others, log = T)
create_lm_summary_table_plot(mod_df_gfr_others$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_others)`.

```{r echo = F, warning = F, message=F}
mod_gfr_others <- mod_df_gfr_others$model
kable(glance(mod_gfr_others))
plot(mod_gfr_others)

# Adjusted R-squared 95% CI
mod_gfr_others_specs <- compute_rsq_conf_interval(mod_gfr_others)
```

#### Adjusted for age and sex

```{r elastic-net-gfr_others-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
gfr_others_dat$sexfemale <- ifelse(gfr_others_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_gfr_others <- as.matrix(cbind(subset(gfr_others_dat, select = c("age", "sexfemale")), top_gfr_others$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_gfr_others_adj <- easy_elasticnet(data = gfr_others_dat, 
                              outcome = "gfr_raw_plasma", out = "1se.error",
                              predictors = predictors_gfr_others,
                              cv_method="kfold", folds = 10,
                              penalty.factor = c(rep(0,2), rep(1, ncol(predictors_gfr_others)-2)))
length(en_gfr_others_adj)

retained_vars_gfr_others_adj = analytes[analytes$AptName %in% en_gfr_others_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_others_adj <- create_lm_summary(gfr_others_dat, "gfr_raw_plasma", en_gfr_others_adj, retained_vars_gfr_others_adj, log = T)
create_lm_summary_table_plot(mod_df_gfr_others_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_others)`.

```{r echo = F, warning = F, message=F}
mod_gfr_others_adj <- mod_df_gfr_others_adj$model
kable(glance(mod_gfr_others_adj))
plot(mod_gfr_others_adj)

# Adjusted R-squared 95% CI
mod_gfr_others_adj_specs <- compute_rsq_conf_interval(mod_gfr_others_adj)
```

### GFR (BSA plasma)

#### Unadjusted model

```{r elastic-net-gfr_others_bsa-unadj, echo = F, warning = F, message=F, results ='asis'}
gfr_others_bsa_dat <- subset(cleanData_others, !is.na(gfr_bsa_plasma) & gfr_bsa_plasma > 0)
top_gfr_others_bsa <- top_associations(gfr_others_bsa_dat, "gfr_bsa_plasma", analytes, log = T)

# Elastic net regression
en_gfr_others_bsa <- easy_elasticnet(data = gfr_others_bsa_dat, 
                           outcome = "gfr_bsa_plasma", 
                           out = "1se.error",
                           predictors = top_gfr_others_bsa$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_gfr_others_bsa)

# Save retained variables from elastic net
retained_vars_gfr_others_bsa = analytes[analytes$AptName %in% en_gfr_others_bsa, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_others_bsa <- create_lm_summary(gfr_others_bsa_dat, "gfr_bsa_plasma", en_gfr_others_bsa, retained_vars_gfr_others_bsa, log = T)
create_lm_summary_table_plot(mod_df_gfr_others_bsa$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_others_bsa)`.

```{r echo = F, warning = F, message=F}
mod_gfr_others_bsa <- mod_df_gfr_others_bsa$model
kable(glance(mod_gfr_others_bsa))
plot(mod_gfr_others_bsa)

# Adjusted R-squared 95% CI
mod_gfr_others_bsa_specs <- compute_rsq_conf_interval(mod_gfr_others_bsa)
```

#### Adjusted for age and sex

```{r elastic-net-gfr_others_bsa-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
gfr_others_bsa_dat$sexfemale <- ifelse(gfr_others_bsa_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_gfr_others_bsa <- as.matrix(cbind(subset(gfr_others_bsa_dat, select = c("age", "sexfemale")), top_gfr_others_bsa$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_gfr_others_bsa_adj <- easy_elasticnet(data = gfr_others_bsa_dat, 
                               outcome = "gfr_bsa_plasma", out = "1se.error",
                               predictors = predictors_gfr_others_bsa,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_gfr_others_bsa)-2)))
length(en_gfr_others_bsa_adj)

retained_vars_gfr_others_bsa_adj = analytes[analytes$AptName %in% en_gfr_others_bsa_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_others_bsa_adj <- create_lm_summary(gfr_others_bsa_dat, "gfr_bsa_plasma", en_gfr_others_bsa_adj, retained_vars_gfr_others_bsa_adj, log = T)
create_lm_summary_table_plot(mod_df_gfr_others_bsa_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_others_bsa)`.

```{r echo = F, warning = F, message=F}
mod_gfr_others_bsa_adj <- mod_df_gfr_others_bsa_adj$model
kable(glance(mod_gfr_others_bsa_adj))
plot(mod_gfr_others_bsa_adj)

# Adjusted R-squared 95% CI
mod_gfr_others_bsa_adj_specs <- compute_rsq_conf_interval(mod_gfr_others_bsa_adj)
```

### RPF (Raw plasma)

#### Unadjusted model

```{r elastic-net-rpf_others-unadj, echo = F, warning = F, message=F, results ='asis'}
rpf_others_dat <- subset(cleanData_others, !is.na(erpf_raw_plasma) & erpf_raw_plasma > 0)
top_rpf_others <- top_associations(rpf_others_dat, "erpf_raw_plasma", analytes, log = T)

# Elastic net regression
en_rpf_others <- easy_elasticnet(data = rpf_others_dat, 
                          outcome = "erpf_raw_plasma", 
                          out = "1se.error",
                          predictors = top_rpf_others$predictors_matrix,
                          cv_method="kfold", 
                          folds = 10)
length(en_rpf_others)

# Save retained variables from elastic net
retained_vars_rpf_others = analytes[analytes$AptName %in% en_rpf_others, 
                             c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_rpf_others <- create_lm_summary(rpf_others_dat, "erpf_raw_plasma", en_rpf_others, retained_vars_rpf_others, log = T)
create_lm_summary_table_plot(mod_df_rpf_others$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_rpf_others)`.

```{r echo = F, warning = F, message=F}
mod_rpf_others <- mod_df_rpf_others$model
kable(glance(mod_rpf_others))
plot(mod_rpf_others)

# Adjusted R-squared 95% CI
mod_rpf_others_specs <- compute_rsq_conf_interval(mod_rpf_others)
```

#### Adjusted for age and sex

```{r elastic-net-rpf_others-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
rpf_others_dat$sexfemale <- ifelse(rpf_others_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_rpf_others <- as.matrix(cbind(subset(rpf_others_dat, select = c("age", "sexfemale")), top_rpf_others$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_rpf_others_adj <- easy_elasticnet(data = rpf_others_dat, 
                              outcome = "erpf_raw_plasma", out = "1se.error",
                              predictors = predictors_rpf_others,
                              cv_method="kfold", folds = 10,
                              penalty.factor = c(rep(0,2), rep(1, ncol(predictors_rpf_others)-2)))
length(en_rpf_others_adj)

retained_vars_rpf_others_adj = analytes[analytes$AptName %in% en_rpf_others_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_rpf_others_adj <- create_lm_summary(rpf_others_dat, "erpf_raw_plasma", en_rpf_others_adj, retained_vars_rpf_others_adj, log = T)
create_lm_summary_table_plot(mod_df_rpf_others_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_rpf_others)`.

```{r echo = F, warning = F, message=F}
mod_rpf_others_adj <- mod_df_rpf_others_adj$model
kable(glance(mod_rpf_others_adj))
plot(mod_rpf_others_adj)

# Adjusted R-squared 95% CI
mod_rpf_others_adj_specs <- compute_rsq_conf_interval(mod_rpf_others_adj)
```

### RPF (BSA plasma)

#### Unadjusted model

```{r elastic-net-erpf_others_bsa-unadj, echo = F, warning = F, message=F, results ='asis'}
erpf_others_bsa_dat <- subset(cleanData_others, !is.na(erpf_bsa_plasma) & erpf_bsa_plasma > 0)
top_erpf_others_bsa <- top_associations(erpf_others_bsa_dat, "erpf_bsa_plasma", analytes, log = T)

# Elastic net regression
en_erpf_others_bsa <- easy_elasticnet(data = erpf_others_bsa_dat, 
                           outcome = "erpf_bsa_plasma", 
                           out = "1se.error",
                           predictors = top_erpf_others_bsa$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_erpf_others_bsa)

# Save retained variables from elastic net
retained_vars_erpf_others_bsa = analytes[analytes$AptName %in% en_erpf_others_bsa, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_erpf_others_bsa <- create_lm_summary(erpf_others_bsa_dat, "erpf_bsa_plasma", en_erpf_others_bsa, retained_vars_erpf_others_bsa, log = T)
create_lm_summary_table_plot(mod_df_erpf_others_bsa$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_erpf_others_bsa)`.

```{r echo = F, warning = F, message=F}
mod_erpf_others_bsa <- mod_df_erpf_others_bsa$model
kable(glance(mod_erpf_others_bsa))
plot(mod_erpf_others_bsa)

# Adjusted R-squared 95% CI
mod_erpf_others_bsa_specs <- compute_rsq_conf_interval(mod_erpf_others_bsa)
```

#### Adjusted for age and sex

```{r elastic-net-erpf_others_bsa-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
erpf_others_bsa_dat$sexfemale <- ifelse(erpf_others_bsa_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_erpf_others_bsa <- as.matrix(cbind(subset(erpf_others_bsa_dat, select = c("age", "sexfemale")), top_erpf_others_bsa$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_erpf_others_bsa_adj <- easy_elasticnet(data = erpf_others_bsa_dat, 
                               outcome = "erpf_bsa_plasma", out = "1se.error",
                               predictors = predictors_erpf_others_bsa,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_erpf_others_bsa)-2)))
length(en_erpf_others_bsa_adj)

retained_vars_erpf_others_bsa_adj = analytes[analytes$AptName %in% en_erpf_others_bsa_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_erpf_others_bsa_adj <- create_lm_summary(erpf_others_bsa_dat, "erpf_bsa_plasma", en_erpf_others_bsa_adj, retained_vars_erpf_others_bsa_adj, log = T)
create_lm_summary_table_plot(mod_df_erpf_others_bsa_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_erpf_others_bsa)`.

```{r echo = F, warning = F, message=F}
mod_erpf_others_bsa_adj <- mod_df_erpf_others_bsa_adj$model
kable(glance(mod_erpf_others_bsa_adj))
plot(mod_erpf_others_bsa_adj)

# Adjusted R-squared 95% CI
mod_erpf_others_bsa_adj_specs <- compute_rsq_conf_interval(mod_erpf_others_bsa_adj)
```

## Model comparison
#### Unadjusted models
```{r models-others2, echo=F}
others <- data.frame(r2 = c(mod_tkv_others_specs$rsq_adj, mod_ht_adj_tkv_others_specs$rsq_adj, mod_gfr_others_specs$rsq_adj, mod_gfr_others_bsa_specs$rsq_adj, mod_rpf_others_specs$rsq_adj, mod_erpf_others_bsa_specs$rsq_adj),
                                  lower = c(mod_tkv_others_specs$conf.low, mod_ht_adj_tkv_others_specs$conf.low, mod_gfr_others_specs$conf.low, mod_gfr_others_bsa_specs$conf.low, mod_rpf_others_specs$conf.low, mod_erpf_others_bsa_specs$conf.low),
                                  upper = c(mod_tkv_others_specs$conf.high, mod_ht_adj_tkv_others_specs$conf.high, mod_gfr_others_specs$conf.high, mod_gfr_others_bsa_specs$conf.high, mod_rpf_others_specs$conf.high, mod_erpf_others_bsa_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR - Raw", "GFR - BSA", "RPF - Raw", "RPF - BSA"),
                                  No.proteins = c(length(en_tkv_others), 
                                                  length(en_ht_adj_tkv_others),
                                                  length(en_gfr_others),
                                                  length(en_gfr_others_bsa),
                                                  length(en_rpf_others),
                                                  length(en_erpf_others_bsa)))
others$` ` <- paste(rep(" ", 20), collapse = " ")


# Create confidence interval column to display
others$`Adjusted R-squared (95% CI)` <- 
  ifelse(is.na(others$r2), "",
         sprintf("%.2f (%.2f to %.2f)",
                 others$r2, others$lower, others$upper))
forest(data = others[,c(4:7)], 
       est = others$r2,
       lower = others$lower,
       upper = others$upper, ci_column = 3)
```
```{r models-others-ipna, echo=F}
others_ipna <- data.frame(r2 = c(mod_tkv_others_specs$rsq_adj, mod_ht_adj_tkv_others_specs$rsq_adj, mod_gfr_others_specs$rsq_adj, mod_rpf_others_specs$rsq_adj),
                                  lower = c(mod_tkv_others_specs$conf.low, mod_ht_adj_tkv_others_specs$conf.low, mod_gfr_others_specs$conf.low, mod_rpf_others_specs$conf.low),
                                  upper = c(mod_tkv_others_specs$conf.high, mod_ht_adj_tkv_others_specs$conf.high, mod_gfr_others_specs$conf.high, mod_rpf_others_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR", "RPF"),
                                  No.proteins = c(length(en_tkv_others), 
                                                  length(en_ht_adj_tkv_others),
                                                  length(en_gfr_others),
                                                  length(en_rpf_others)))
others_ipna$` ` <- paste(rep(" ", 20), collapse = " ")


# Create confidence interval column to display
others_ipna$`Adjusted R-squared (95% CI)` <- 
  ifelse(is.na(others_ipna$r2), "",
         sprintf("%.2f (%.2f to %.2f)",
                 others_ipna$r2, others_ipna$lower, others_ipna$upper))
forest(data = others_ipna[,c(4:7)], 
       est = others_ipna$r2,
       lower = others_ipna$lower,
       upper = others_ipna$upper, ci_column = 3)
```

#### Adjusted for age and sex
```{r models-others-adjusted, echo=F}
others_adj <- data.frame(r2 = c(mod_tkv_others_adj_specs$rsq_adj, mod_ht_adj_tkv_others_adj_specs$rsq_adj, mod_gfr_others_adj_specs$rsq_adj, mod_gfr_others_bsa_adj_specs$rsq_adj, mod_rpf_others_adj_specs$rsq_adj, mod_erpf_others_bsa_adj_specs$rsq_adj),
                                  lower = c(mod_tkv_others_adj_specs$conf.low, mod_ht_adj_tkv_others_adj_specs$conf.low, mod_gfr_others_adj_specs$conf.low, mod_gfr_others_bsa_adj_specs$conf.low, mod_rpf_others_adj_specs$conf.low, mod_erpf_others_bsa_adj_specs$conf.low),
                                  upper = c(mod_tkv_others_adj_specs$conf.high, mod_ht_adj_tkv_others_adj_specs$conf.high, mod_gfr_others_adj_specs$conf.high, mod_gfr_others_bsa_adj_specs$conf.high, mod_rpf_others_adj_specs$conf.high, mod_erpf_others_bsa_adj_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR - Raw", "GFR - BSA", "RPF - Raw", "RPF - BSA"),
                                  No.proteins = c(length(en_tkv_others_adj)-2, 
                                                  length(en_ht_adj_tkv_others_adj)-2,
                                                  length(en_gfr_others_adj)-2,
                                                  length(en_gfr_others_bsa_adj)-2,
                                                  length(en_rpf_others_adj)-2,
                                                  length(en_erpf_others_bsa_adj)-2))
others_adj$` ` <- paste(rep(" ", 20), collapse = " ")

# Create confidence interval column to display
others_adj$`Adjusted R-squared (95% CI)` <- 
  ifelse(is.na(others_adj$r2), "",
         sprintf("%.2f (%.2f to %.2f)",
                 others_adj$r2, others_adj$lower, others_adj$upper))
forest(data = others_adj[,c(4:7)], 
       est = others_adj$r2,
       lower = others_adj$lower,
       upper = others_adj$upper, ci_column = 3)
```

```{r models-others-ipna-adjusted, echo=F}
others_ipna_adj <- data.frame(r2 = c(mod_tkv_others_adj_specs$rsq_adj, mod_ht_adj_tkv_others_adj_specs$rsq_adj, mod_gfr_others_adj_specs$rsq_adj, mod_rpf_others_adj_specs$rsq_adj),
                                  lower = c(mod_tkv_others_adj_specs$conf.low, mod_ht_adj_tkv_others_adj_specs$conf.low, mod_gfr_others_adj_specs$conf.low, mod_rpf_others_adj_specs$conf.low),
                                  upper = c(mod_tkv_others_adj_specs$conf.high, mod_ht_adj_tkv_others_adj_specs$conf.high, mod_gfr_others_adj_specs$conf.high, mod_rpf_others_adj_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR", "RPF"),
                                  No.proteins = c(length(en_tkv_others_adj)-2, 
                                                  length(en_ht_adj_tkv_others_adj)-2,
                                                  length(en_gfr_others_adj)-2,
                                                  length(en_rpf_others_adj)-2))
others_ipna_adj$` ` <- paste(rep(" ", 20), collapse = " ")


# Create confidence interval column to display
others_ipna_adj$`Adjusted R-squared (95% CI)` <- 
  ifelse(is.na(others_ipna_adj$r2), "",
         sprintf("%.2f (%.2f to %.2f)",
                 others_ipna_adj$r2, others_ipna_adj$lower, others_ipna_adj$upper))
forest(data = others_ipna_adj[,c(4:7)], 
       est = others_ipna_adj$r2,
       lower = others_ipna_adj$lower,
       upper = others_ipna_adj$upper, ci_column = 3)
```

# Elastic net for PANTHER + RH/RH2/IMPROVE

### Total Kidney Volume

#### Unadjusted model

```{r elastic-net-tkv_comb-unadj, echo = F, warning = F, message=F, results ='asis'}
tkv_comb_dat <- subset(cleanData_comb, !is.na(total_kidney_volume_ml) & total_kidney_volume_ml > 0)
top_tkv_comb <- top_associations(tkv_comb_dat, "total_kidney_volume_ml", analytes, log = F)

# Elastic net regression
en_tkv_comb <- easy_elasticnet(data = tkv_comb_dat, 
                           outcome = "total_kidney_volume_ml", 
                           out = "1se.error",
                           predictors = top_tkv_comb$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_tkv_comb)

# Save retained variables from elastic net
retained_vars_tkv_comb = analytes[analytes$AptName %in% en_tkv_comb, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_tkv_comb <- create_lm_summary(tkv_comb_dat, "total_kidney_volume_ml", en_tkv_comb, retained_vars_tkv_comb, log = F)
create_lm_summary_table_plot(mod_df_tkv_comb$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_tkv_comb)`.

```{r echo = F, warning = F, message=F}
mod_tkv_comb <- mod_df_tkv_comb$model
kable(glance(mod_tkv_comb))
plot(mod_tkv_comb)

# Adjusted R-squared 95% CI
mod_tkv_comb_specs <- compute_rsq_conf_interval(mod_tkv_comb)
```

#### Adjusted for age and sex

```{r elastic-net-tkv_comb-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
tkv_comb_dat$sexfemale <- ifelse(tkv_comb_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_tkv_comb <- as.matrix(cbind(subset(tkv_comb_dat, select = c("age", "sexfemale")), top_tkv_comb$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_tkv_comb_adj <- easy_elasticnet(data = tkv_comb_dat, 
                               outcome = "total_kidney_volume_ml", out = "1se.error",
                               predictors = predictors_tkv_comb,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_tkv_comb)-2)))
length(en_tkv_comb_adj)

retained_vars_tkv_comb_adj = analytes[analytes$AptName %in% en_tkv_comb_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_tkv_comb_adj <- create_lm_summary(tkv_comb_dat, "total_kidney_volume_ml", en_tkv_comb_adj, retained_vars_tkv_comb_adj, log = F)
create_lm_summary_table_plot(mod_df_tkv_comb_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_tkv_comb)`.

```{r echo = F, warning = F, message=F}
mod_tkv_comb_adj <- mod_df_tkv_comb_adj$model
kable(glance(mod_tkv_comb_adj))
plot(mod_tkv_comb_adj)

# Adjusted R-squared 95% CI
mod_tkv_comb_adj_specs <- compute_rsq_conf_interval(mod_tkv_comb_adj)
```




### Height adjusted TKV
#### Unadjusted model
```{r elastic-net-ht_adj_tkv_comb-unadj, echo = F, warning = F, message=F, results ='asis'}
ht_adj_tkv_comb_dat <- subset(cleanData_comb, !is.na(ht_adj_tkv) & ht_adj_tkv > 0)
top_ht_adj_tkv_comb <- top_associations(ht_adj_tkv_comb_dat, "ht_adj_tkv", analytes, log = F, top_n = 50)

# Elastic net regression
en_ht_adj_tkv_comb <- easy_elasticnet(data = ht_adj_tkv_comb_dat, 
                           outcome = "ht_adj_tkv", 
                           out = "1se.error",
                           predictors = top_ht_adj_tkv_comb$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_ht_adj_tkv_comb)

# Save retained variables from elastic net
retained_vars_ht_adj_tkv_comb = analytes[analytes$AptName %in% en_ht_adj_tkv_comb, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_ht_adj_tkv_comb <- create_lm_summary(ht_adj_tkv_comb_dat, "ht_adj_tkv", en_ht_adj_tkv_comb, retained_vars_ht_adj_tkv_comb, log = F)
create_lm_summary_table_plot(mod_df_ht_adj_tkv_comb$model_df, format = "html")
```

Top 50 proteins included in analysis. No. of proteins identified: `r length(en_ht_adj_tkv_comb)`.

```{r echo = F, warning = F, message=F}
mod_ht_adj_tkv_comb <- mod_df_ht_adj_tkv_comb$model
kable(glance(mod_ht_adj_tkv_comb))
plot(mod_ht_adj_tkv_comb)

# Adjusted R-squared 95% CI
mod_ht_adj_tkv_comb_specs <- compute_rsq_conf_interval(mod_ht_adj_tkv_comb)
```

#### Adjusted for age and sex

```{r elastic-net-ht_adj_tkv_comb-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
ht_adj_tkv_comb_dat$sexfemale <- ifelse(ht_adj_tkv_comb_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_ht_adj_tkv_comb <- as.matrix(cbind(subset(ht_adj_tkv_comb_dat, select = c("age", "sexfemale")), top_ht_adj_tkv_comb$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_ht_adj_tkv_comb_adj <- easy_elasticnet(data = ht_adj_tkv_comb_dat, 
                               outcome = "ht_adj_tkv", out = "1se.error",
                               predictors = predictors_ht_adj_tkv_comb,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_ht_adj_tkv_comb)-2)))
length(en_ht_adj_tkv_comb_adj)

retained_vars_ht_adj_tkv_comb_adj = analytes[analytes$AptName %in% en_ht_adj_tkv_comb_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_ht_adj_tkv_comb_adj <- create_lm_summary(ht_adj_tkv_comb_dat, "ht_adj_tkv", en_ht_adj_tkv_comb_adj, retained_vars_ht_adj_tkv_comb_adj, log = F)
create_lm_summary_table_plot(mod_df_ht_adj_tkv_comb_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_ht_adj_tkv_comb)`.

```{r echo = F, warning = F, message=F}
mod_ht_adj_tkv_comb_adj <- mod_df_ht_adj_tkv_comb_adj$model
kable(glance(mod_ht_adj_tkv_comb_adj))
plot(mod_ht_adj_tkv_comb_adj)

# Adjusted R-squared 95% CI
mod_ht_adj_tkv_comb_adj_specs <- compute_rsq_conf_interval(mod_ht_adj_tkv_comb_adj)
```

### GFR (Raw plasma)
#### Unadjusted model

```{r elastic-net-gfr_comb-unadj, echo = F, warning = F, message=F, results ='asis'}
gfr_comb_dat <- subset(cleanData_comb, !is.na(gfr_raw_plasma) & gfr_raw_plasma > 0)
top_gfr_comb <- top_associations(gfr_comb_dat, "gfr_raw_plasma", analytes, log = T, top_n = 100)

# Elastic net regression
en_gfr_comb <- easy_elasticnet(data = gfr_comb_dat, 
                          outcome = "gfr_raw_plasma", 
                          out = "1se.error",
                          predictors = top_gfr_comb$predictors_matrix,
                          cv_method="kfold", 
                          folds = 10)
length(en_gfr_comb)

# Save retained variables from elastic net
retained_vars_gfr_comb = analytes[analytes$AptName %in% en_gfr_comb, 
                             c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_comb <- create_lm_summary(gfr_comb_dat, "gfr_raw_plasma", en_gfr_comb, retained_vars_gfr_comb, log = T)
create_lm_summary_table_plot(mod_df_gfr_comb$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_comb)`.

```{r echo = F, warning = F, message=F}
mod_gfr_comb <- mod_df_gfr_comb$model
kable(glance(mod_gfr_comb))
plot(mod_gfr_comb)

# Adjusted R-squared 95% CI
mod_gfr_comb_specs <- compute_rsq_conf_interval(mod_gfr_comb)
```

#### Adjusted for age and sex

```{r elastic-net-gfr_comb-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
gfr_comb_dat$sexfemale <- ifelse(gfr_comb_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_gfr_comb <- as.matrix(cbind(subset(gfr_comb_dat, select = c("age", "sexfemale")), top_gfr_comb$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_gfr_comb_adj <- easy_elasticnet(data = gfr_comb_dat, 
                              outcome = "gfr_raw_plasma", out = "1se.error",
                              predictors = predictors_gfr_comb,
                              cv_method="kfold", folds = 10,
                              penalty.factor = c(rep(0,2), rep(1, ncol(predictors_gfr_comb)-2)))
length(en_gfr_comb_adj)

retained_vars_gfr_comb_adj = analytes[analytes$AptName %in% en_gfr_comb_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_comb_adj <- create_lm_summary(gfr_comb_dat, "gfr_raw_plasma", en_gfr_comb_adj, retained_vars_gfr_comb_adj, log = T)
create_lm_summary_table_plot(mod_df_gfr_comb_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_comb)`.

```{r echo = F, warning = F, message=F}
mod_gfr_comb_adj <- mod_df_gfr_comb_adj$model
kable(glance(mod_gfr_comb_adj))
plot(mod_gfr_comb_adj)

# Adjusted R-squared 95% CI
mod_gfr_comb_adj_specs <- compute_rsq_conf_interval(mod_gfr_comb_adj)
```

### GFR (BSA plasma)

#### Unadjusted model

```{r elastic-net-gfr_comb_bsa-unadj, echo = F, warning = F, message=F, results ='asis'}
gfr_comb_bsa_dat <- subset(cleanData_comb, !is.na(gfr_bsa_plasma) & gfr_bsa_plasma > 0)
top_gfr_comb_bsa <- top_associations(gfr_comb_bsa_dat, "gfr_bsa_plasma", analytes, log = T)

# Elastic net regression
en_gfr_comb_bsa <- easy_elasticnet(data = gfr_comb_bsa_dat, 
                           outcome = "gfr_bsa_plasma", 
                           out = "1se.error",
                           predictors = top_gfr_comb_bsa$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_gfr_comb_bsa)

# Save retained variables from elastic net
retained_vars_gfr_comb_bsa = analytes[analytes$AptName %in% en_gfr_comb_bsa, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_comb_bsa <- create_lm_summary(gfr_comb_bsa_dat, "gfr_bsa_plasma", en_gfr_comb_bsa, retained_vars_gfr_comb_bsa, log = T)
create_lm_summary_table_plot(mod_df_gfr_comb_bsa$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_comb_bsa)`.

```{r echo = F, warning = F, message=F}
mod_gfr_comb_bsa <- mod_df_gfr_comb_bsa$model
kable(glance(mod_gfr_comb_bsa))
plot(mod_gfr_comb_bsa)

# Adjusted R-squared 95% CI
mod_gfr_comb_bsa_specs <- compute_rsq_conf_interval(mod_gfr_comb_bsa)
```

#### Adjusted for age and sex

```{r elastic-net-gfr_comb_bsa-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
gfr_comb_bsa_dat$sexfemale <- ifelse(gfr_comb_bsa_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_gfr_comb_bsa <- as.matrix(cbind(subset(gfr_comb_bsa_dat, select = c("age", "sexfemale")), top_gfr_comb_bsa$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_gfr_comb_bsa_adj <- easy_elasticnet(data = gfr_comb_bsa_dat, 
                               outcome = "gfr_bsa_plasma", out = "1se.error",
                               predictors = predictors_gfr_comb_bsa,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_gfr_comb_bsa)-2)))
length(en_gfr_comb_bsa_adj)

retained_vars_gfr_comb_bsa_adj = analytes[analytes$AptName %in% en_gfr_comb_bsa_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_gfr_comb_bsa_adj <- create_lm_summary(gfr_comb_bsa_dat, "gfr_bsa_plasma", en_gfr_comb_bsa_adj, retained_vars_gfr_comb_bsa_adj, log = T)
create_lm_summary_table_plot(mod_df_gfr_comb_bsa_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_gfr_comb_bsa)`.

```{r echo = F, warning = F, message=F}
mod_gfr_comb_bsa_adj <- mod_df_gfr_comb_bsa_adj$model
kable(glance(mod_gfr_comb_bsa_adj))
plot(mod_gfr_comb_bsa_adj)

# Adjusted R-squared 95% CI
mod_gfr_comb_bsa_adj_specs <- compute_rsq_conf_interval(mod_gfr_comb_bsa_adj)
```

### RPF (Raw plasma)

#### Unadjusted model

```{r elastic-net-rpf_comb-unadj, echo = F, warning = F, message=F, results ='asis'}
rpf_comb_dat <- subset(cleanData_comb, !is.na(erpf_raw_plasma) & erpf_raw_plasma > 0)
top_rpf_comb <- top_associations(rpf_comb_dat, "erpf_raw_plasma", analytes, log = T)

# Elastic net regression
en_rpf_comb <- easy_elasticnet(data = rpf_comb_dat, 
                          outcome = "erpf_raw_plasma", 
                          out = "1se.error",
                          predictors = top_rpf_comb$predictors_matrix,
                          cv_method="kfold", 
                          folds = 10)
length(en_rpf_comb)

# Save retained variables from elastic net
retained_vars_rpf_comb = analytes[analytes$AptName %in% en_rpf_comb, 
                             c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_rpf_comb <- create_lm_summary(rpf_comb_dat, "erpf_raw_plasma", en_rpf_comb, retained_vars_rpf_comb, log = T)
create_lm_summary_table_plot(mod_df_rpf_comb$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_rpf_comb)`.

```{r echo = F, warning = F, message=F}
mod_rpf_comb <- mod_df_rpf_comb$model
kable(glance(mod_rpf_comb))
plot(mod_rpf_comb)

# Adjusted R-squared 95% CI
mod_rpf_comb_specs <- compute_rsq_conf_interval(mod_rpf_comb)
```

#### Adjusted for age and sex

```{r elastic-net-rpf_comb-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
rpf_comb_dat$sexfemale <- ifelse(rpf_comb_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_rpf_comb <- as.matrix(cbind(subset(rpf_comb_dat, select = c("age", "sexfemale")), top_rpf_comb$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_rpf_comb_adj <- easy_elasticnet(data = rpf_comb_dat, 
                              outcome = "erpf_raw_plasma", out = "1se.error",
                              predictors = predictors_rpf_comb,
                              cv_method="kfold", folds = 10,
                              penalty.factor = c(rep(0,2), rep(1, ncol(predictors_rpf_comb)-2)))
length(en_rpf_comb_adj)

retained_vars_rpf_comb_adj = analytes[analytes$AptName %in% en_rpf_comb_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_rpf_comb_adj <- create_lm_summary(rpf_comb_dat, "erpf_raw_plasma", en_rpf_comb_adj, retained_vars_rpf_comb_adj, log = T)
create_lm_summary_table_plot(mod_df_rpf_comb_adj$model_df, format = "html")
```

Top 100 proteins included in analysis. No. of proteins identified: `r length(en_rpf_comb)`.

```{r echo = F, warning = F, message=F}
mod_rpf_comb_adj <- mod_df_rpf_comb_adj$model
kable(glance(mod_rpf_comb_adj))
plot(mod_rpf_comb_adj)

# Adjusted R-squared 95% CI
mod_rpf_comb_adj_specs <- compute_rsq_conf_interval(mod_rpf_comb_adj)
```

### RPF (BSA plasma)

#### Unadjusted model

```{r elastic-net-erpf_comb_bsa-unadj, echo = F, warning = F, message=F, results ='asis'}
erpf_comb_bsa_dat <- subset(cleanData_comb, !is.na(erpf_bsa_plasma) & erpf_bsa_plasma > 0)
top_erpf_comb_bsa <- top_associations(erpf_comb_bsa_dat, "erpf_bsa_plasma", analytes, log = T, top_n = 30)

# Elastic net regression
en_erpf_comb_bsa <- easy_elasticnet(data = erpf_comb_bsa_dat, 
                           outcome = "erpf_bsa_plasma", 
                           out = "1se.error",
                           predictors = top_erpf_comb_bsa$predictors_matrix,
                           cv_method="kfold", 
                           folds = 10)
length(en_erpf_comb_bsa)

# Save retained variables from elastic net
retained_vars_erpf_comb_bsa = analytes[analytes$AptName %in% en_erpf_comb_bsa, 
                              c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_erpf_comb_bsa <- create_lm_summary(erpf_comb_bsa_dat, "erpf_bsa_plasma", en_erpf_comb_bsa, retained_vars_erpf_comb_bsa, log = T)
create_lm_summary_table_plot(mod_df_erpf_comb_bsa$model_df, format = "html")
```

Top 30 proteins included in analysis. No. of proteins identified: `r length(en_erpf_comb_bsa)`.

```{r echo = F, warning = F, message=F}
mod_erpf_comb_bsa <- mod_df_erpf_comb_bsa$model
kable(glance(mod_erpf_comb_bsa))
plot(mod_erpf_comb_bsa)

# Adjusted R-squared 95% CI
mod_erpf_comb_bsa_specs <- compute_rsq_conf_interval(mod_erpf_comb_bsa)
```

#### Adjusted for age and sex

```{r elastic-net-erpf_comb_bsa-adj, echo = F, warning = F, message=F, results ='asis'}
# Create dummy variables for 'sex'
erpf_comb_bsa_dat$sexfemale <- ifelse(erpf_comb_bsa_dat$sex == "female", 1, 0)
# Add sex and age to matrix
predictors_erpf_comb_bsa <- as.matrix(cbind(subset(erpf_comb_bsa_dat, select = c("age", "sexfemale")), top_erpf_comb_bsa$predictors_matrix))

# Elastic net regression
## Force age and sex to models to adjust
en_erpf_comb_bsa_adj <- easy_elasticnet(data = erpf_comb_bsa_dat, 
                               outcome = "erpf_bsa_plasma", out = "1se.error",
                               predictors = predictors_erpf_comb_bsa,
                               cv_method="kfold", folds = 10,
                               penalty.factor = c(rep(0,2), rep(1, ncol(predictors_erpf_comb_bsa)-2)))
length(en_erpf_comb_bsa_adj)

retained_vars_erpf_comb_bsa_adj = analytes[analytes$AptName %in% en_erpf_comb_bsa_adj, c("AptName","Target_nodup","TargetFullName")] %>%
  dplyr::rename("term" = AptName)

mod_df_erpf_comb_bsa_adj <- create_lm_summary(erpf_comb_bsa_dat, "erpf_bsa_plasma", en_erpf_comb_bsa_adj, retained_vars_erpf_comb_bsa_adj, log = T)
create_lm_summary_table_plot(mod_df_erpf_comb_bsa_adj$model_df, format = "html")
```

Top 30 proteins included in analysis. No. of proteins identified: `r length(en_erpf_comb_bsa)`.

```{r echo = F, warning = F, message=F}
mod_erpf_comb_bsa_adj <- mod_df_erpf_comb_bsa_adj$model
kable(glance(mod_erpf_comb_bsa_adj))
plot(mod_erpf_comb_bsa_adj)

# Adjusted R-squared 95% CI
mod_erpf_comb_bsa_adj_specs <- compute_rsq_conf_interval(mod_erpf_comb_bsa_adj)
```

## Model comparison

#### Unadjusted models
```{r models-comb2, echo=F}
comb <- data.frame(r2 = c(mod_tkv_comb_specs$rsq_adj, mod_ht_adj_tkv_comb_specs$rsq_adj, mod_gfr_comb_specs$rsq_adj, mod_gfr_comb_bsa_specs$rsq_adj, mod_rpf_comb_specs$rsq_adj, mod_erpf_comb_bsa_specs$rsq_adj),
                                  lower = c(mod_tkv_comb_specs$conf.low, mod_ht_adj_tkv_comb_specs$conf.low, mod_gfr_comb_specs$conf.low, mod_gfr_comb_bsa_specs$conf.low, mod_rpf_comb_specs$conf.low, mod_erpf_comb_bsa_specs$conf.low),
                                  upper = c(mod_tkv_comb_specs$conf.high, mod_ht_adj_tkv_comb_specs$conf.high, mod_gfr_comb_specs$conf.high, mod_gfr_comb_bsa_specs$conf.high, mod_rpf_comb_specs$conf.high, mod_erpf_comb_bsa_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR - Raw", "GFR - BSA", "RPF - Raw", "RPF - BSA"),
                                  No.proteins = c(length(en_tkv_comb), 
                                                  length(en_ht_adj_tkv_comb),
                                                  length(en_gfr_comb),
                                                  length(en_gfr_comb_bsa),
                                                  length(en_rpf_comb),
                                                  length(en_erpf_comb_bsa)))
comb$` ` <- paste(rep(" ", 20), collapse = " ")


# Create confidence interval column to display
comb$`Adjusted R-squared (95% CI)` <- 
  ifelse(is.na(comb$r2), "",
         sprintf("%.2f (%.2f to %.2f)",
                 comb$r2, comb$lower, comb$upper))
forest(data = comb[,c(4:7)], 
       est = comb$r2,
       lower = comb$lower,
       upper = comb$upper, ci_column = 3)
```

```{r models-comb-ipna, echo=F}
comb_ipna <- data.frame(r2 = c(mod_tkv_comb_specs$rsq_adj, mod_ht_adj_tkv_comb_specs$rsq_adj, mod_gfr_comb_specs$rsq_adj, mod_rpf_comb_specs$rsq_adj),
                                  lower = c(mod_tkv_comb_specs$conf.low, mod_ht_adj_tkv_comb_specs$conf.low, mod_gfr_comb_specs$conf.low, mod_rpf_comb_specs$conf.low),
                                  upper = c(mod_tkv_comb_specs$conf.high, mod_ht_adj_tkv_comb_specs$conf.high, mod_gfr_comb_specs$conf.high, mod_rpf_comb_specs$conf.high),
                                  Model = c("TKV", "Ht-adj TKV", "GFR", "RPF"),
                                  No.proteins = c(length(en_tkv_comb), 
                                                  length(en_ht_adj_tkv_comb),
                                                  length(en_gfr_comb),
                                                  length(en_rpf_comb)))
comb_ipna$` ` <- paste(rep(" ", 20), collapse = " ")


# Create confidence interval column to display
comb_ipna$`Adjusted R-squared (95% CI)` <- 
  ifelse(is.na(comb_ipna$r2), "",
         sprintf("%.2f (%.2f to %.2f)",
                 comb_ipna$r2, comb_ipna$lower, comb_ipna$upper))
forest(data = comb_ipna[,c(4:7)], 
       est = comb_ipna$r2,
       lower = comb_ipna$lower,
       upper = comb_ipna$upper, ci_column = 3)
```

# Overlap of proteins (PANTHER vs. RH/RH2/IMPROVE)

## Total Kidney Volume

```{r venn-diagram-tkv}
both_n_tkv = sum(en_tkv_others %in% retained_vars_tkv$term)
panther_n_tkv = nrow(retained_vars_tkv) - both_n_tkv
others_n_tkv = length(en_tkv_others) - both_n_tkv
  
plot(euler(c("PANTHER" = panther_n_tkv, 
             "RH/RH2/IMPROVE" = others_n_tkv,
             "PANTHER&RH/RH2/IMPROVE" = both_n_tkv)),
     quantities = list(cex = 1.1, col = c("#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_tkv$term,
          `RH/RH2/IMPROVE` = en_tkv_others)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = c(c("#013a63", "#f25c54", "#f25c54"))), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    comb_col = c("#f25c54", "#013a63")[comb_degree(m_upset)],
    bg_col = "#FFFFFF")
```

## Height adjusted TKV

```{r venn-diagram-ht-adj-tkv}
both_n_ht_adj_tkv = sum(en_ht_adj_tkv_others %in% retained_vars_ht_adj_tkv$term)
panther_n_ht_adj_tkv = nrow(retained_vars_ht_adj_tkv) - both_n_ht_adj_tkv
others_n_ht_adj_tkv = length(en_ht_adj_tkv_others) - both_n_ht_adj_tkv
  
plot(euler(c("PANTHER" = panther_n_ht_adj_tkv, 
        "RH/RH2/IMPROVE" = others_n_ht_adj_tkv,
        "PANTHER&RH/RH2/IMPROVE" = both_n_ht_adj_tkv)),
     quantities = list(cex = 1.1, col = c("#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_ht_adj_tkv$term,
          `RH/RH2/IMPROVE` = en_ht_adj_tkv_others)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = c(c("#013a63", "#f25c54", "#f25c54"))), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    comb_col = c("#f25c54", "#013a63")[comb_degree(m_upset)],
    bg_col = "#FFFFFF")
```

## GFR (Raw plasma)

```{r venn-diagram-gfr}
both_n_gfr = sum(en_gfr_others %in% retained_vars_gfr$term)
panther_n_gfr = nrow(retained_vars_gfr) - both_n_gfr
others_n_gfr = length(en_gfr_others) - both_n_gfr
  
plot(euler(c("PANTHER" = panther_n_gfr, 
        "RH/RH2/IMPROVE" = others_n_gfr,
        "PANTHER&RH/RH2/IMPROVE" = both_n_gfr)),
     quantities = list(cex = 1.1, col = c("#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_gfr$term,
          `RH/RH2/IMPROVE` = en_gfr_others)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = c(c("#f25c54", "#f25c54"))), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    comb_col = c("#f25c54")[comb_degree(m_upset)],
    bg_col = "#FFFFFF")

```

## GFR (BSA plasma)

```{r venn-diagram-gfr_bsa}
both_n_gfr_bsa = sum(en_gfr_others_bsa %in% retained_vars_gfr_bsa$term)
panther_n_gfr_bsa = nrow(retained_vars_gfr_bsa) - both_n_gfr_bsa
others_n_gfr_bsa = length(en_gfr_others_bsa) - both_n_gfr_bsa
  
plot(euler(c("PANTHER" = panther_n_gfr_bsa, 
        "RH/RH2/IMPROVE" = others_n_gfr_bsa,
        "PANTHER&RH/RH2/IMPROVE" = both_n_gfr_bsa)),
     quantities = list(cex = 1.1, col = c("#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#f25c54", "#013a63")))
```

## RPF (Raw plasma)

```{r venn-diagram-rpf}
both_n_rpf = sum(en_rpf_others %in% retained_vars_rpf$term)
panther_n_rpf = nrow(retained_vars_rpf) - both_n_rpf
others_n_rpf = length(en_rpf_others) - both_n_rpf
  
plot(euler(c("PANTHER" = panther_n_rpf, 
        "RH/RH2/IMPROVE" = others_n_rpf,
        "PANTHER&RH/RH2/IMPROVE" = both_n_rpf)),
     quantities = list(cex = 1.1, col = c("#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_rpf$term,
          `RH/RH2/IMPROVE` = en_rpf_others)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = c(c("#013a63", "#f25c54", "#f25c54"))), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    comb_col = c("#f25c54", "#013a63")[comb_degree(m_upset)],
    bg_col = "#FFFFFF")
```

## RPF (BSA plasma)

```{r venn-diagram-rpf_bsa}
both_n_rpf_bsa = sum(en_erpf_others_bsa %in% retained_vars_erpf_bsa$term)
panther_n_rpf_bsa = nrow(retained_vars_erpf_bsa) - both_n_rpf_bsa
others_n_rpf_bsa = length(en_erpf_others_bsa) - both_n_rpf_bsa
  
plot(euler(c("PANTHER" = panther_n_rpf_bsa, 
        "RH/RH2/IMPROVE" = others_n_rpf_bsa,
        "PANTHER&RH/RH2/IMPROVE" = both_n_rpf_bsa)),
     quantities = list(cex = 1.1, col = c("#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_erpf_bsa$term,
          `RH/RH2/IMPROVE` = en_erpf_others_bsa)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = c(c("#013a63", "#f25c54", "#f25c54"))), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    comb_col = c("#f25c54", "#013a63")[comb_degree(m_upset)],
    bg_col = "#FFFFFF")
```

# Overlap of proteins (IMPROVE vs. RH/RH2/IMPROVE vs. ALL)

## Total Kidney Volume

```{r venn-diagram-tkv-2}
comb_n_tkv = length(en_tkv_comb)
panther_n_tkv = nrow(retained_vars_tkv)
others_n_tkv = length(en_tkv_others)
comb_n_tkv + panther_n_tkv + others_n_tkv

comb_panther_n_tkv = sum(en_tkv_comb %in% retained_vars_tkv$term)
comb_others_n_tkv = sum(en_tkv_comb %in% en_tkv_others)
panther_others_n_tkv = sum(en_tkv_others %in% retained_vars_tkv$term)

all_n_tkv = sum((en_tkv_comb %in% retained_vars_tkv$term) &
                       (en_tkv_comb %in% en_tkv_others))

plot(euler(c("ALL" = comb_n_tkv - comb_panther_n_tkv - comb_others_n_tkv - all_n_tkv,
             "PANTHER" = panther_n_tkv - comb_panther_n_tkv - panther_others_n_tkv - all_n_tkv, 
             "RH/RH2/IMPROVE" = others_n_tkv - comb_others_n_tkv - panther_others_n_tkv - all_n_tkv,
             "PANTHER&RH/RH2/IMPROVE" = panther_others_n_tkv- all_n_tkv,
             "PANTHER&ALL" = comb_panther_n_tkv - all_n_tkv,
             "RH/RH2/IMPROVE&ALL" = comb_others_n_tkv - all_n_tkv,
             "PANTHER&RH/RH2/IMPROVE&ALL" = all_n_tkv)),
     quantities = list(cex = 1.1, col = c("#132a13", "#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#cce3de", "#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#132a13", "#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_tkv$term,
          `RH/RH2/IMPROVE` = en_tkv_others,
          ALL = en_tkv_comb)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = "black"), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    bg_col = "#FFFFFF")
```

## Height adjusted TKV

```{r venn-diagram-ht-adj-tkv-2}
comb_n_ht_adj_tkv = length(en_ht_adj_tkv_comb)
panther_n_ht_adj_tkv = nrow(retained_vars_ht_adj_tkv)
others_n_ht_adj_tkv = length(en_ht_adj_tkv_others)
comb_n_ht_adj_tkv + panther_n_ht_adj_tkv + others_n_ht_adj_tkv

comb_panther_n_ht_adj_tkv = sum(en_ht_adj_tkv_comb %in% retained_vars_ht_adj_tkv$term)
comb_others_n_ht_adj_tkv = sum(en_ht_adj_tkv_comb %in% en_ht_adj_tkv_others)
panther_others_n_ht_adj_tkv = sum(en_ht_adj_tkv_others %in% retained_vars_ht_adj_tkv$term)

all_n_ht_adj_tkv = sum((en_ht_adj_tkv_comb %in% retained_vars_ht_adj_tkv$term) &
                       (en_ht_adj_tkv_comb %in% en_ht_adj_tkv_others))

plot(euler(c("ALL" = comb_n_ht_adj_tkv - comb_panther_n_ht_adj_tkv - comb_others_n_ht_adj_tkv - all_n_ht_adj_tkv,
             "PANTHER" = panther_n_ht_adj_tkv - comb_panther_n_ht_adj_tkv - panther_others_n_ht_adj_tkv - all_n_ht_adj_tkv, 
             "RH/RH2/IMPROVE" = others_n_ht_adj_tkv - comb_others_n_ht_adj_tkv - panther_others_n_ht_adj_tkv - all_n_ht_adj_tkv,
             "PANTHER&RH/RH2/IMPROVE" = panther_others_n_ht_adj_tkv - all_n_ht_adj_tkv,
             "PANTHER&ALL" = comb_panther_n_ht_adj_tkv - all_n_ht_adj_tkv,
             "RH/RH2/IMPROVE&ALL" = comb_others_n_ht_adj_tkv - all_n_ht_adj_tkv,
             "PANTHER&RH/RH2/IMPROVE&ALL" = all_n_ht_adj_tkv)),
     quantities = list(cex = 1.1, col = c("#132a13", "#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#cce3de", "#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#132a13", "#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_ht_adj_tkv$term,
          `RH/RH2/IMPROVE` = en_ht_adj_tkv_others,
          ALL = en_ht_adj_tkv_comb)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = "black"), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    bg_col = "#FFFFFF")
```

## GFR (Raw plasma)

```{r venn-diagram-gfr-2}
comb_n_gfr = length(en_gfr_comb)
panther_n_gfr = nrow(retained_vars_gfr)
others_n_gfr = length(en_gfr_others)
comb_n_gfr + panther_n_gfr + others_n_gfr

comb_panther_n_gfr = sum(en_gfr_comb %in% retained_vars_gfr$term)
comb_others_n_gfr = sum(en_gfr_comb %in% en_gfr_others)
panther_others_n_gfr = sum(en_gfr_others %in% retained_vars_gfr$term)

all_n_gfr = sum((en_gfr_comb %in% retained_vars_gfr$term) &
                       (en_gfr_comb %in% en_gfr_others))

plot(euler(c("ALL" = comb_n_gfr - comb_panther_n_gfr - comb_others_n_gfr - all_n_gfr,
             "PANTHER" = panther_n_gfr - comb_panther_n_gfr - panther_others_n_gfr - all_n_gfr, 
             "RH/RH2/IMPROVE" = others_n_gfr - comb_others_n_gfr - panther_others_n_gfr - all_n_gfr,
             "PANTHER&RH/RH2/IMPROVE" = panther_others_n_gfr - all_n_gfr,
             "PANTHER&ALL" = comb_panther_n_gfr - all_n_gfr,
             "RH/RH2/IMPROVE&ALL" = comb_others_n_gfr - all_n_gfr,
             "PANTHER&RH/RH2/IMPROVE&ALL" = all_n_gfr)),
     quantities = list(cex = 1.1, col = c("#132a13", "#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#cce3de", "#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#132a13", "#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_gfr$term,
          `RH/RH2/IMPROVE` = en_gfr_others,
          ALL = en_gfr_comb)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = "black"), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    bg_col = "#FFFFFF")
```

## GFR (BSA plasma)

```{r venn-diagram-gfr_bsa-2}
comb_n_gfr_bsa = length(en_gfr_comb_bsa)
panther_n_gfr_bsa = nrow(retained_vars_gfr_bsa)
others_n_gfr_bsa = length(en_gfr_others_bsa)
comb_n_gfr_bsa + panther_n_gfr_bsa + others_n_gfr_bsa

comb_panther_n_gfr_bsa = sum(en_gfr_comb_bsa %in% retained_vars_gfr_bsa$term)
comb_others_n_gfr_bsa = sum(en_gfr_comb_bsa %in% en_gfr_others_bsa)
panther_others_n_gfr_bsa = sum(en_gfr_others_bsa %in% retained_vars_gfr_bsa$term)

all_n_gfr_bsa = sum((en_gfr_comb_bsa %in% retained_vars_gfr_bsa$term) &
                       (en_gfr_comb_bsa %in% en_gfr_others_bsa))

plot(euler(c("ALL" = comb_n_gfr_bsa - comb_panther_n_gfr_bsa - comb_others_n_gfr_bsa - all_n_gfr_bsa,
             "PANTHER" = panther_n_gfr_bsa - comb_panther_n_gfr_bsa - panther_others_n_gfr_bsa - all_n_gfr_bsa, 
             "RH/RH2/IMPROVE" = others_n_gfr_bsa - comb_others_n_gfr_bsa - panther_others_n_gfr_bsa - all_n_gfr_bsa,
             "PANTHER&RH/RH2/IMPROVE" = panther_others_n_gfr_bsa - all_n_gfr_bsa,
             "PANTHER&ALL" = comb_panther_n_gfr_bsa - all_n_gfr_bsa,
             "RH/RH2/IMPROVE&ALL" = comb_others_n_gfr_bsa - all_n_gfr_bsa,
             "PANTHER&RH/RH2/IMPROVE&ALL" = all_n_gfr_bsa)),
     quantities = list(cex = 1.1, col = c("#132a13", "#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#cce3de", "#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#132a13", "#f25c54", "#013a63")))
# upset plot
lt = list(PANTHER = retained_vars_gfr_bsa$term,
          `RH/RH2/IMPROVE` = en_gfr_others_bsa,
          ALL = en_gfr_comb_bsa)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = "black"), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    bg_col = "#FFFFFF")
```

## RPF (Raw plasma)

```{r venn-diagram-rpf-2}
comb_n_rpf = length(en_rpf_comb)
panther_n_rpf = nrow(retained_vars_rpf)
others_n_rpf = length(en_rpf_others)
comb_n_rpf + panther_n_rpf + others_n_rpf

comb_panther_n_rpf = sum(en_rpf_comb %in% retained_vars_rpf$term)
comb_others_n_rpf = sum(en_rpf_comb %in% en_rpf_others)
panther_others_n_rpf = sum(en_rpf_others %in% retained_vars_rpf$term)

all_n_rpf = sum((en_rpf_comb %in% retained_vars_rpf$term) &
                       (en_rpf_comb %in% en_rpf_others))

plot(euler(c("ALL" = comb_n_rpf - comb_panther_n_rpf - comb_others_n_rpf - all_n_rpf,
             "PANTHER" = panther_n_rpf - comb_panther_n_rpf - panther_others_n_rpf - all_n_rpf, 
             "RH/RH2/IMPROVE" = others_n_rpf - comb_others_n_rpf - panther_others_n_rpf - all_n_rpf,
             "PANTHER&RH/RH2/IMPROVE" = panther_others_n_rpf - all_n_rpf,
             "PANTHER&ALL" = comb_panther_n_rpf - all_n_rpf,
             "RH/RH2/IMPROVE&ALL" = comb_others_n_rpf - all_n_rpf,
             "PANTHER&RH/RH2/IMPROVE&ALL" = all_n_rpf)),
     quantities = list(cex = 1.1, col = c("#132a13", "#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#cce3de", "#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#132a13", "#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_rpf$term,
          `RH/RH2/IMPROVE` = en_rpf_others,
          ALL = en_rpf_comb)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = "black"), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    bg_col = "#FFFFFF")

```

## RPF (BSA plasma)

```{r venn-diagram-rpf_bsa-2}
comb_n_rpf_bsa = length(en_erpf_comb_bsa)
panther_n_rpf_bsa = nrow(retained_vars_erpf_bsa)
others_n_rpf_bsa = length(en_erpf_others_bsa)
comb_n_rpf_bsa + panther_n_rpf_bsa + others_n_rpf_bsa

comb_panther_n_rpf_bsa = sum(en_erpf_comb_bsa %in% retained_vars_erpf_bsa$term)
comb_others_n_rpf_bsa = sum(en_erpf_comb_bsa %in% en_erpf_others_bsa)
panther_others_n_rpf_bsa = sum(en_erpf_others_bsa %in% retained_vars_erpf_bsa$term)

all_n_rpf_bsa = sum((en_erpf_comb_bsa %in% retained_vars_erpf_bsa$term) &
                       (en_erpf_comb_bsa %in% en_erpf_others_bsa))

plot(euler(c("ALL" = comb_n_rpf_bsa - comb_panther_n_rpf_bsa - comb_others_n_rpf_bsa - all_n_rpf_bsa,
             "PANTHER" = panther_n_rpf_bsa - comb_panther_n_rpf_bsa - panther_others_n_rpf_bsa - all_n_rpf_bsa, 
             "RH/RH2/IMPROVE" = others_n_rpf_bsa - comb_others_n_rpf_bsa - panther_others_n_rpf_bsa - all_n_rpf_bsa,
             "PANTHER&RH/RH2/IMPROVE" = panther_others_n_rpf_bsa - all_n_rpf_bsa,
             "PANTHER&ALL" = comb_panther_n_rpf_bsa - all_n_rpf_bsa,
             "RH/RH2/IMPROVE&ALL" = comb_others_n_rpf_bsa - all_n_rpf_bsa,
             "PANTHER&RH/RH2/IMPROVE&ALL" = all_n_rpf_bsa)),
     quantities = list(cex = 1.1, col = c("#132a13", "#f25c54", "#013a63", "#343a40", "#343a40", "#343a40","#343a40"),
                       font = 6),
     fills = c("#cce3de", "#fcd5ce", "#a9d6e5"),
     edges = c(lex = 0),
     labels = list(cex = 1.1, 
                   col = c("#132a13", "#f25c54", "#013a63")))

# upset plot
lt = list(PANTHER = retained_vars_erpf_bsa$term,
          `RH/RH2/IMPROVE` = en_erpf_others_bsa,
          ALL = en_erpf_comb_bsa)
m_upset <- make_comb_mat(lt)
cs = comb_size(m_upset)
UpSet(m_upset, 
    top_annotation = HeatmapAnnotation(
        "Protein Intersections" = anno_barplot(cs, 
            ylim = c(0, max(cs)*1.1),
            border = FALSE, 
            gp = gpar(fill = "black"), 
            height = unit(4, "cm"),
            add_numbers = T,
            numbers_gp = gpar(fontsize = 12)
        ), 
        annotation_name_rot = 90),
    right_annotation = upset_right_annotation(m_upset, add_numbers = T,
                                              numbers_gp = gpar(fontsize = 12)),
    show_row_names = T,
    lwd = 4,
    pt_size = unit(5, "mm"),
    bg_col = "#FFFFFF")

```
