---
title: "KNIGHT Proteomics"
author: "Laura Pyle"
date: "today"
date-format: long
knit: (function(rmdfile, ...) { rmarkdown::render(rmdfile, output_dir='/Users/pylell/Dropbox/KNIGHT/') })
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
execute:
  echo: false
  message: false
---

```{r libraries}
#| include: false
library(limma)
library(clusterProfiler)
library(ReactomePA)
library(enrichplot)
library(Hmisc)
library(knitr)
library(tidyverse)
library(gtsummary)
library(ggpubr)
library(lmerTest)
library(parallel)
library(emmeans)
library(RColorBrewer)
library(VennDiagram)
library(broom.mixed)
library(readxl)
library(dplyr)
library(stringr)
library(ggrepel)
library(correlation)
library(psych)
library(SomaPlotr)
library(openxlsx)
```

```{r}
# specify user for paths
user <- Sys.info()[["user"]]

if (user == "choiyej") {
  root_path <- "/Users/choiyej/Library/CloudStorage/OneDrive-SharedLibraries-UW/Laura Pyle - Bjornstad/Biostatistics Core Shared Drive/"
  git_path <- "/Users/choiyej/GitHub/CHCO-Code/Petter Bjornstad/"
} else if (user == "pylell") {
  root_path <- "/Users/pylell/Library/CloudStorage/OneDrive-SharedLibraries-UW/Bjornstad/Biostatistics Core Shared Drive/"
  git_path <- "/Users/pylell/Documents/GitHub/CHCO-Code/Petter Bjornstad/"
} else {
  stop("Unknown user: please specify root path for this user.")
}
```

```{r functions}
volcano <- function(data, lab = "Target", xcol = "logFC", ycol = "P.Value",
                    top = 6,
                    xlimit = c(-1, 1), ylimit = c(0, -log10(10e-7)),
                    xlabel = "logFC", pCutoff = 0.05, overlaps = 10,
                    log_t = F) {
  data <- as.data.frame(data)
  t <- data[data[, "adj.P.Val"] <= pCutoff, ]
  if (log_t) {
    t <- t[order(abs(log(t[, xcol])), decreasing = T), ]
  } else {
    t <- t[order(abs(t[, xcol]), decreasing = T), ]
  }
  data$top <- data[, "AptName"] %in% t[1:top, "AptName"]
  data$logp <- -log10(data[, ycol])
  data$fc <- data[, xcol]
  data$sig <- data[, ycol] <= pCutoff
  p <- ggplot(data = data, aes(x = fc, y = logp, color = sig)) +
    geom_hline(yintercept = -log10(pCutoff), linetype = "dashed") +
    geom_point(size = 2) +
    geom_label_repel(
      data = data[data$top, ], aes(label = Target), color = "black",
      max.overlaps = overlaps
    ) +
    scale_color_manual(values = c("grey", "#3e6dbf")) +
    xlab(xlabel) +
    ylab(bquote(~ -Log[10] ~ italic(P))) +
    theme_bw() +
    theme(legend.position = "none")
  return(p)
}

plotVolcano_mod <- function (data, FC, p.value, labels, identify = FALSE, fc.cutoff = 1, 
  pt.size = 2.5, text.size = 3, cutoff = 0.05/nrow(data), sig_fc_lab = "Significant & Fold-Change",
  sig_lab = "Significant", fc_lab = "Fold-Change", ns_lab = "Non-Significant", 
  sig_fc_lab_col = "#f28482", sig_lab_col = "#f6bd60",
  fc_lab_col = "#84a59d", ns_lab_col = "#dad7cd",
  main = NULL, x.lab = NULL, ...) 
{
  .fc <- enquo(FC)
  .p <- enquo(p.value)
  if (all(pull(data, !!.fc) >= 0)) {
    warning("It appears you are not passing log2-transformed ", 
      "fold-change values. Please check.", call. = FALSE)
  }
  if (is.null(main)) {
    main <- "Volcano Plot of Significant Fold Changes"
  }
  if (is.null(x.lab)) {
    x.lab <- bquote(italic(log)[2] ~ (Fold ~ Change))
  }
  y.lab <- bquote(-italic(log)[10] ~ (p - value))
  plot_df <- dplyr::mutate(data, group = case_when((-log10(!!.p) >= 
    -log10(cutoff)) & (abs(!!.fc) >= fc.cutoff) ~ sig_fc_lab, 
    -log10(!!.p) >= -log10(cutoff) ~ sig_lab, abs(!!.fc) >= 
      fc.cutoff ~ fc_lab, TRUE ~ ns_lab), 
    type = grepl(paste0("^", sig_lab, "|", sig_fc_lab, "|Significant"), group))

  create_col_vector <- function(label_values, colors) {
    cols <- setNames(colors, label_values)
    return(cols)
  }
  
  label_values = c(ns_lab, fc_lab, sig_lab, sig_fc_lab)
  label_colors = c(ns_lab_col, fc_lab_col, sig_lab_col, sig_fc_lab_col)
  cols <- create_col_vector(label_values, label_colors)

  p <- ggplot(plot_df, aes(x = !!.fc, y = -log10(!!.p), color = group)) + 
    geom_point(alpha = 0.5, size = pt.size, ...) + scale_color_manual(values = cols, 
    name = "") + labs(x = x.lab, y = y.lab, title = main) + 
    geom_vline(xintercept = c(-1, 1) * fc.cutoff, color = "grey", 
      linetype = "longdash", alpha = 0.75) + geom_vline(xintercept = 0, 
    color = "grey50", linetype = "solid") + theme_soma() + 
    NULL
  if (identify) {
    p <- p + geom_text(data = dplyr::filter(plot_df, type), 
      aes(label = !!enquo(labels)), hjust = 0, nudge_x = 0.05, 
      size = text.size, color = "black", check_overlap = TRUE)
  }
  p
}

```

```{r, include=F}
# Load correlation function
source("/Users/pylell/Documents/GitHub/CHCO-Code/Petter Bjornstad/Resources/YC/R Functions/correlation_function.R")

load(file.path(root_path, "KNIGHT/Somalogic data/knight_soma.Rdata"))
load(file.path(root_path, "KNIGHT/Somalogic data/analytes.Rdata"))

# read in linkage file for Natalie's studies
link <- read.csv(file.path(root_path, "KNIGHT/Somalogic data/BCF-23-091 Linker File 10.05.2023.csv"))
link$Study.ID <- link$Sequence.Number
redcap <- read.csv(file.path(root_path, "KNIGHT/Somalogic data/200572DataKNIGHT_DATA_LABELS_2023-12-10_1551.csv"))
redcap <- redcap %>% filter(Event.Name == "Screening")
redcap <- redcap %>% select(Study.ID, Sex.assigned.at.birth)
link <- merge(link, redcap, by="Study.ID", all.x = T, all.y = F)
link$SampleDescription <- link$Barcode
link <- link %>% select(SampleDescription, Study.ID, Timepoint.Label, Sex.assigned.at.birth)
knight_soma <- full_join(knight_soma, link, by="SampleDescription")

# read in linkage file for Netherlands samples
# actually, not sure I need these...there is a field called TimePoint
#nethlink <- read.csv(file.path(root_path, "KNIGHT/Somalogic data/sample ID and visit labels SOMAscan WUS-23-004.csv")
#nethlink <- nethlink %>% filter(str_detect(SampleId, "KGHT"))
#nethlink <- nethlink %>% select(GTAC_ID, TimePoint)
#knight_soma$GTAC_ID <- str_sub(knight_soma$SampleId, 1, 10)
#knight_soma <- merge(knight_soma, nethlink, by="GTAC_ID", all.x = T, all.y = T)

# create new variable for harmonized time point
knight_soma$time <-  
  case_when(
  knight_soma$TimePoint == "V1" ~ 1,
  knight_soma$TimePoint == "V2" ~ 2,
  knight_soma$Timepoint.Label == "Baseline" ~ 1,
  knight_soma$Timepoint.Label == "M3" ~ 2,
  .default = NA
)

knight_soma$group <-  
  case_when(
  str_sub(knight_soma$SampleDescription, 1, 2) == "MV" ~ "MTF",
  str_sub(knight_soma$SampleDescription, 1, 2) == "VM" ~ "FTM",
  knight_soma$Sex.assigned.at.birth == "Male" ~ "MTF",
  knight_soma$Sex.assigned.at.birth == "Female" ~ "FTM",
  .default = NA
)

knight_soma$Study.ID <- ifelse(is.na(knight_soma$Study.ID), knight_soma$SampleDescription, knight_soma$Study.ID)
knight_soma$Study.ID <- ifelse(knight_soma$Study.ID == "572.01", "572.010", knight_soma$Study.ID)

# identify columns corresponding to proteins
#is_seq <- function(.x) grepl("^seq\\.[0-9]{4}", .x) # regex for analytes
is_seq <- function(.x) grepl("seq", .x)
seq <- is_seq(names(knight_soma))
# log transform
knight_soma <- knight_soma %>% modify_if(is_seq(names(.)), log)

# read in extra variables from AMC
sexhormones <- read.csv(file.path(root_path, "KNIGHT/Data_raw/Excel KNIGHT - sex hormones.csv"))
sexhormones <- sexhormones %>% select(study_nr, Visit, estradiol_CU, testosteron_CU)
extravars <- read.csv(file.path(root_path, "KNIGHT/Data_raw/Excel KNIGHT extra data + variables.csv"))
neth <- full_join(sexhormones, extravars, by=c("study_nr","Visit"))
gfr <-  read.csv(file.path(root_path, "KNIGHT/Data_raw/Excel KNIGHT -GFR ERPF.csv"))
gfr <- gfr %>% select(study_nr, Visit, GFR..mL.min., ERPF..mL.min.)
neth <- full_join(neth, gfr, by = c("study_nr", "Visit"))
neth$time <- ifelse(neth$Visit == 0, 1, 2)
neth$Study.ID <- neth$study_nr
neth$Study.ID <- str_replace(neth$Study.ID, ",", ".")

knight_soma$Study.ID <- str_replace(knight_soma$Study.ID, "MV ", "")
knight_soma$Study.ID <- str_replace(knight_soma$Study.ID, "VM ", "")
check <- full_join(knight_soma, neth, by = c("Study.ID", "time"))
knight_soma <- full_join(knight_soma, neth, by = c("Study.ID", "time"))

# convert uric acid
knight_soma$Plasma_uric_acid <- ifelse(is.na(knight_soma$Plasma_uric_acid), knight_soma$Plasma_uric_acid_mg_dL*59.48, knight_soma$Plasma_uric_acid)

# drop visit variable - use time instead
knight_soma$Visit <- NULL

# remove 3 participants with missing proteomics
knight_soma <- knight_soma %>% filter(!is.na(seq.10000.28))

# save KNIGHT SOMA to send to Daniel vR
write.csv(knight_soma, file.path(root_path, "KNIGHT/Data_clean/knight_soma_clean.csv"), row.names = F, na = "")

# calculate change in sex hormones, uric acid, M-value, GFR/EFPF
delta_temp <- knight_soma %>% select(Study.ID, time, testosteron_CU, estradiol_CU, M_value_corrected,
                                Plasma_uric_acid, URklaring, FEUA, GFR..mL.min., ERPF..mL.min.)
delta <- delta_temp %>% arrange(Study.ID, time) %>% group_by(Study.ID) %>% pivot_wider(names_from = time,
                                                                                        values_from = c(testosteron_CU, estradiol_CU, M_value_corrected,
                                                                                                        Plasma_uric_acid, URklaring, FEUA,
                                                                                                        GFR..mL.min., ERPF..mL.min.))
delta$delta_testoseron_CU <- delta$testosteron_CU_2 - delta$testosteron_CU_1
delta$delta_estradiol_CU <- delta$estradiol_CU_2 - delta$estradiol_CU_1
delta$delta_M_value_corrected <- delta$M_value_corrected_2 - delta$M_value_corrected_1
delta$delta_Plasma_uric_acid <- delta$Plasma_uric_acid_2 - delta$Plasma_uric_acid_1
delta$delta_URklaring <- delta$URklaring_2 - delta$URklaring_1
delta$delta_FEUA <- delta$FEUA_2 - delta$FEUA_1
delta$delta_GFR..mL.min. <- delta$GFR..mL.min._2 - delta$GFR..mL.min._1
delta$ERPF..mL.min. <- delta$ERPF..mL.min._2 - delta$ERPF..mL.min._1

# Calculate change in each protein
df_diff <- knight_soma %>%
  arrange(Study.ID, time) %>%
  group_by(Study.ID, group) %>%
  reframe(across(contains("seq"), ~ diff(as.numeric(.x))))
# Merge in changes in other variables
df_diff <- full_join(df_diff, delta, by="Study.ID")
```

```{r, include=FALSE}
#| label: tbl-characteristics
#| tbl-cap: Participant characteristics
#df %>%
#  dplyr::select(
#    SEX, age, ETHN, RACE, SURG, diab, diab_resolved, sbp, dbp, hrate, bfat, bmi,
#    weight, height, UACRATIO, albuminuria, CYSC, visit
#  ) %>%
#  tbl_summary(by = visit, missing_text = "Missing") %>%
#  modify_header(label = "**Visit**") %>%
#  bold_labels() %>%
#  as_kable_extra()
```

# Questions/comments

1) Converted CO plasma uric acid from mg/dL to umol/L to be on same scale as AMC
2) Removed 3 participants without proteomic data (572.011, 572.012, 572.019)

# Univariable analyses 

## Male to Female

```{r, include=FALSE}
# First MTF
# Limma setup
# Y needs "genes" in rows
y <- df_diff %>%
  filter(group == "MTF") %>%
  dplyr::select(contains("seq")) %>%
  t()
# Design matrix
design_mat <- model.matrix(~1, data = df_diff[df_diff$group == "MTF",])
# Fit
fit <- lmFit(y, design_mat)
fit <- eBayes(fit)
res <- topTable(fit, coef = 1, number = dim(y)[1], sort.by = "p")
res$Target <- analytes$Target[match(rownames(res), analytes$AptName)]
res$TargetFullName <- analytes$TargetFullName[match(rownames(res), analytes$AptName)]
res$UniProt <- analytes$UniProt[match(rownames(res), analytes$AptName)]
write.csv(res, file = file.path(root_path, "KNIGHT/Results/limma_MTF_results.csv", row.names = F))
# Write results for online enrichment
res_for_enrichment <- topTable(fit, coef = 1, number = dim(y)[1], sort.by = "p")
res_for_enrichment <- res_for_enrichment[order(res_for_enrichment$logFC, decreasing = T), ]
res_for_enrichment$UniProt <- analytes$UniProt[match(rownames(res_for_enrichment), analytes$AptName)]
res_for_enrichment <- res_for_enrichment[, c("UniProt", "AveExpr")]
#write.csv(res_for_enrichment, file = "/Volumes/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Teen Labs/Results/limma_intercept_only_results.csv", row.names = F)
# Table
#kable(res[1:10, ], digits = 3, row.names = F)

top_mtf <- res
top_mtf$AptName <- row.names(top_mtf)
v_mtf <- volcano(top_mtf)
```

```{r, echo=FALSE, warning=FALSE}
v_mtf
```

There were `r nrow(res[res$adj.P.Val < 0.05,])` proteins significantly different after p value adjustment. Of these, `r sum(res[res$adj.P.Val < 0.05,]$logFC>0)` were higher on average at the second visit compared to the first, and `r sum(res[res$adj.P.Val < 0.05,]$logFC<0)` were lower. See separate output file for univariate results.

### Gene set enrichment analysis (GSEA) with Reactome

GSEA tests whether proteins in a particular biological pathway are more likely to have a large effect size compared to proteins in other biological pathways.

```{r, include=FALSE}
res$EntrezGeneID <- analytes$EntrezGeneID[match(rownames(res), analytes$AptName)]
de <- res$logFC
names(de) <- res$EntrezGeneID
de <- de[names(de) != ""]
de <- de[!duplicated(names(de))]
de <- sort(de, decreasing = T)
all_prots_gse <- gsePathway(de,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
  verbose = FALSE
)
```

```{r, echo=FALSE, warning=FALSE}
dotplot(all_prots_gse)
```

### Over-representation analysis

ORA tests whether the number of differentially expressed proteins in a pathway is larger than would be expected by chance. GSEA is a more robust analysis, but the advantage of ORA is that pathways can be separated into those that are upregulated and downregulated. A pathway can be both upregulated and downregulated, if some genes are upregulated and others are downregulated.

```{r, include=FALSE}
up <- rownames(res)[res$logFC > 0]
up <- analytes$EntrezGeneID[match(up, analytes$AptName)]
up <- up[up != ""]
down <- rownames(res)[res$logFC < 0]
down <- analytes$EntrezGeneID[match(down, analytes$AptName)]
down <- down[down != ""]
# Reactome enrichment
upreact <- enrichPathway(up)
upreact <- setReadable(upreact, "org.Hs.eg.db", "ENTREZID")
downreact <- enrichPathway(down)
downreact <- setReadable(downreact, "org.Hs.eg.db", "ENTREZID")
```

```{r, echo=FALSE, warning=FALSE}
#| fig-width: 7
#| fig-height: 10
# Plots
updot <- dotplot(upreact) + ggtitle("Upregulated") +
  theme(plot.title = element_text(hjust = 0.5))
downdot <- dotplot(downreact) + ggtitle("Downregulated") +
  theme(plot.title = element_text(hjust = 0.5))
updot
downdot
```

## Female to Male

```{r, include=FALSE}
# First MTF
# Limma setup
# Y needs "genes" in rows
y <- df_diff %>%
  filter(group == "FTM") %>%
  dplyr::select(contains("seq")) %>%
  t()
# Design matrix
design_mat <- model.matrix(~1, data = df_diff[df_diff$group == "FTM",])
# Fit
fit <- lmFit(y, design_mat)
fit <- eBayes(fit)
res <- topTable(fit, coef = 1, number = dim(y)[1], sort.by = "p")
res$Target <- analytes$Target[match(rownames(res), analytes$AptName)]
res$TargetFullName <- analytes$TargetFullName[match(rownames(res), analytes$AptName)]
res$UniProt <- analytes$UniProt[match(rownames(res), analytes$AptName)]
write.csv(res, file = file.path(root_path, "KNIGHT/Results/limma_FTM_results.csv", row.names = F))
# Write results for online enrichment
res_for_enrichment <- topTable(fit, coef = 1, number = dim(y)[1], sort.by = "p")
res_for_enrichment <- res_for_enrichment[order(res_for_enrichment$logFC, decreasing = T), ]
res_for_enrichment$UniProt <- analytes$UniProt[match(rownames(res_for_enrichment), analytes$AptName)]
res_for_enrichment <- res_for_enrichment[, c("UniProt", "AveExpr")]
#write.csv(res_for_enrichment, file = "/Volumes/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Teen Labs/Results/limma_intercept_only_results.csv", row.names = F)
# Table
#kable(res[1:10, ], digits = 3, row.names = F)

top_ftm <- res
top_ftm$AptName <- row.names(top_ftm)
v_ftm <- volcano(top_ftm)
```

```{r, echo=FALSE, warning=FALSE}
v_ftm
```

There were `r nrow(res[res$adj.P.Val < 0.05,])` proteins significantly different after p value adjustment. Of these, `r sum(res[res$adj.P.Val < 0.05,]$logFC>0)` were higher on average at the second visit compared to the first, and `r sum(res[res$adj.P.Val < 0.05,]$logFC<0)` were lower. See separate output file for univariate results.

### Gene set enrichment analysis (GSEA) with Reactome

GSEA tests whether proteins in a particular biological pathway are more likely to have a large effect size compared to proteins in other biological pathways.

```{r, include=FALSE}
res$EntrezGeneID <- analytes$EntrezGeneID[match(rownames(res), analytes$AptName)]
de <- res$logFC
names(de) <- res$EntrezGeneID
de <- de[names(de) != ""]
de <- de[!duplicated(names(de))]
de <- sort(de, decreasing = T)
all_prots_gse <- gsePathway(de,
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
  verbose = FALSE
)
```

```{r, echo=FALSE, warning=FALSE}
dotplot(all_prots_gse)
```

### Over-representation analysis

ORA tests whether the number of differentially expressed proteins in a pathway is larger than would be expected by chance. GSEA is a more robust analysis, but the advantage of ORA is that pathways can be separated into those that are upregulated and downregulated. A pathway can be both upregulated and downregulated, if some genes are upregulated and others are downregulated.

```{r, include=FALSE}
up <- rownames(res)[res$logFC > 0]
up <- analytes$EntrezGeneID[match(up, analytes$AptName)]
up <- up[up != ""]
down <- rownames(res)[res$logFC < 0]
down <- analytes$EntrezGeneID[match(down, analytes$AptName)]
down <- down[down != ""]
# Reactome enrichment
upreact <- enrichPathway(up)
upreact <- setReadable(upreact, "org.Hs.eg.db", "ENTREZID")
downreact <- enrichPathway(down)
downreact <- setReadable(downreact, "org.Hs.eg.db", "ENTREZID")
```

```{r, echo=FALSE, warning=FALSE}
#| fig-width: 7
#| fig-height: 10
updot <- dotplot(upreact) + ggtitle("Upregulated") +
  theme(plot.title = element_text(hjust = 0.5))
downdot <- dotplot(downreact) + ggtitle("Downregulated") +
  theme(plot.title = element_text(hjust = 0.5))
updot 
downdot
```

## Correlations (MTF and FTM combined)

### Change in protein vs. change in testosterone

```{r, include=FALSE}
y <- df_diff %>%
  dplyr::select(contains("seq")) 
x <- df_diff %>% 
  dplyr::select(delta_testoseron_CU)
corr_testosterone_CU <- corr.test(x = x, y = y, method = "spearman", adjust = "none")
corr_testosterone_CU_r <- data.frame(spearman_delta_testosterone = (corr_testosterone_CU$r %>% t() ))
corr_testosterone_CU_p <- data.frame(p.value = (corr_testosterone_CU$p %>% t() ))
corr_testosterone_CU_mat <- cbind(corr_testosterone_CU_r, corr_testosterone_CU_p)
colnames(corr_testosterone_CU_mat) <- c("spearman_delta_testosterone", "p.value")

corr_testosterone_CU_mat <- corr_testosterone_CU_mat %>%
  rownames_to_column(var = "AptName") %>%
  left_join(analytes, by = "AptName") %>%
  # column_to_rownames("Target") %>%
  dplyr::select(spearman_delta_testosterone, p.value, Target)

corr_testosterone_CU_mat_save <- corr.test(x = x, y = y, method="spearman", adjust="none")
corr_testosterone_CU_mat_save_r <- data.frame(spearman_delta_testosterone = (corr_testosterone_CU_mat_save$r %>% t() ))
corr_testosterone_CU_mat_save_p <- data.frame(p.value = (corr_testosterone_CU_mat_save$p %>% t() ))
corr_testosterone_CU_mat_save <- cbind(corr_testosterone_CU_mat_save_r, corr_testosterone_CU_mat_save_p)
colnames(corr_testosterone_CU_mat_save) <- c("spearman_delta_testosterone", "p.value")
corr_testosterone_CU_mat_save <- corr_testosterone_CU_mat_save %>%
  rownames_to_column(var = "AptName") %>%
  left_join(analytes, by = "AptName")

```

```{r, echo = F}
plotVolcano_mod(corr_testosterone_CU_mat, 
            FC = spearman_delta_testosterone, 
            p.value = p.value, 
            label = Target, 
            identify = T,
            fc.cutoff = 0,
            cutoff = 0.05,
            x.lab = "Correlation",
            main = "Change in protein vs. change in testosterone",
            pt.size = 1,
            fc_lab = "p > 0.05",
            fc_lab_col = "#dad7cd",
            sig_fc_lab = "p < 0.05") 
```

### Change in protein vs. change in estradiol

### Change in protein vs. change in M-value

### Change in protein vs. change in plasma uric acid

### Change in protein vs. change in URklaring

### Change in protein vs. change in FEUA

### Change in protein vs. change in GFR

### Change in protein vs. change in ERPF

```{r, echo = F}
# write correlation results to file
wb <- createWorkbook()
addWorksheet(wb,"Change in testosterone")
writeData(wb,"Change in testosterone",corr_testosterone_CU_mat_save,rowNames = F)
saveWorkbook(wb,file.path(root_path, "KNIGHT/Results/KNIGHT_correlations.xlsx",overwrite = TRUE))
saveWorkbook(wb,"/Users/pylell/Dropbox/KNIGHT/KNIGHT_correlations.xlsx",overwrite = TRUE)
```

```{r, echo = F}
# write separate files for IPA
ipa <- createWorkbook()
addWorksheet(ipa,"Change in testosterone")
writeData(ipa,"Change in testosterone",corr_testosterone_CU_mat_save,rowNames = F)
saveWorkbook(ipa,file.path(root_path, "KNIGHT/Results/IPA/KNIGHT_correlations_testosterone.xlsx",overwrite = TRUE))
```
