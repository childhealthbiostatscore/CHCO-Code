---
title: PENGUIN Analysis
author: Tim Vigers, Ye Ji Choi
date: r Sys.Date()
format:
 html:
   toc: true
   toc-depth: 5
   code-fold: true
   self-contained: true
   fig-cap-location: top
   page-layout: full
editor: visual
---

```{r setup, include=F}
library(dplyr)
library(reticulate)
library(corrplot)
library(knitr)
library(Hmisc)
library(tidyverse)
library(scales)
library(kableExtra)
library(gtools)
use_python("/usr/bin/python3", required = TRUE)
```

```{python, include=F}
import pandas as pd
import numpy as np
import statistics
import rpy2
import rpy2.robjects as ro
import seaborn as sns
import matplotlib.pyplot as plt
from tableone import TableOne
from rpy2.robjects.packages import importr
from rpy2.robjects import pandas2ri

# Import data and variable names
df = pd.read_csv("/Volumes/Peds Endo/Petter Bjornstad/Data Harmonization/Data Clean/harmonized_dataset.csv", low_memory=False)
var_names = pd.read_csv("/Volumes/Peds Endo/Petter Bjornstad/Data Harmonization/data_dictionary_master.csv", low_memory=False)
# Subset to CROCODILE and PENGUIN
df = df.loc[df["study"].isin(["CROCODILE","PENGUIN"])]
df = df.loc[df["group"] != "Type 1 Diabetes"]
# Get last values for each visit
df = df.groupby(by=["record_id", "visit"]).agg("last").reset_index()
# Create FFA suppression variables
df = df.assign(ffa_suppression_1 = (df.baseline_ffa - df[['ffa_70', 'ffa_80', 'ffa_90']].mean(axis=1))/df.baseline_ffa*100, ffa_suppression_2 = (df.baseline_ffa -  df[['ffa_250', 'ffa_260', 'ffa_270']].mean(axis=1))/df.baseline_ffa * 100)
# Create urine albumin excretion variable (general 24 hrs)
df = df.assign(aer_24 = (df.u24_mab * df.u24_vl) / 1440)
# Create urine albumin excretion variable (specific to collection time)
df = df.assign(aer_24_coltime = (df.u24_mab * df.u24_vl) / (df.u24_hrs * 60))
# Height-adjusted
df["height_adj_total_kidney_volume"] = df["total_kidney_volume_ml"] / (df["height"] / 100)
df["height_adj_right_kidney_volume"] = df["right_kidney_volume_ml"] / (df["height"] / 100)
df["height_adj_left_kidney_volume"] = df["left_kidney_volume_ml"] / (df["height"] / 100)
```

```{python, include=F}
# Variable grouping
t1_vars = ["age", "sex","race","height","weight","bmi","sbp","dbp","pulse","creatinine_s","eGFR_CKD_epi","acr_u","aer_24", "aer_24_coltime","statin", "adpkd_classification"]
mri_vars = ["total_kidney_volume_ml","height_adj_total_kidney_volume","right_kidney_volume_ml","height_adj_right_kidney_volume","left_kidney_volume_ml","height_adj_left_kidney_volume","total_liver_volume_ml","total_cyst_volume_ml","total_number_of_cysts","lc_f","rc_f", "lc_k1", "rc_k1", "lc_k2", "rc_k2", "lc_vb","rc_vb"]
dxa_vars = ["dexa_body_fat","dexa_fat_kg","dexa_lean_kg","dexa_trunk_kg","p1_raw_m","p1_raw_leanm","p2_raw_m","p2_raw_leanm", "ffa_suppression_1", "ffa_suppression_2"]
cat = ["sex","race","statin", "adpkd_classification"]
groupby = "group"
```

```{python, include=F}
# t1-histograms
hist_vars1 = df[list(t1_vars)].select_dtypes(include=np.number).columns.tolist()
for v in hist_vars1:
  ax = sns.displot(df, x=v, hue="group", element="step")
  ax.set(xlabel=v)
  plt.show()
# t1-non-normal
t1nn = ["acr_u", "creatinine_s", "dbp", "bmi"]
```

```{python, include=F}
# t2-histograms
hist_vars2 = df[list(mri_vars)].select_dtypes(include=np.number).columns.tolist()
for v in hist_vars2:
   ax = sns.displot(df, x=v, hue="group", element="step")
   ax.set(xlabel=v)
   plt.show()
# t2-non-normal
t2nn = ["total_cyst_volume_ml", "total_number_of_cysts", "lc_f", "rc_f", "lc_k1", "rc_k1", "lc_vb", "rc_vb"]
```

```{python, include=F}
# t3-histograms
hist_vars3 = df[list(dxa_vars)].select_dtypes(include=np.number).columns.tolist()
for v in hist_vars3:
   ax = sns.displot(df, x=v, hue="group", element="step")
   ax.set(xlabel=v)
   plt.show()
# t3-non-normal
t3nn = ["p1_raw_m", "p1_raw_leanm", "ffa_suppression_1", "ffa_suppression_2"]
```

```{python, include=F}
t1 = TableOne(df,t1_vars, cat, groupby=groupby, nonnormal=t1nn, pval=True,dip_test=True, normal_test=True, tukey_test=True,decimals=3)
t2 = TableOne(df,dxa_vars, groupby=groupby, nonnormal=t2nn, pval=True, dip_test=True, normal_test=True, tukey_test=True, decimals=3)
t3 = TableOne(df,mri_vars, groupby=groupby, nonnormal=t3nn, pval=True, dip_test=True, normal_test=True, tukey_test=True, decimals=3)
```

```{python}
#| label: tbl-1
#| tbl-cap: Participant Characteristics
t1

#| label: tbl-2
#| tbl-cap: DEXA
t2

#| label: tbl-3
#| tbl-cap: PET and MRI
t3
```

```{python, include=F}
df_python = df
```

```{r, include=F}
# Make python version of df into R version df
df_R <- py$df_python

# Select relevant variables for the correlation matrix
df_R_correlation <- df_R %>%
  select(p1_raw_m, p1_raw_leanm, p2_raw_m, p2_raw_leanm, ffa_suppression_1, ffa_suppression_2, dexa_body_fat, dexa_lean_mass, right_kidney_volume_ml, height_adj_right_kidney_volume, left_kidney_volume_ml, height_adj_left_kidney_volume, total_liver_volume_ml, total_cyst_volume_ml, total_number_of_cysts,lc_f, rc_f,lc_vb, rc_vb, lc_k1, rc_k1, lc_k2, rc_k2)

# Correlation matrix in table format
M_table = as.data.frame(cor(y = df_R_correlation[,1:8],x=df_R_correlation[,9:ncol(df_R_correlation)], use = "pairwise.complete.obs"))

# Compute p-values to add to matrix table
res2 <- rcorr(as.matrix(df_R_correlation))
corr_pval <- as.data.frame(res2$P) %>%
  select(starts_with("p")|starts_with("ffa")|starts_with("dexa")) %>%
  sapply(pvalue) 
colnames(corr_pval) <- rep("p_value", ncol(corr_pval))

# Add p-values to matrix table
corr_pval = corr_pval[9:nrow(corr_pval),]
M_table_p <- bind_cols(M_table, corr_pval) %>%
  relocate(map(1:ncol(M_table), ~ c(.x, .x + ncol(M_table))) %>% unlist())
```

```{r fig.height=10,fig.width=10}
# Matrix table with p-values
kable(M_table_p, caption = "Correlation", digits = 3, align = rep("r", ncol(M_table_p))) %>%
  add_header_above(c(" "=1, "p1_raw_m"=2, "p1_raw_leanm"=2, "p2_raw_m"=2, "p2_raw_leanm"=2, "ffa_suppression_1"=2, "ffa_suppression_2"=2, "dexa_body_fat"=2, "dexa_lean_mass"=2))

# Plot correlation matrix
M = cor(df_R_correlation[,1:ncol(df_R_correlation)], use = "pairwise.complete.obs") 
testRes = cor.mtest(df_R_correlation[,1:ncol(df_R_correlation)]) 
corrplot(M, p.mat = testRes$p, method = 'circle', type = 'lower', insig='blank', addCoef.col ='white', order = 'AOE', diag=FALSE, number.cex = 0.8)
```

\# Questions for Petter

\# 1. Which variables for urine albumin excretion, RAASi, Metformin, and Tolvaptan? (Tim is searching)
