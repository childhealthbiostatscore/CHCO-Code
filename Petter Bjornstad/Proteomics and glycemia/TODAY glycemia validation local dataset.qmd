---
title: "TODAY glycemia validation"
author: "Laura Pyle"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
execute:
  echo: false
  message: false
---

```{r libraries}
#| include: false
library(psych)
library(corrplot)
library(pander)
library(dplyr)
library(tableone)
library(knitr)
library(gtools)
library(ggpubr)
library(SomaDataIO)
library(limma)
library(dplyr)
library(caret)
library(purrr)
library(multtest)
library(openxlsx)
library(tableone)
library(EnhancedVolcano)
library(knitr)
library(survival)
library(broom)
library(emmeans)
library(ggvenn)

# Print all pander tables
panderOptions("knitr.auto.asis", FALSE)
```

```{r data import}
load("/Users/pylell/Library/CloudStorage/OneDrive-SharedLibraries-UW/Bjornstad/Biostatistics Core Shared Drive/Proteomics and DKD/Data_Cleaned/analysis_dataset.RData")
df <- df %>% filter(visit == "baseline")
# select top 20 aptamers
top_glyc_df <- top_glyc_df %>% arrange(adj.p.value) %>% slice_head(n = 20)

# prot_include <- 

seq_include <- top_glyc_df$AptName 

df_t2d <- df %>% filter(group=="Type 2 Diabetes")

```

```{r functions}
cor_and_plot_soma <- function(data, vars) {
  # Format matrix
  analytes_temp <- analytes
  analytes_temp$Target_apt <- paste0(analytes_temp$Target, " (", analytes_temp$AptName, ")")
  d <- data[, c(vars, "acr_u", "gfr_raw_plasma", "gfr_bsa_plasma")]
  n <- c(
    analytes_temp$Target_apt[match(vars, analytes_temp$AptName)],
    "acr_u", "gfr_raw_plasma", "gfr_bsa_plasma"
  )
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(3)")
  names(d) <- n
  # Correlations
  M <- corr.test(data.matrix(d), normal = F, method = "spearman", adjust = "none")
  corrplot(round(M$r, 3),
    p.mat = M$p, method = "circle", type = "lower", insig = "blank",
    addCoef.col = "white", diag = FALSE
  )
  #prot_heatmap <- top_htn_df %>%
  #filter(Target %in% c("WFKN2","SEZ6L","SCG3","LSAMP","T132B","Nr-CAM","PEDF","IGLO5",
  #                     "PCD10:ECD","UNC5H4","SLIK1",
  #                     "Secretoglobin family 3A member 1","sICAM-5")) %>%
  #pull(AptName)
  #colnames_M <- top_htn_df %>%
  #  filter(AptName %in% prot_heatmap) %>%
  # pull(Target)
  #colnames_M <- paste0(colnames_M,"_",prot_heatmap)
  # Print a nice looking table
  r <- data.frame(round(M$r, 3))
 # colnames(r)[1:length(colnames_M)] <- colnames_M
  #rownames(r)[1:length(colnames_M)] <- colnames_M
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Coefficients")
  cat("\n")
  # print p-values
  p <- data.frame(round(M$p, 3))
  #colnames(p)[1:length(colnames_M)] <- colnames_M
 # rownames(p)[1:length(colnames_M)] <- colnames_M
  cat("\n")
  pander(p, caption = "P-values")
  cat("\n")
   # print Ns
  n <- data.frame(round(M$n, 3))
  #colnames(n)[1:length(colnames_M)] <- colnames_M
  #rownames(n)[1:length(colnames_M)] <- colnames_M
  cat("\n")
  pander(n, caption = "Number of observations")
  cat("\n")
}
```

```{r, include=FALSE}
corr_plot_modified_nodict <- function(data, X, Y, cor_method = "spearman", adj_var = NULL, 
                               method = "color", insig = "pch", coef_col = NULL,
                               pch = 4, pch.col = "black", pch.cex = 0, colnames_M, rownames_M) {
  prot_heatmap <- seq_include
  analytes_temp <- analytes
  analytes_temp$Target_apt <- paste0(analytes_temp$Target, " (", analytes_temp$AptName, ")")
  TA <- analytes_temp$Target_apt[match(prot_heatmap, analytes_temp$AptName)]
  colnames(Y) <- TA
  n_cols = length(Y)
  M <- cor(y = Y,
           x = X,
           use = "pairwise.complete.obs",
           method = cor_method)
  M <- M[,order(colnames(M))]
  if (!is.na(adj_var)){
    x_vars <- rep(X, times = length(Y))
    x_coord <- rep(seq(1,length(Y)), each = length(X))
    y_vars <- rep(Y, each = length(X))
    y_coord <- rep(seq(length(X),1), times = length(Y))
    lm_extracted <- data.frame(yName = character(0),
                               xName = character(0),
                               x = numeric(0),
                               y = numeric(0),
                               adj_var = character(0),
                               adj_x_coef = numeric(0),
                               adj_x_pval = numeric(0))
    for (i in 1:length(x_vars)) {
      if(x_vars[i] != y_vars[i]) {
        lm_formula <- as.formula(paste0(y_vars[i], "~", x_vars[i], "+", adj_var))
        lm_model <- lm(lm_formula, data = data)
        lm_summary <- summary(lm_model)
        lm_coef <- lm_summary$coefficient[x_vars[i], "Estimate"]
        lm_p_val <- lm_summary$coefficient[x_vars[i], "Pr(>|t|)"]
        lm_extracted <- rbind(lm_extracted,
                              data.frame(
                                yName = y_vars[i],
                                xName = x_vars[i],
                                x = x_coord[i],
                                y = y_coord[i],
                                adj_var = adj_var,
                                adj_x_coef = lm_coef,
                                adj_x_pval = lm_p_val))
      }
    }
  }
  
  correlation_p_value <- correlation_p_value_matrix(data, relevant_vars = c(colnames(Y),colnames(X)), n_cols = n_cols, cor_method = cor_method, Y=Y, X=X)

  corrplot(M,
           p.mat = correlation_p_value,
           method = method,
           tl.col = "black",
           tl.srt = 45,
           tl.cex = 1.2,
           insig = insig,
           addCoef.col = coef_col,
           addgrid.col = 'lightgray',
           number.digits = 2,
           pch.col = pch.col, 
           pch = pch,
           pch.cex = pch.cex)$corrPos -> p1
  p1_sub <- subset(p1, p.value <= 0.05)
  p1_sub2 <- subset(p1, p.value <= 0.05 & abs(corr) >= 0.7)
  
  if (nrow(p1) > 0) {
    graphics::text(p1$x, p1$y, sprintf("%.2f", p1$corr), adj = c(0.5, 0), cex=1.2)
    if (nrow(p1_sub > 0)) {
      graphics::text(p1_sub$x, p1_sub$y, stars.pval(p1_sub$p.value), adj = c(0.5, 2), cex=1.2)
    }
  }
  if (nrow(p1_sub2) > 0) {
    graphics::text(p1_sub2$x, p1_sub2$y, sprintf("%.2f", p1_sub2$corr), col = "white", adj = c(0.5, 0), cex=1.2)
    graphics::text(p1_sub2$x, p1_sub2$y, stars.pval(p1_sub2$p.value), col = "white", adj = c(0.5, 2), cex=1.2)
  }
  if (!is.na(adj_var)) {
    lm_extracted <- subset(lm_extracted, adj_x_pval <= 0.05)
    if (nrow(lm_extracted) > 0){
      graphics::rect(xleft = lm_extracted$x-.45, 
                     ybottom = lm_extracted$y-.45,
                     xright = lm_extracted$x+.45,
                     ytop = lm_extracted$y+.45)
    }
  }
}


correlation_p_value_matrix <- function(data, relevant_vars, n_cols, cor_method = "spearman", Y=Y, X=X) {
  analytes_temp <- analytes
  analytes_temp$Target_apt <- paste0(analytes_temp$Target, " (", analytes_temp$AptName, ")")
  # Filter relevant variables for the correlation matrix
  #relevant_vars_apt <- analytes_temp$AptName[match(colnames(Y), analytes_temp$Target_apt)]
  Y <- Y[,order(colnames(Y))]
  dat_correlation <- cbind(Y,X) %>%
    dplyr::select(all_of(relevant_vars))
    # Compute p-values 
  res2 <- Hmisc::rcorr(as.matrix(dat_correlation),
                       type = cor_method)
  corr_pval <- as.data.frame(res2$P) %>%
    dplyr::select(all_of(relevant_vars[1:n_cols]))
  corr_pval = corr_pval[(n_cols + 1):nrow(corr_pval),]
  corr_pval <- corr_pval[,order(colnames(corr_pval))]
  return(as.matrix(corr_pval))
}
```

# Correlations

```{r results='asis', dpi=1200}
#colnames_M <- paste0(colnames_M,"_",prot_heatmap)
png(height = 3000, width = 6000, file = "/Users/pylell/Dropbox/TODAY glycemic manuscript [shared]/Analysis output/local_T2D_glycemia_heatmap.png", res = 300)
corr_plot_modified_nodict(data=df_t2d, 
                   Y=df_t2d[,seq_include], 
                 X=df_t2d[,c("acprg", "gir_190", "airg","di")],
                 cor_method="spearman", adj_var = NA,
                 colnames_M=prot_include,
                 rownames_M=c("acprg", "gir_190", "airg","di"))
dev.off()
```

