---
title: "Proteomics and DKD"
author: "Laura Pyle & Tim Vigers"
date: "today"
format:
  html:
    toc: true
    toc-depth: 5
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r libraries}
#| include: false
library(readxl)
library(tidyverse)
library(psych)
library(corrplot)
library(ggpmisc)
library(pander)
library(Seurat)
library(bnlearn)
```

```{r data cleaning}
# Import proteomics data for RH and IMPROVE
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/Renal HERITAGE/Somalogic data/analytes.Rdata")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/Renal HERITAGE/Somalogic data/rh_soma.Rdata")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/IMPROVE T2D/Somalogic data/improve_soma.Rdata")
# Format and combine
improve_soma <- improve_soma %>% select(SampleDescription, TimePoint, contains("seq."))
rh_soma <- rh_soma %>% select(SampleDescription, TimePoint, contains("seq."))
soma <- rbind(improve_soma, rh_soma)
# Import top proteins for MIC, MAC, etc.
top_mic <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "MIC CPH")
top_mic <- top_mic %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_mac <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "MAC CPH")
top_mac <- top_mac %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_hyp <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HYP CPH")
top_hyp <- top_hyp %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_rapid <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "RAPID CPH")
top_rapid <- top_rapid %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_htn_sbp <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HTN with SBP CPH")
top_htn_sbp <- top_htn_sbp %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_htn <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HTN CPH")
top_htn <- top_htn %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_neuro <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "NEURO CPH")
top_neuro <- top_neuro %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_retino <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "RETINO CPH")
top_retino <- top_retino %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_glyc <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "GLYC CPH")
top_glyc <- top_glyc %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)

top_glyc_a1c <- read_excel("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "GLYC with A1c CPH")
top_glyc_a1c <- top_glyc_a1c %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(estimate), n = 5) %>%
  pull(AptName)
# Import cleaned data from Ye Ji
df <- read.csv("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/Proteomics and DKD/Data_Clean/clean_dataset.csv")
# Merge clinical and SOMA data
soma <- soma %>%
  rename(record_id = "SampleDescription", visit = "TimePoint") %>%
  mutate(
    record_id = sub("IT2D-", "IT_", record_id),
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery"
    )
  )
df <- full_join(df, soma, by = c("record_id", "visit"))
# Import Olink data and combine
olink_map <- read.csv("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/Olink Data/Data_Clean/olink_id_map.csv")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/IMPROVE T2D/Olink Data/improve_olink_plasma.Rdata")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/IMPROVE T2D/Olink Data/improve_olink_urine.Rdata")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/Renal HERITAGE/Olink Data/rh_olink_plasma.Rdata")
load("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/Renal HERITAGE/Olink Data/rh_olink_urine.Rdata")
olink_plasma <- rbind(improve_olink_plasma, rh_olink_plasma)
olink_urine <- rbind(improve_olink_urine, rh_olink_urine)
# Add visit column, format IDs
olink_plasma$visit <- sapply(str_split(olink_plasma$record_id, "_"), "[", 3)
olink_plasma <- olink_plasma %>%
  mutate(
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery",
      is.na(visit) ~ "baseline"
    ),
    record_id = sub("_BL|_3M|_12M", "", record_id)
  )
olink_urine$visit <- sapply(str_split(olink_urine$record_id, "_"), "[", 3)
olink_urine <- olink_urine %>%
  mutate(
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery",
      is.na(visit) ~ "baseline"
    ),
    record_id = sub("_BL|_3M|_12M", "", record_id)
  )
# Baseline visit only for IMPROVE
df = df %>% filter(visit=="baseline")
# Combine
plasma = left_join(df,olink_plasma,by = c("record_id", "visit"))
urine = left_join(df,olink_urine,by = c("record_id", "visit"))
# Import RDS file from Michigan (stored locally because it's huge and importing from the shared drive takes forever)
so = readRDS("/Users/timvigers/Library/CloudStorage/Dropbox/Work/CHCO/Petter Bjornstad/scRNA/Data_Raw/PB_68samples_harmonyIntegration_092322_Fadhl.RDS")
# Get cell types and gene list
cell_types = levels(x = so)
genes = rownames(so@assays$RNA@data)
```

```{r functions}
# Define correlation function
cor_and_plot <- function(data = df, vars) {
  # Format matrix
  d <- data[, c(vars, "acr_u")]
  n <- c(analytes$Target[match(vars, analytes$AptName)], "UACR")
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  names(d) <- n
  # Correlations
  M <- corr.test(d, normal = F, method = "spearman")
  corrplot(M$r,
           p.mat = M$p, method = "circle", type = "lower", insig = "blank",
           addCoef.col = "white", diag = FALSE
  )
  # Print a nice looking table
  r <- data.frame(M$r)
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  pander(r)
}
# Function for converting SOMAScan to Olink
soma_to_olink = function(soma_ids){
  ids = list()
  length(ids) = length(soma_ids)
  ids = lapply(soma_ids, function(n){
    uni = analytes$UniProt[analytes$AptName==n]
    olink = olink_map$OlinkID[olink_map$Uniprot.ID==uni]
    return(as.character(na.omit(olink)))
  })
  names(ids) = soma_ids
  ids = ids[lapply(ids,length)>0]
  return(ids)
}
# Plot agreement
soma_olink_plots = function(top_olink,data){
  invisible(lapply(names(top_olink), function(n){
    title = analytes$TargetFullName[analytes$AptName==n]
    plots = lapply(top_olink[n][[1]], function(o){
      panel = olink_map$Panel[olink_map$OlinkID==o]
      p = ggplot(data,aes_string(x=n,y = o)) + 
        geom_point(alpha=0.5) +
        stat_poly_line(se=F) +
        stat_poly_eq(aes(label = paste(after_stat(eq.label),
                                 after_stat(rr.label), sep = "*\", \"*")),
                     label.y = 0.2,label.x = 0.9) +
        theme_bw() +
        ylab(paste0(o," [",panel,"]")) + ggtitle(title)
      print(p)
    })
  }))
}
# UMAP function
umap_plot = function(seurat_object = so,vars){
  # Get Entrez Gene IDs
  entrez = analytes$EntrezGeneSymbol[match(vars,analytes$AptName)]
  entrez = entrez[entrez %in% genes]
  # Plot each gene
  invisible(lapply(entrez, function(e){
    p = FeaturePlot(seurat_object, features = e)
    p = LabelClusters(plot = p, id = "ident")
    print(p)
  }))
}
```

# Data Summary

```{r}
skimr::skim(df %>% select(-contains("seq")))
```

# MAC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mac,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mac,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_mac)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_mac_olink = soma_to_olink(top_mac)
soma_olink_plots(top_olink = top_mac_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_mac_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_mac)
```

# MIC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mic,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mic,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_mic)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_mic_olink = soma_to_olink(top_mic)
soma_olink_plots(top_olink = top_mic_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_mic_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_mic)
```

# HYP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_hyp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_hyp,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_hyp)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_hyp_olink = soma_to_olink(top_hyp)
soma_olink_plots(top_olink = top_hyp_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_hyp_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_hyp)
```

# RAPID

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_rapid,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_rapid,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_rapid)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_rapid_olink = soma_to_olink(top_rapid)
soma_olink_plots(top_olink = top_rapid_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_rapid_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_rapid)
```

# HTN with SBP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_htn_sbp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn_sbp,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_htn_sbp)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_htn_sbp_olink = soma_to_olink(top_htn_sbp)
soma_olink_plots(top_olink = top_htn_sbp_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_htn_sbp_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_htn_sbp)
```

# HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_htn,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_htn)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_htn_olink = soma_to_olink(top_htn)
soma_olink_plots(top_olink = top_htn_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_htn_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_htn)
```

# NEURO

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_neuro,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_neuro,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_neuro)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_neuro_olink = soma_to_olink(top_neuro)
soma_olink_plots(top_olink = top_neuro_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_neuro_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_neuro)
```

# RETINO

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_retino,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_retino,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_retino)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_retino_olink = soma_to_olink(top_retino)
soma_olink_plots(top_olink = top_retino_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_retino_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_retino)
```

# GLYC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_glyc,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_glyc,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_glyc)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_glyc_olink = soma_to_olink(top_glyc)
soma_olink_plots(top_olink = top_glyc_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_glyc_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_glyc)
```

# GLYC with A1c

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_glyc_a1c,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_glyc_a1c,analytes$AptName)])`, respectively).

## SOMAScan correlation matrix (with UACR)

```{r results='asis'}
cor_and_plot(vars = top_glyc_a1c)
```

## Olink associations with SOMAScan

### Plasma

```{r warning=FALSE}
top_glyc_a1c_olink = soma_to_olink(top_glyc_a1c)
soma_olink_plots(top_olink = top_glyc_a1c_olink,data = plasma)
```

### Urine

```{r warning=FALSE}
soma_olink_plots(top_olink = top_glyc_a1c_olink,data = urine)
```

## scRNA-seq

```{r message=FALSE,warning=FALSE}
umap_plot(so,top_glyc_a1c)
```

# Questions

1. Should we be limiting this analysis to baseline for those in IMPROVE?
  - If not we will need to fit mixed models for the repeated measures.
