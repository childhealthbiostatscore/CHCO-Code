---
title: "Proteomics and DKD"
author: "Laura Pyle, Ye Ji Choi & Tim Vigers"
date: "today"
date-format: long
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    code-fold: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
execute:
  echo: false
  message: false
---

```{r libraries}
#| include: false
library(readxl)
library(tidyverse)
library(psych)
library(corrplot)
library(ggpmisc)
library(pander)
library(Seurat)
library(clusterProfiler)
library(ReactomePA)
library(enrichplot)
library(ggrepel)
library(patchwork)
library(gtsummary)
library(arsenal)
library(pedbp)
# Print all pander tables
panderOptions("knitr.auto.asis", FALSE)
```

```{r data cleaning}
#| include: false
# Import top proteins for MIC, MAC, etc. at baseline
top_mic_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "MIC CPH")
de_genes_mic <- top_mic_df[top_mic_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_mic <- setNames(de_genes_mic$estimate, de_genes_mic$EntrezGeneID)
top_mic <- top_mic_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_mac_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "MAC CPH")
de_genes_mac <- top_mac_df[top_mac_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_mac <- setNames(de_genes_mac$estimate, de_genes_mac$EntrezGeneID)
top_mac <- top_mac_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_hyp_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HYP CPH")
de_genes_hyp <- top_hyp_df[top_hyp_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_hyp <- setNames(de_genes_hyp$estimate, de_genes_hyp$EntrezGeneID)
top_hyp <- top_hyp_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_rapid_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "RAPID CPH")
de_genes_rapid <- top_rapid_df[top_rapid_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_rapid <- setNames(de_genes_rapid$estimate, de_genes_rapid$EntrezGeneID)
top_rapid <- top_rapid_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_htn_sbp_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HTN with SBP CPH")
de_genes_htn_sbp <- top_htn_sbp_df[top_htn_sbp_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_htn_sbp <- setNames(de_genes_htn_sbp$estimate, de_genes_htn_sbp$EntrezGeneID)
top_htn_sbp <- top_htn_sbp_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_htn_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HTN CPH")
de_genes_htn <- top_htn_df[top_htn_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_htn <- setNames(de_genes_htn$estimate, de_genes_htn$EntrezGeneID)
top_htn <- top_htn_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_neuro_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "NEURO CPH")
de_genes_neuro <- top_neuro_df[top_neuro_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_neuro <- setNames(de_genes_neuro$estimate, de_genes_neuro$EntrezGeneID)
top_neuro <- top_neuro_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_retino_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "RETINO CPH")
de_genes_retino <- top_retino_df[top_retino_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_retino <- setNames(de_genes_retino$estimate, de_genes_retino$EntrezGeneID)
top_retino <- top_retino_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_glyc_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "GLYC CPH")
de_genes_glyc <- top_glyc_df[top_glyc_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_glyc <- setNames(de_genes_glyc$estimate, de_genes_glyc$EntrezGeneID)
top_glyc <- top_glyc_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_glyc_a1c_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "GLYC with A1c CPH")
de_genes_glyc_a1c <- top_glyc_a1c_df[top_glyc_a1c_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_glyc_a1c <- setNames(de_genes_glyc_a1c$estimate, de_genes_glyc_a1c$EntrezGeneID)
top_glyc_a1c <- top_glyc_a1c_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
# Import 10 year results
top_mac_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "MAC_moderated_FDR")
de_genes_mac_10 <- top_mac_df_10[top_mac_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_mac_10 <- setNames(de_genes_mac_10$logFC, de_genes_mac_10$EntrezGeneID)
top_mic_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "MIC_moderated_FDR")
de_genes_mic_10 <- top_mic_df_10[top_mic_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_mic_10 <- setNames(de_genes_mic_10$logFC, de_genes_mic_10$EntrezGeneID)
top_hyp_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "hyperfilt_moderated_FDR")
de_genes_hyp_10 <- top_hyp_df_10[top_hyp_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_hyp_10 <- setNames(de_genes_hyp_10$logFC, de_genes_hyp_10$EntrezGeneID)
top_rapid_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "rapid_moderated_FDR")
de_genes_rapid_10 <- top_rapid_df_10[top_rapid_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_rapid_10 <- setNames(de_genes_rapid_10$logFC, de_genes_rapid_10$EntrezGeneID)
top_htn_sbp_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "htn_with_SBP_moderated_FDR")
de_genes_htn_sbp_10 <- top_htn_sbp_df_10[top_htn_sbp_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_htn_sbp_10 <- setNames(de_genes_htn_sbp_10$logFC, de_genes_htn_sbp_10$EntrezGeneID)
top_htn_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "htn_moderated_FDR")
de_genes_htn_10 <- top_htn_df_10[top_htn_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_htn_10 <- setNames(de_genes_htn_10$logFC, de_genes_htn_10$EntrezGeneID)
top_neuro_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "neuro_moderated_FDR")
de_genes_neuro_10 <- top_neuro_df_10[top_neuro_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_neuro_10 <- setNames(de_genes_neuro_10$logFC, de_genes_neuro_10$EntrezGeneID)
top_glyc_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "glyc_moderated_FDR")
de_genes_glyc_10 <- top_glyc_df_10[top_glyc_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_glyc_10 <- setNames(de_genes_glyc_10$logFC, de_genes_glyc_10$EntrezGeneID)
top_glyc_a1c_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "glyc_with_a1c_moderated_FDR")
de_genes_glyc_a1c_10 <- top_glyc_a1c_df_10[top_glyc_a1c_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_glyc_a1c_10 <- setNames(de_genes_glyc_a1c_10$logFC, de_genes_glyc_a1c_10$EntrezGeneID)
# Import and clean data
df <- read.csv("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Data Harmonization/Data Clean/harmonized_dataset.csv", na.strings = "")
df <- df %>%
  filter(
    study %in% c("CROCODILE", "IMPROVE", "RENAL-HEIR"),
    !grepl("IT2D", co_enroll_id), participation_status == "Participated"
  ) %>%
  select(
    record_id, co_enroll_id, visit, group, age, sex, race, ethnicity,
    diabetes_duration,sglti_timepoint,sglt2i_ever, elevated_albuminuria,
    bmi, hba1c, gfr_bsa_plasma, gfr_raw_plasma, gfr_bsa_plasma_urine,
    gfr_raw_plasma_urine, acr_u, map,sbp,dbp,height,eGFR_fas_cr
  ) %>%
  group_by(record_id, visit) %>%
  summarise(across(where(is.character), ~ last(na.omit(.x))),
            across(where(is.factor), ~ last(na.omit(.x))),
            across(where(is.numeric), ~ mean(.x, na.rm = T)),
            .groups = "drop"
  ) %>%
  mutate_all(~ ifelse(is.nan(.), NA, .))
# Import proteomics data for RH and IMPROVE
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Somalogic data/analytes.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Somalogic data/rh_soma.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/IMPROVE T2D/Somalogic data/improve_soma.Rdata")
# Format and combine
improve_soma <- improve_soma %>% select(SampleDescription, TimePoint, contains("seq."))
rh_soma <- rh_soma %>% select(SampleDescription, TimePoint, contains("seq."))
soma <- rbind(improve_soma, rh_soma)
# Transform
soma[, 3:ncol(soma)] <- lapply(soma[, 3:ncol(soma)], log)
# Merge clinical and SOMA data
soma <- soma %>%
  rename(record_id = "SampleDescription", visit = "TimePoint") %>%
  mutate(
    record_id = sub("IT2D-", "IT_", record_id),
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery"
    )
  )
# BP percentiles and HTN
df$bp_age = df$age * 12
df$bp_age[df$bp_age >= 19*12] = 19*12 - 1e-8
bps <- p_bp(
  q_sbp = df$sbp, q_dbp = df$dbp, age = df$bp_age,
  male = df$sex == "Male", height = df$height
)
df$sbp_perc = bps$sbp_percentile
df$sbp_perc[df$age >= 19]=NA
df$dbp_perc = bps$dbp_percentile
df$dbp_perc[df$age >= 19]=NA
df$htn = df$sbp >= 130 | df$dbp >= 80 | df$sbp_perc >= 0.95 | df$dbp_perc >= 0.95
df$htn[is.na(df$htn)] = F
df$htn[is.na(df$sbp) & is.na(df$dbp) & is.na(df$sbp_perc) & is.na(df$dbp_perc)] = NA
df$htn = factor(df$htn,levels = c(F,T),labels = c("HTN-","HTN+"))
# Hyperfiltration
df$hyp = factor(df$eGFR_fas_cr >= 135,levels = c(F,T),labels = c("eGFR < 135","eGFR >= 135"))
# UACR
df$elevated_uacr <- factor(df$acr_u >= 30,labels = c("UACR < 30","UACR >= 30"))
# Merge
df <- full_join(df, soma, by = c("record_id", "visit"))
# Import Olink data and combine
olink_map <- read.csv("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Olink Data/Data_Clean/olink_id_map.csv")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/IMPROVE T2D/Olink Data/improve_olink_plasma.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/IMPROVE T2D/Olink Data/improve_olink_urine.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Olink Data/rh_olink_plasma.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Olink Data/rh_olink_urine.Rdata")
olink_plasma <- rbind(improve_olink_plasma, rh_olink_plasma)
olink_urine <- rbind(improve_olink_urine, rh_olink_urine)
# Log transform
olink_plasma[, 3:ncol(olink_plasma)]
olink_urine[, 3:ncol(olink_urine)]
# Add visit column, format IDs
olink_plasma$visit <- sapply(str_split(olink_plasma$record_id, "_"), "[", 3)
olink_plasma <- olink_plasma %>%
  mutate(
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery",
      is.na(visit) ~ "baseline"
    ),
    record_id = sub("_BL|_3M|_12M", "", record_id)
  )
olink_urine$visit <- sapply(str_split(olink_urine$record_id, "_"), "[", 3)
olink_urine <- olink_urine %>%
  mutate(
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery",
      is.na(visit) ~ "baseline"
    ),
    record_id = sub("_BL|_3M|_12M", "", record_id)
  )
# Baseline visit only for IMPROVE
df <- df %>% filter(visit == "baseline")
# Combine
plasma <- left_join(df, olink_plasma, by = c("record_id", "visit"))
urine <- left_join(df, olink_urine, by = c("record_id", "visit"))
# Limit df to those with all data
ids = intersect(soma$record_id,olink_plasma$record_id)
df = df %>% filter(record_id %in% ids)
# Read in scRNA object
so <- readRDS("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/scRNA/Data_Clean/seurat_data_no_computations.RDS")
# Limit to RH/IMPROVE baseline visit
so <- so[, !grepl("_12M", so$michigan_id)]
# Limit to those with SOMA and Olink
so$michigan_id = sub("_BL","",so$michigan_id)
so <- so[, so$michigan_id %in% ids]
# Combined groups
so$diabetes <- sub("i", "", so$T2D_HC_Phil)
so$SGLT2i <- factor(so$T2D_HC_Phil,
                    levels = c("HC", "T2D", "T2Di"),
                    labels = c("SGLT2i-", "SGLT2i-", "SGLT2i+")
)
so$elevated_uacr = df$elevated_uacr[match(so$michigan_id,df$record_id)]
so$htn = df$htn[match(so$michigan_id,df$record_id)]
so$hyp = df$hyp[match(so$michigan_id,df$record_id)]
# Normalize and scale
so <- NormalizeData(so)
so <- ScaleData(so, features = rownames(so))
# PCA
so <- RunPCA(so, features = VariableFeatures(object = so))
# Cluster cells
so <- FindNeighbors(so)
so <- FindClusters(so)
# Perform UMAP
so <- RunUMAP(so, dims = 1:20)
# General cell types as identifiers
so$generaltype <- sub("_.*", "", so$LR_clusters)
Idents(so) <- so$generaltype
```

```{r functions}
# Define correlation function
cor_and_plot_soma <- function(data = df, vars) {
  # Format matrix
  d <- data[,c(vars, "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma")]
  n <- c(
    analytes$Target[match(vars, analytes$AptName)],
    "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma"
  )
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  names(d) <- n
  # Correlations
  M <- corr.test(data.matrix(d), normal = F, method = "spearman")
  corrplot(round(M$r,3),
           p.mat = M$p, method = "circle", type = "lower", insig = "blank",
           addCoef.col = "white", diag = FALSE
  )
  # Print a nice looking table
  r <- data.frame(round(M$r,3))
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Coefficients")
  cat("\n")
}
# Function for converting SOMAScan to Olink
soma_to_olink <- function(soma_ids) {
  ids <- list()
  length(ids) <- length(soma_ids)
  ids <- lapply(soma_ids, function(n) {
    uni <- analytes$UniProt[analytes$AptName == n]
    olink <- olink_map$OlinkID[olink_map$Uniprot.ID == uni]
    return(as.character(na.omit(olink)))
  })
  names(ids) <- soma_ids
  ids <- ids[lapply(ids, length) > 0]
  return(ids)
}
# Plot agreement
soma_olink_corr <- function(top_olink, data) {
  # Correlations
  M <- corr.test(x= data.matrix(data[,names(top_olink)]),
                 y = data.matrix(data[,as.character(top_olink)]), 
                 normal = F, method = "spearman")
  # Print a nice looking table
  r <- data.frame(round(M$r,3))
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Coefficients")
  cat("\n")
  # Print p values
  p <- data.frame(M$p)
  p[] <- sapply(round(p,3), format.pval, eps = 0.001)
  cat("\n")
  pander(p, caption = "P values")
  cat("\n")
}
# Correlate Olink with UACR
cor_and_plot_olink <- function(plasma_df = plasma, 
                               urine_df = urine, vars) {
  # Get Olink names
  vars <- as.character(vars)
  # Format matrices
  plasma_df <- plasma_df[
    plasma_df$group == "Type 2 Diabetes",
    c(vars, "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma")
  ]
  urine_df <- urine_df[
    urine_df$group == "Type 2 Diabetes",
    c(vars, "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma")
  ]
  # Gene names
  n <- c(olink_map$Assay[match(vars, olink_map$OlinkID)], "acr_u", "map", 
         "gfr_raw_plasma", "gfr_bsa_plasma")
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  names(plasma_df) <- n
  names(urine_df) <- n
  # Plasma correlations
  M_plasma <- corr.test(data.matrix(plasma_df), normal = F, method = "spearman")
  corrplot(M_plasma$r,
           p.mat = M_plasma$p, method = "circle", type = "lower",
           insig = "blank", addCoef.col = "white", diag = FALSE, title = "Plasma"
  )
  # Print nice looking table
  r <- data.frame(M_plasma$r)
  emphasize.strong.cells(which(M_plasma$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Plasma coefficients")
  cat("\n")
  # Urine correlations
  M_urine <- corr.test(data.matrix(urine_df), normal = F, method = "spearman")
  corrplot(M_urine$r,
           p.mat = M_urine$p, method = "circle", type = "lower",
           insig = "blank", addCoef.col = "white", diag = FALSE, title = "Urine"
  )
  # Print nice looking table
  r <- data.frame(M_urine$r)
  emphasize.strong.cells(which(M_urine$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Urine coefficients")
  cat("\n")
}
# UMAP function
umap_plot <- function(seurat_object = so, vars) {
  # Get Entrez Gene IDs
  entrez <- analytes$EntrezGeneSymbol[match(vars, analytes$AptName)]
  entrez <- entrez[entrez %in% rownames(so)]
  # Plot each gene
  invisible(lapply(entrez, function(e) {
    p <- FeaturePlot(seurat_object, features = e)
    p <- LabelClusters(plot = p, id = "ident")
    cat("\n")
    print(p)
    cat("\n")
  }))
}
# DE function
de <- function(seurat_object = so, outcome, ref_group, vars) {
  # Get Entrez Gene IDs
  entrez <- analytes$EntrezGeneSymbol[match(vars, analytes$AptName)]
  entrez <- entrez[entrez %in% rownames(seurat_object)]
  entrez <- unique(entrez)
  # Find cells where most highly expressed
  cells <- FetchData(seurat_object, vars = entrez,slot = "counts")
  cells$type <- seurat_object$generaltype
  cell_count = data.frame(table(cells$type))
  colnames(cell_count) = c("Cell.Type","n Cells")
  cells <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
    column_to_rownames("type")
  max <- lapply(cells, function(c) {
    rownames(cells)[order(c,decreasing = T)[1:2]]
  })
  # DE testing
  de_tables <- lapply(names(max), function(n) {
    # Compare expression in two highest expressing cell types
    c1 = tryCatch(FindMarkers(seurat_object,features = n, ident.1 = ref_group,
                              group.by = outcome, subset.ident = max[[n]][1],
                              logfc.threshold = 0, verbose = F),
                  error=function(err) NULL,warning=function(war) NULL)
    if(!is.null(c1)){
      c1$`Cell Type` = max[[n]][1]
      c1$`Gene` = n
    }
    c2 = tryCatch(FindMarkers(seurat_object,features = n, ident.1 = ref_group,
                              group.by = outcome, subset.ident = max[[n]][2],
                              logfc.threshold = 0, verbose = F),
                  error=function(err) NULL,warning=function(war) NULL)
    if(!is.null(c2)){
      c2$`Cell Type` = max[[n]][2]
      c2$`Gene` = n
    }
    # Merge tables if necessary
    t = do.call(rbind,list(c1,c2))
    return(t)
  })
  # Combine rows and print
  de_table <- data.frame(do.call(rbind, de_tables))
  de_table <- de_table[order(de_table$Gene), ]
  # Plots
  invisible(apply(de_table,1, function(r) {
    g = r["Gene"]
    i = r["Cell.Type"]
    adjp = format.pval(as.numeric(r["p_val_adj"]),eps = 0.001,digits = 3)
    fc = round(as.numeric(r["avg_log2FC"]),3)
    t = bquote(log[2]~FC==~.(fc)~(q==~.(adjp)))
    p <- VlnPlot(seurat_object,
                 features = g, group.by = outcome,
                 idents = i, pt.size = 0.01, log = F
    ) 
    p = p + 
      annotate(geom = 'text', label = deparse(t), 
               x = 1.5, y = max(p$data[,1]), parse=TRUE) + 
      ggtitle(paste(g,"in",i)) + 
      theme(legend.position = "none",axis.title.x = element_blank())
    cat("\n")
    print(p)
    cat("\n")
  }))
  de_table = de_table %>% select(Gene,Cell.Type,avg_log2FC,pct.1,pct.2,p_val,p_val_adj)
  de_table=left_join(de_table,cell_count,by = join_by(Cell.Type))
  rownames(de_table)=NULL
  cat("\n")
  pander(de_table)
  cat("\n")
}
# scRNA correlation with proteomics
scRNA_corr <- function(seurat_object = so, vars) {
  # Get Entrez Gene IDs
  entrez <-
    as.list(analytes$EntrezGeneSymbol[match(vars, analytes$AptName)])
  names(entrez) <- vars
  entrez <- entrez[entrez %in% rownames(seurat_object)]
  entrez <- entrez[!duplicated(entrez)]
  olink <- soma_to_olink(vars)
  # Find cells where most highly expressed
  cells <- FetchData(seurat_object, vars = as.character(entrez))
  cells$type <- seurat_object$generaltype
  cell_counts = data.frame(table(cells$type))
  cell_perc <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ mean(.x>0, na.rm = TRUE))) %>%
    column_to_rownames("type")
  cells <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
    column_to_rownames("type")
  max <- lapply(cells, function(c) {
    rownames(cells)[order(c,decreasing = T)[1:2]]
  })
  w = which(unlist(lapply(cell_perc,function(c){any(c>=0.1)})))
  # Plot correlations in first cell type
  invisible(lapply(names(max)[w], function(n) {
    # Expression by cell type and ID
    avg_exp <- subset(seurat_object, idents = max[[n]][1])
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    # Get IDs
    prot_soma <- names(entrez[which(entrez == n)])
    prot_olink <- olink[[prot_soma]]
    # Plot linear model
    t <- left_join(df[, c("record_id", prot_soma)], avg_exp,
                   by = join_by(record_id)
    )
    p_soma <- ggplot(t, aes_string(x = n, y = prot_soma)) +
      geom_point(alpha = 0.5) +
      stat_poly_line(se = F) +
      stat_poly_eq(
        aes(label = paste(after_stat(eq.label),
                          after_stat(rr.label),
                          after_stat(p.value.label),
                          sep = "*\", \"*"
        ))
      ) +
      xlab(paste0("Mean ", n, " expression in ", max[[n]][1])) +
      theme_bw()
    cat("\n")
    cat("### SOMAScan")
    cat("\n")
    print(p_soma)
    cat("\n")
    if (!is.null(prot_olink)) {
      # Plasma
      t <- left_join(plasma[, c("record_id", prot_olink)], avg_exp,
                     by = join_by(record_id)
      )
      p_plasma <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
                            after_stat(rr.label),
                            after_stat(p.value.label),
                            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][1])) +
        theme_bw()
      cat("\n")
      cat("### Plasma Olink")
      cat("\n")
      print(p_plasma)
      cat("\n")
      # Urine
      t <- left_join(urine[, c("record_id", prot_olink)], avg_exp,
                     by = join_by(record_id)
      )
      p_urine <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
                            after_stat(rr.label),
                            after_stat(p.value.label),
                            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][1])) +
        theme_bw()
      cat("\n")
      cat("### Urine Olink")
      cat("\n")
      print(p_urine)
      cat("\n")
    }
  }))
  # Plot correlations in second cell type
  invisible(lapply(names(max)[w], function(n) {
    # Expression by cell type and ID
    avg_exp <- subset(seurat_object, idents = max[[n]][2])
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    # Get IDs
    prot_soma <- names(entrez[which(entrez == n)])
    prot_olink <- olink[[prot_soma]]
    # Plot linear model
    t <- left_join(df[, c("record_id", prot_soma)], avg_exp,
                   by = join_by(record_id)
    )
    p_soma <- ggplot(t, aes_string(x = n, y = prot_soma)) +
      geom_point(alpha = 0.5) +
      stat_poly_line(se = F) +
      stat_poly_eq(
        aes(label = paste(after_stat(eq.label),
                          after_stat(rr.label),
                          after_stat(p.value.label),
                          sep = "*\", \"*"
        ))
      ) +
      xlab(paste0("Mean ", n, " expression in ", max[[n]][2])) +
      theme_bw()
    cat("\n")
    cat("### SOMAScan")
    cat("\n")
    print(p_soma)
    cat("\n")
    if (!is.null(prot_olink)) {
      # Plasma
      t <- left_join(plasma[, c("record_id", prot_olink)], avg_exp,
                     by = join_by(record_id)
      )
      p_plasma <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
                            after_stat(rr.label),
                            after_stat(p.value.label),
                            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][2])) +
        theme_bw()
      cat("\n")
      cat("### Plasma Olink")
      cat("\n")
      print(p_plasma)
      cat("\n")
      # Urine
      t <- left_join(urine[, c("record_id", prot_olink)], avg_exp,
                     by = join_by(record_id)
      )
      p_urine <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
                            after_stat(rr.label),
                            after_stat(p.value.label),
                            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]][2])) +
        theme_bw()
      cat("\n")
      cat("### Urine Olink")
      cat("\n")
      print(p_urine)
      cat("\n")
    }
  }))
}
# scRNA correlation with outcomes
scRNA_corr_out <- function(seurat_object = so, vars,outcome) {
  # Get Entrez Gene IDs
  entrez <-
    as.list(analytes$EntrezGeneSymbol[match(vars, analytes$AptName)])
  names(entrez) <- vars
  entrez <- entrez[entrez %in% rownames(seurat_object)]
  entrez <- entrez[!duplicated(entrez)]
  # Find cells where most highly expressed
  cells <- FetchData(seurat_object, vars = as.character(entrez))
  cells$type <- seurat_object$generaltype
  cell_counts = data.frame(table(cells$type))
  cell_perc <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ mean(.x>0, na.rm = TRUE))) %>%
    column_to_rownames("type")
  cells <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
    column_to_rownames("type")
  max <- lapply(cells, function(c) {
    rownames(cells)[order(c,decreasing = T)[1:2]]
  })
  w = which(unlist(lapply(cell_perc,function(c){any(c>=0.1)})))
  # Get average expression
  # First cells
  first = sapply(max[w],"[[",1)
  f = lapply(names(first),function(n){
    ctype = as.character(first[n])
    avg_exp <- subset(seurat_object, idents = ctype)
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    colnames(avg_exp) = c(paste(n,"in",ctype),"record_id")
    data.frame(avg_exp,check.names = F)
  })
  f = purrr::reduce(f,full_join,by = "record_id")
  f = left_join(f,df[,c("record_id",outcome)],by = join_by(record_id))
  x = f %>% dplyr::select(-record_id,-all_of(outcome))
  y = f %>% dplyr::select(all_of(outcome))
  M = corr.test(x,y,method = "spearman")
  # Print nice looking table
  r <- data.frame(M$r)
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Correlation in Top Cell Type")
  cat("\n")
  # Second cells
  second = sapply(max[w],"[[",2)
  s = lapply(names(second),function(n){
    ctype = as.character(second[n])
    avg_exp <- subset(seurat_object, idents = ctype)
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    colnames(avg_exp) = c(paste(n,"in",ctype),"record_id")
    data.frame(avg_exp,check.names = F)
  })
  s = purrr::reduce(s,full_join,by = "record_id")
  s = left_join(s,df[,c("record_id",outcome)],by = join_by(record_id))
  x = s %>% dplyr::select(-record_id,-all_of(outcome))
  y = s %>% dplyr::select(all_of(outcome))
  M = corr.test(x,y,method = "spearman")
  # Print nice looking table
  r <- data.frame(M$r)
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  cat("\n")
  pander(r, caption = "Correlation in Second Cell Type")
  cat("\n")
}
# Volcano plot
volcano <- function(data, lab = "Target", xcol = "estimate", ycol = "p.value", top = 3,
                    xlimit = c(-1, 1), ylimit = c(0, -log10(10e-7)),
                    xlabel = "HR", pCutoff = 0.05, overlaps = 10,
                    log_t = T) {
  data <- as.data.frame(data)
  t <- data[data[, "adj.p.value"] <= pCutoff, ]
  if (log_t) {
    t <- t[order(abs(log(t[, xcol])), decreasing = T), ]
  } else {
    t <- t[order(abs(t[, xcol]), decreasing = T), ]
  }
  data$top <- data[, "AptName"] %in% t[1:top, "AptName"]
  data$logp <- -log10(data[, ycol])
  data$fc <- data[, xcol]
  data$sig <- data[, ycol] <= pCutoff
  p <- ggplot(data = data, aes(x = fc, y = logp, color = sig)) +
    geom_hline(yintercept = -log10(pCutoff), linetype = "dashed") +
    geom_point(size = 2) +
    geom_label_repel(
      data = data[data$top, ], aes(label = Target), color = "black",
      max.overlaps = overlaps
    ) +
    scale_color_manual(values = c("grey", "#3e6dbf")) +
    xlab(xlabel) +
    ylab(bquote(~ -Log[10] ~ italic(P))) +
    theme_bw() +
    theme(legend.position = "none")
  return(p)
}
# Compare soluble omics by SGLT2i status
soluble_comp = function(data = df, vars){
  data = data.frame(data)
  f = as.formula(paste0("sglt2i_ever~",paste0(vars,collapse = "+")))
  labs = analytes$EntrezGeneSymbol[match(vars,analytes$AptName)]
  names(labs) = vars
  t = tableby(f,data = data,numeric.test="kwt",
              numeric.stats=c("Nmiss", "median", "q1q3"))
  summary(t,pfootnote = T,labelTranslations = labs)
}
# GSEA
pathway_analysis <- function(de_genes) {
  # Log transform if necessary
  if(!any(de_genes < 0)){
    de_genes = log(de_genes)
  }
  # Upregulated and downregulated
  up = names(de_genes)[de_genes > 0]
  up = up[!is.na(up)]
  down = names(de_genes)[de_genes < 0]
  down = down[!is.na(down)]
  # Reactome enrichment
  upreact = enrichPathway(up)
  upreact = setReadable(upreact, "org.Hs.eg.db", "ENTREZID")
  downreact = enrichPathway(down)
  downreact = setReadable(downreact, "org.Hs.eg.db", "ENTREZID")
  # Plots
  updot <- dotplot(upreact) + ggtitle("Upregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  upnet <- cnetplot(upreact) + ggtitle("Upregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  downdot <- dotplot(downreact) + ggtitle("Downregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  downnet <- cnetplot(downreact) + ggtitle("Downregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  # Return
  return(list("updot" = updot, "upnet" = upnet,
              "downdot" = downdot, "downnet" = downnet))
}
# Function for comparing two gene lists
# de_gene_list is a named list of multiple gene sets
pathway_comparison <- function(de_gene_list) {
  # Log transform if necessary
  de_gene_list = lapply(de_gene_list,function(l){
    if(!any(l < 0)){
      l = log(l)
    }
    return(l)
  })
  # Upregulated and downregulated
  up = lapply(de_gene_list,function(l){
    return(names(l)[which(l > 0)])
  })
  down = lapply(de_gene_list,function(l){
    return(names(l)[which(l < 0)])
  })
  # Fix names
  up = lapply(up,function(l){
    sub("\\|.*","",l)
  })
  down = lapply(down,function(l){
    sub("\\|.*","",l)
  })
  # Compare with GO enrichment
  upck <- compareCluster(up, fun='enrichPathway')
  downck <- compareCluster(down, fun='enrichPathway')
  # Plots
  updot <- dotplot(upck) + ggtitle("Upregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  upnet <- cnetplot(upck) + ggtitle("Upregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  downdot <- dotplot(downck) + ggtitle("Downregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  downnet <- cnetplot(downck) + ggtitle("Downregulated") + 
    theme(plot.title = element_text(hjust = 0.5))
  # Return
  return(list("updot" = updot, "upnet" = upnet,
              "downdot" = downdot, "downnet" = downnet))
}
```

# Participant characteristics

```{r message = FALSE}
df %>%
  mutate(
    race_ethnicity_condensed = case_when(
      race == "White" & startsWith(ethnicity, "Not") ~ "Non-Hispanic White",
      race == "Black or African American" & startsWith(ethnicity, "Not") ~ 
        "Non-Hispanic Black",
      ethnicity == "Hispanic or Latino" ~ "Hispanic",
      T ~ "Other"
    ),
    soma = case_when(record_id %in% unique(sub("_BL|_12M", "", soma$record_id)) ~ 
                       "Yes", T ~ "No"),
    olink_plasma = case_when(record_id %in% unique(sub("_BL|_12M", "", 
                                                       olink_plasma$record_id)) ~ 
                               "Yes", T ~ "No"),
    olink_urine = case_when(record_id %in% unique(sub("_BL|_12M", "", 
                                                      olink_urine$record_id)) ~ 
                              "Yes", T ~ "No"),
    scRNA = case_when(record_id %in% unique(sub("_BL|_12M", "", 
                                                so@meta.data[["michigan_id"]])) ~ 
                        "Yes", T ~ "No")
  ) %>%
  select(
    group, age, sex, race_ethnicity_condensed, diabetes_duration, hba1c, bmi, acr_u, sbp, dbp, map, eGFR_fas_cr,gfr_bsa_plasma,gfr_raw_plasma,elevated_albuminuria, htn,soma, olink_plasma, olink_urine, scRNA
  ) %>%
  tbl_summary(by = group,
              statistic = list(all_continuous() ~ "{mean} ({sd})",
                               acr_u ~ "{median}[{p25},{p75}]"),
              missing_text = "Missing")
```

# scRNA-seq

## MAC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MAC were: `r toString(analytes$TargetFullName[match(top_mac,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mac,analytes$AptName)])`, respectively).

### Differential expression in the highest expressing cell type

#### UACR

```{r results='asis', dpi=1200}
de(outcome = "elevated_uacr", ref_group = "UACR < 30", vars = top_mac)
```

## MIC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mic,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mic,analytes$AptName)])`, respectively).

### Differential expression in the highest expressing cell type

#### UACR

```{r results='asis', dpi=1200}
de(outcome = "elevated_uacr", ref_group = "UACR < 30", vars = top_mic)
```

## HYP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_hyp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_hyp,analytes$AptName)])`, respectively).

### Differential expression in the highest expressing cell type

#### eGFR

```{r results='asis', dpi=1200}
de(outcome = "hyp", ref_group = "eGFR < 135", vars = top_hyp)
```

## HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_htn,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn,analytes$AptName)])`, respectively).

### Differential expression in the highest expressing cell type

```{r results='asis', dpi=1200}
de(outcome = "htn", ref_group = "HTN-", vars = top_htn)
```

## HTN with SBP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension (with SBP) were: `r toString(analytes$TargetFullName[match(top_htn_sbp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn_sbp,analytes$AptName)])`, respectively).

### Differential expression in the highest expressing cell type

```{r results='asis', dpi=1200}
de(outcome = "htn", ref_group = "HTN-", vars = top_htn_sbp)
```
