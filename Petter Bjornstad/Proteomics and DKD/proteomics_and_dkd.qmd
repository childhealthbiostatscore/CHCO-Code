---
title: "Proteomics and DKD"
author: "Laura Pyle, Ye Ji Choi & Tim Vigers"
date: "today"
date-format: long
format: docx
editor: source
execute:
  echo: false
---

```{r libraries}
#| include: false
library(readxl)
library(tidyverse)
library(psych)
library(corrplot)
library(ggpmisc)
library(pander)
library(Seurat)
library(clusterProfiler)
library(ReactomePA)
library(enrichplot)
library(ggrepel)
library(patchwork)
library(gtsummary)
# Print all pander tables
panderOptions("knitr.auto.asis", FALSE)
```

```{r data cleaning}
#| include: false
# Import top proteins for MIC, MAC, etc. at baseline
top_mic_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "MIC CPH")
de_genes_mic <- top_mic_df[top_mic_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_mic <- setNames(de_genes_mic$estimate, de_genes_mic$EntrezGeneID)
top_mic <- top_mic_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_mac_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "MAC CPH")
de_genes_mac <- top_mac_df[top_mac_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_mac <- setNames(de_genes_mac$estimate, de_genes_mac$EntrezGeneID)
top_mac <- top_mac_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_hyp_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HYP CPH")
de_genes_hyp <- top_hyp_df[top_hyp_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_hyp <- setNames(de_genes_hyp$estimate, de_genes_hyp$EntrezGeneID)
top_hyp <- top_hyp_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_rapid_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "RAPID CPH")
de_genes_rapid <- top_rapid_df[top_rapid_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_rapid <- setNames(de_genes_rapid$estimate, de_genes_rapid$EntrezGeneID)
top_rapid <- top_rapid_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_htn_sbp_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HTN with SBP CPH")
de_genes_htn_sbp <- top_htn_sbp_df[top_htn_sbp_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_htn_sbp <- setNames(de_genes_htn_sbp$estimate, de_genes_htn_sbp$EntrezGeneID)
top_htn_sbp <- top_htn_sbp_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_htn_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "HTN CPH")
de_genes_htn <- top_htn_df[top_htn_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_htn <- setNames(de_genes_htn$estimate, de_genes_htn$EntrezGeneID)
top_htn <- top_htn_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_neuro_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "NEURO CPH")
de_genes_neuro <- top_neuro_df[top_neuro_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_neuro <- setNames(de_genes_neuro$estimate, de_genes_neuro$EntrezGeneID)
top_neuro <- top_neuro_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_retino_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "RETINO CPH")
de_genes_retino <- top_retino_df[top_retino_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_retino <- setNames(de_genes_retino$estimate, de_genes_retino$EntrezGeneID)
top_retino <- top_retino_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_glyc_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "GLYC CPH")
de_genes_glyc <- top_glyc_df[top_glyc_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_glyc <- setNames(de_genes_glyc$estimate, de_genes_glyc$EntrezGeneID)
top_glyc <- top_glyc_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
top_glyc_a1c_df <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx", sheet = "GLYC with A1c CPH")
de_genes_glyc_a1c <- top_glyc_a1c_df[top_glyc_a1c_df$p.value <= 0.05, c("EntrezGeneID", "estimate")]
de_genes_glyc_a1c <- setNames(de_genes_glyc_a1c$estimate, de_genes_glyc_a1c$EntrezGeneID)
top_glyc_a1c <- top_glyc_a1c_df %>%
  filter(adj.p.value <= 0.05) %>%
  slice_max(abs(log(estimate)), n = 5) %>%
  pull(AptName)
# Import 10 year results
top_mac_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "MAC_moderated_FDR")
de_genes_mac_10 <- top_mac_df_10[top_mac_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_mac_10 <- setNames(de_genes_mac_10$logFC, de_genes_mac_10$EntrezGeneID)
top_mic_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "MIC_moderated_FDR")
de_genes_mic_10 <- top_mic_df_10[top_mic_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_mic_10 <- setNames(de_genes_mic_10$logFC, de_genes_mic_10$EntrezGeneID)
top_hyp_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "hyperfilt_moderated_FDR")
de_genes_hyp_10 <- top_hyp_df_10[top_hyp_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_hyp_10 <- setNames(de_genes_hyp_10$logFC, de_genes_hyp_10$EntrezGeneID)
top_rapid_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "rapid_moderated_FDR")
de_genes_rapid_10 <- top_rapid_df_10[top_rapid_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_rapid_10 <- setNames(de_genes_rapid_10$logFC, de_genes_rapid_10$EntrezGeneID)
top_htn_sbp_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "htn_with_SBP_moderated_FDR")
de_genes_htn_sbp_10 <- top_htn_sbp_df_10[top_htn_sbp_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_htn_sbp_10 <- setNames(de_genes_htn_sbp_10$logFC, de_genes_htn_sbp_10$EntrezGeneID)
top_htn_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "htn_moderated_FDR")
de_genes_htn_10 <- top_htn_df_10[top_htn_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_htn_10 <- setNames(de_genes_htn_10$logFC, de_genes_htn_10$EntrezGeneID)
top_neuro_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "neuro_moderated_FDR")
de_genes_neuro_10 <- top_neuro_df_10[top_neuro_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_neuro_10 <- setNames(de_genes_neuro_10$logFC, de_genes_neuro_10$EntrezGeneID)
top_glyc_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "glyc_moderated_FDR")
de_genes_glyc_10 <- top_glyc_df_10[top_glyc_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_glyc_10 <- setNames(de_genes_glyc_10$logFC, de_genes_glyc_10$EntrezGeneID)
top_glyc_a1c_df_10 <- read_excel("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic limma yr10 adjusted.xlsx", sheet = "glyc_with_a1c_moderated_FDR")
de_genes_glyc_a1c_10 <- top_glyc_a1c_df_10[top_glyc_a1c_df_10$P.Value <= 0.05, c("EntrezGeneID", "logFC")]
de_genes_glyc_a1c_10 <- setNames(de_genes_glyc_a1c_10$logFC, de_genes_glyc_a1c_10$EntrezGeneID)
# Import and clean data
df <- read.csv("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Data Harmonization/Data Clean/harmonized_dataset.csv", na.strings = "")
df <- df %>%
  filter(
    study %in% c("CROCODILE", "IMPROVE", "RENAL-HEIR"),
    !grepl("IT2D", co_enroll_id), participation_status == "Participated"
  ) %>%
  select(
    record_id, co_enroll_id, visit, group, age, sex, race, ethnicity,
    diabetes_duration, albuminuria_cat,
    bmi, hba1c, gfr_bsa_plasma, gfr_raw_plasma, gfr_bsa_plasma_urine,
    gfr_raw_plasma_urine, acr_u, map
  ) %>%
  group_by(record_id, visit) %>%
  summarise(across(where(is.character), ~ last(na.omit(.x))),
    across(where(is.factor), ~ last(na.omit(.x))),
    across(where(is.numeric), ~ mean(.x, na.rm = T)),
    .groups = "drop"
  ) %>%
  mutate_all(~ ifelse(is.nan(.), NA, .))
# Import proteomics data for RH and IMPROVE
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Somalogic data/analytes.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Somalogic data/rh_soma.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/IMPROVE T2D/Somalogic data/improve_soma.Rdata")
# Format and combine
improve_soma <- improve_soma %>% select(SampleDescription, TimePoint, contains("seq."))
rh_soma <- rh_soma %>% select(SampleDescription, TimePoint, contains("seq."))
soma <- rbind(improve_soma, rh_soma)
# Transform
soma[, 3:ncol(soma)] <- lapply(soma[, 3:ncol(soma)], log)
# Merge clinical and SOMA data
soma <- soma %>%
  rename(record_id = "SampleDescription", visit = "TimePoint") %>%
  mutate(
    record_id = sub("IT2D-", "IT_", record_id),
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery"
    )
  )
df <- full_join(df, soma, by = c("record_id", "visit"))
# Import Olink data and combine
olink_map <- read.csv("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Olink Data/Data_Clean/olink_id_map.csv")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/IMPROVE T2D/Olink Data/improve_olink_plasma.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/IMPROVE T2D/Olink Data/improve_olink_urine.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Olink Data/rh_olink_plasma.Rdata")
load("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Olink Data/rh_olink_urine.Rdata")
olink_plasma <- rbind(improve_olink_plasma, rh_olink_plasma)
olink_urine <- rbind(improve_olink_urine, rh_olink_urine)
# Log transform
olink_plasma[, 3:ncol(olink_plasma)]
olink_urine[, 3:ncol(olink_urine)]
# Add visit column, format IDs
olink_plasma$visit <- sapply(str_split(olink_plasma$record_id, "_"), "[", 3)
olink_plasma <- olink_plasma %>%
  mutate(
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery",
      is.na(visit) ~ "baseline"
    ),
    record_id = sub("_BL|_3M|_12M", "", record_id)
  )
olink_urine$visit <- sapply(str_split(olink_urine$record_id, "_"), "[", 3)
olink_urine <- olink_urine %>%
  mutate(
    visit = case_when(
      visit == "BL" ~ "baseline",
      visit == "3M" ~ "3_months_post_surgery",
      visit == "12M" ~ "12_months_post_surgery",
      is.na(visit) ~ "baseline"
    ),
    record_id = sub("_BL|_3M|_12M", "", record_id)
  )
# Baseline visit only for IMPROVE
df <- df %>% filter(visit == "baseline")
# Combine
plasma <- left_join(df, olink_plasma, by = c("record_id", "visit"))
urine <- left_join(df, olink_urine, by = c("record_id", "visit"))
# Read in scRNA object
so <- readRDS("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/scRNA/Data_Raw/PB_68samples_harmonyIntegration_092322_Fadhl.RDS")
# Strip computations
so <- DietSeurat(so)
# Limit to RH/IMPROVE baseline visit
so <- so[, !grepl("_12M", so$michigan_id)]
# Remove HC with igA
so <- so[, so$T2D_HC_Phil %in% c("T2Di", "T2D", "HC")]
# Combined groups
so$diabetes <- sub("i", "", so$T2D_HC_Phil)
so$SGLT2i <- factor(so$T2D_HC_Phil,
  levels = c("HC", "T2D", "T2Di"),
  labels = c("No", "No", "Yes")
)
so$acr_u_cat <- cut_number(so$acr_u, n = 2, labels = c("Low UACR", "High UACR"))
# Normalize and scale
so <- NormalizeData(so)
so <- ScaleData(so, features = rownames(so))
# PCA
so <- RunPCA(so, features = VariableFeatures(object = so))
# Cluster cells
so <- FindNeighbors(so)
so <- FindClusters(so)
# Perform UMAP
so <- RunUMAP(so, dims = 1:20)
# General cell types as identifiers
so$generaltype <- sub("_.*", "", so$LR_clusters)
Idents(so) <- so$generaltype
```

```{r functions}
# Define correlation function
cor_and_plot_soma <- function(data = df, vars) {
  cat("\n")
  cat("### In all participants with SOMAScan")
  cat("\n")
  # Format matrix
  d <- data[
    data$group == "Type 2 Diabetes",
    c(vars, "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma")
  ]
  n <- c(
    analytes$Target[match(vars, analytes$AptName)],
    "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma"
  )
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  names(d) <- n
  # Correlations
  M <- corr.test(data.matrix(d), normal = F, method = "spearman")
  corrplot(round(M$r,3),
    p.mat = M$p, method = "circle", type = "lower", insig = "blank",
    addCoef.col = "white", diag = FALSE
  )
  # Print a nice looking table
  r <- data.frame(round(M$r,3))
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  pander(r, caption = "Coefficients")
  # Print p values
  p <- data.frame(M$p)
  p[] <- sapply(round(p,3), format.pval, eps = 0.001)
  pander(p, caption = "P values")
  # Same results but limit to those with Olink data
  cat("\n")
  cat("### In participants with both SOMAScan and Olink")
  cat("\n")
  # Format matrix
  d <- data[
    data$group == "Type 2 Diabetes" & data$record_id %in% olink_plasma$record_id,
    c(vars, "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma")
  ]
  n <- c(
    analytes$Target[match(vars, analytes$AptName)],
    "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma"
  )
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  names(d) <- n
  # Correlations
  M <- corr.test(data.matrix(d), normal = F, method = "spearman")
  corrplot(round(M$r,3),
    p.mat = M$p, method = "circle", type = "lower", insig = "blank",
    addCoef.col = "white", diag = FALSE
  )
  # Print a nice looking table
  r <- data.frame(round(M$r,3))
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  pander(r, caption = "Coefficients")
  # Print p values
  p <- data.frame(M$p)
  p[] <- sapply(round(p,3), format.pval, eps = 0.001)
  pander(p, caption = "P values")
}
# Function for converting SOMAScan to Olink
soma_to_olink <- function(soma_ids) {
  ids <- list()
  length(ids) <- length(soma_ids)
  ids <- lapply(soma_ids, function(n) {
    uni <- analytes$UniProt[analytes$AptName == n]
    olink <- olink_map$OlinkID[olink_map$Uniprot.ID == uni]
    return(as.character(na.omit(olink)))
  })
  names(ids) <- soma_ids
  ids <- ids[lapply(ids, length) > 0]
  return(ids)
}
# Plot agreement
soma_olink_plots <- function(top_olink, data) {
  # Linear model plots
  invisible(lapply(names(top_olink), function(n) {
    title <- analytes$TargetFullName[analytes$AptName == n]
    plots <- lapply(top_olink[n][[1]], function(o) {
      panel <- olink_map$Panel[olink_map$OlinkID == o]
      p <- ggplot(data[data$group == "Type 2 Diabetes", ], aes_string(x = n, y = o)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
            after_stat(rr.label),
            after_stat(p.value.label),
            sep = "*\", \"*"
          )),
          label.y = 0.2, label.x = 0.9
        ) +
        theme_bw() +
        ylab(paste0(o, " [", panel, "]")) +
        ggtitle(title)
      print(p)
    })
  }))
  # Correlations
  M <- corr.test(x= data.matrix(data[,names(top_olink)]),
                 y = data.matrix(data[,as.character(top_olink)]), 
                 normal = F, method = "spearman")
  # Print a nice looking table
  r <- data.frame(round(M$r,3))
  emphasize.strong.cells(which(M$p <= 0.05, arr.ind = TRUE))
  pander(r, caption = "Coefficients")
  # Print p values
  p <- data.frame(M$p)
  p[] <- sapply(round(p,3), format.pval, eps = 0.001)
  pander(p, caption = "P values")
  
}
# Correlate Olink with UACR
cor_and_plot_olink <- function(plasma_df = plasma, urine_df = urine, vars) {
  # Get Olink names
  vars <- as.character(vars)
  # Format matrices
  plasma_df <- plasma_df[
    plasma_df$group == "Type 2 Diabetes",
    c(vars, "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma")
  ]
  urine_df <- urine_df[
    urine_df$group == "Type 2 Diabetes",
    c(vars, "acr_u", "map", "gfr_raw_plasma", "gfr_bsa_plasma")
  ]
  # Gene names
  n <- c(olink_map$Assay[match(vars, olink_map$OlinkID)], "acr_u", "map", 
         "gfr_raw_plasma", "gfr_bsa_plasma")
  n[duplicated(n)] <- paste0(n[duplicated(n)], "(2)")
  names(plasma_df) <- n
  names(urine_df) <- n
  # Plasma correlations
  M_plasma <- corr.test(data.matrix(plasma_df), normal = F, method = "spearman")
  corrplot(M_plasma$r,
    p.mat = M_plasma$p, method = "circle", type = "lower",
    insig = "blank", addCoef.col = "white", diag = FALSE, title = "Plasma"
  )
  # Print nice looking table
  r <- data.frame(M_plasma$r)
  emphasize.strong.cells(which(M_plasma$p <= 0.05, arr.ind = TRUE))
  print(pander(r, caption = "Plasma coefficients"))
  # Print p values
  p <- data.frame(M_plasma$p)
  p[] <- sapply(round(p,3), format.pval, eps = 0.001)
  print(pander(p, caption = "Plasma p values"))
  # Urine correlations
  M_urine <- corr.test(data.matrix(urine_df), normal = F, method = "spearman")
  corrplot(M_urine$r,
    p.mat = M_urine$p, method = "circle", type = "lower",
    insig = "blank", addCoef.col = "white", diag = FALSE, title = "Urine"
  )
  # Print nice looking table
  r <- data.frame(M_urine$r)
  emphasize.strong.cells(which(M_urine$p <= 0.05, arr.ind = TRUE))
  print(pander(r, caption = "Urine coefficients"))
  # Print p values
  p <- data.frame(M_urine$p)
  p[] <- sapply(round(p,3), format.pval, eps = 0.001)
  print(pander(p, caption = "Urine p values"))
}
# UMAP function
umap_plot <- function(seurat_object = so, vars) {
  # Get Entrez Gene IDs
  entrez <- analytes$EntrezGeneSymbol[match(vars, analytes$AptName)]
  entrez <- entrez[entrez %in% rownames(so)]
  # Plot each gene
  invisible(lapply(entrez, function(e) {
    p <- FeaturePlot(seurat_object, features = e)
    p <- LabelClusters(plot = p, id = "ident")
    print(p)
  }))
}
# DE function
de <- function(seurat_object = so, outcome, ref_group, vars) {
  # Get Entrez Gene IDs
  entrez <- analytes$EntrezGeneSymbol[match(vars, analytes$AptName)]
  entrez <- entrez[entrez %in% rownames(seurat_object)]
  entrez <- unique(entrez)
  # Find cells where most highly expressed
  cells <- FetchData(seurat_object, vars = entrez)
  cells$type <- seurat_object$generaltype
  cells <- cells %>%
    group_by(type) %>%
    summarise(across(where(is.numeric), ~ mean(.x > 0, na.rm = TRUE))) %>%
    column_to_rownames("type")
  max <- lapply(cells, function(c) {
    rownames(cells)[which.max(c)]
  })
  # DE testing
  de_tables <- lapply(names(max), function(n) {
    m <- FindMarkers(seurat_object,
      features = n, ident.1 = ref_group,
      group.by = outcome, subset.ident = max[[n]],
      min.pct = 0, logfc.threshold = 0, verbose = F
    )
    m <- data.frame(m)
    m$celltype <- max[[n]]
    return(m)
  })
  # Combine rows and print
  de_table <- data.frame(do.call(rbind, de_tables))
  de_table <- de_table[order(de_table$p_val), ]
  # Plots
  invisible(lapply(names(max), function(n) {
    p <- VlnPlot(seurat_object,
      features = n, group.by = outcome,
      idents = max[[n]], pt.size = 0.01, log = F
    )
    print(p)
  }))
  pander(de_table)
}
# scRNA correlation with proteomics
scRNA_corr <- function(seurat_object = so, vars) {
  # Get Entrez Gene IDs
  entrez <-
    as.list(analytes$EntrezGeneSymbol[match(vars, analytes$AptName)])
  names(entrez) <- vars
  entrez <- entrez[entrez %in% rownames(seurat_object)]
  entrez <- entrez[!duplicated(entrez)]
  olink <- soma_to_olink(vars)
  # Find cells where most highly expressed
  cells <- FetchData(seurat_object, vars = as.character(entrez))
  cells$type <- seurat_object$generaltype
  cells <- cells %>%
    group_by(type) %>%
    summarise(across(
      where(is.numeric),
      ~ mean(.x > 0, na.rm = TRUE)
    )) %>%
    column_to_rownames("type")
  max <- lapply(cells, function(c) {
    rownames(cells)[which.max(c)]
  })
  # Plot correlations
  invisible(lapply(names(max), function(n) {
    # Expression by cell type and ID
    avg_exp <- subset(seurat_object, idents = max[[n]])
    avg_exp <- AverageExpression(avg_exp, group.by = "michigan_id")
    avg_exp <- as.data.frame(avg_exp$RNA)
    avg_exp <- as.data.frame(t(avg_exp[rownames(avg_exp) == n, ]))
    avg_exp$record_id <- sub("_BL", "", rownames(avg_exp))
    # Get IDs
    prot_soma <- names(entrez[which(entrez == n)])
    prot_olink <- olink[[prot_soma]]
    # Plot linear model
    t <- left_join(df[, c("record_id", prot_soma)], avg_exp,
      by = join_by(record_id)
    )
    p_soma <- ggplot(t, aes_string(x = n, y = prot_soma)) +
      geom_point(alpha = 0.5) +
      stat_poly_line(se = F) +
      stat_poly_eq(
        aes(label = paste(after_stat(eq.label),
          after_stat(rr.label),
          after_stat(p.value.label),
          sep = "*\", \"*"
        ))
      ) +
      xlab(paste0("Mean ", n, " expression in ", max[[n]])) +
      theme_bw()
    cat("\n")
    cat("### SOMAScan")
    cat("\n")
    print(p_soma)
    if (!is.null(prot_olink)) {
      # Plasma
      t <- left_join(plasma[, c("record_id", prot_olink)], avg_exp,
        by = join_by(record_id)
      )
      p_plasma <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
            after_stat(rr.label),
            after_stat(p.value.label),
            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]])) +
        theme_bw()
      cat("\n")
      cat("### Plasma Olink")
      cat("\n")
      print(p_plasma)
      # Urine
      t <- left_join(urine[, c("record_id", prot_olink)], avg_exp,
        by = join_by(record_id)
      )
      p_urine <- ggplot(t, aes_string(x = n, y = prot_olink)) +
        geom_point(alpha = 0.5) +
        stat_poly_line(se = F) +
        stat_poly_eq(
          aes(label = paste(after_stat(eq.label),
            after_stat(rr.label),
            after_stat(p.value.label),
            sep = "*\", \"*"
          ))
        ) +
        xlab(paste0("Mean ", n, " expression in ", max[[n]])) +
        theme_bw()
      cat("\n")
      cat("### Urine Olink")
      cat("\n")
      print(p_urine)
    }
  }))
}
# Volcano plot
volcano <- function(data, lab = "Target", xcol = "estimate", ycol = "p.value", top = 3,
                    xlimit = c(-1, 1), ylimit = c(0, -log10(10e-7)),
                    xlabel = "HR", pCutoff = 0.05, overlaps = 10,
                    log_t = T) {
  data <- as.data.frame(data)
  t <- data[data[, "adj.p.value"] <= pCutoff, ]
  if (log_t) {
    t <- t[order(abs(log(t[, xcol])), decreasing = T), ]
  } else {
    t <- t[order(abs(t[, xcol]), decreasing = T), ]
  }
  data$top <- data[, "AptName"] %in% t[1:top, "AptName"]
  data$logp <- -log10(data[, ycol])
  data$fc <- data[, xcol]
  data$sig <- data[, ycol] <= pCutoff
  p <- ggplot(data = data, aes(x = fc, y = logp, color = sig)) +
    geom_hline(yintercept = -log10(pCutoff), linetype = "dashed") +
    geom_point(size = 2) +
    geom_label_repel(
      data = data[data$top, ], aes(label = Target), color = "black",
      max.overlaps = overlaps
    ) +
    scale_color_manual(values = c("grey", "#3e6dbf")) +
    xlab(xlabel) +
    ylab(bquote(~ -Log[10] ~ italic(P))) +
    theme_bw() +
    theme(legend.position = "none")
  return(p)
}
# GSEA
pathway_analysis <- function(de_genes, log_t = T) {
  # log transform if necessary
  if (log_t) {
    de_genes <- log(de_genes)
  }
  # Sort
  de_genes <- sort(de_genes, decreasing = T)
  # Remove duplicates and fix names
  de_genes <- de_genes[!is.na(names(de_genes))]
  names(de_genes) <- sub("\\|.*", "", names(de_genes))
  de_genes <- de_genes[which(!duplicated(names(de_genes)))]
  # GSEA with KEGG
  gsea <- gsePathway(geneList = de_genes, pvalueCutoff = 0.1)
  dot <- dotplot(gsea)
  ridge <- ridgeplot(gsea)
  upset <- upsetplot(gsea)
  sig <- which(gsea@result$p.adjust <= 0.05)
  if (length(sig) > 0) {
    gseap <- gseaplot2(gsea,
      geneSetID = sig,
      pvalue_table = TRUE, ES_geom = "dot"
    )
  } else {
    gseap <- NULL
  }
  # Convert to gene symbols
  gseax <- setReadable(gsea, "org.Hs.eg.db", "ENTREZID")
  # More plots!
  cnet <- cnetplot(gseax,
    foldChange = de_genes, colorEdge = T,
    node_label = "category"
  )
  # Return those beautiful plots
  return(list(
    "ridge" = ridge, "gseap" = gseap, "dot" = dot,
    "cnet" = cnet, "upset" = upset
  ))
}
# Function for comparing two gene lists
# de_gene_list is a named list of multiple gene sets
pathway_comparison <- function(de_gene_list) {
  # Format names - just enrichment for now
  de_gene_list <- lapply(de_gene_list, function(l) {
    n <- names(l)
    n <- sub("\\|.*", "", n)
    n <- n[!is.na(n)]
    dups <- n[duplicated(n)]
    n <- n[!n %in% dups]
    return(n)
  })
  # Compare with GO enrichment
  ck <- compareCluster(geneClusters = de_gene_list, fun = "enrichPathway", readable = T)
  # Plots
  dot <- dotplot(ck)
  net <- cnetplot(ck)
  # Return
  return(list("dot" = dot, "net" = net))
}
```

# Participant characteristics

```{r message = FALSE}
ids <- unique(sub("_BL|_12M", "", c(
  olink_plasma$record_id, olink_urine$record_id,
  soma$record_id, so@meta.data[["michigan_id"]]
)))
df %>%
  filter(record_id %in% ids) %>%
  mutate(
    race_ethnicity_condensed = case_when(
      race == "White" & startsWith(ethnicity, "Not") ~ "Non-Hispanic White",
      race == "Black or African American" & startsWith(ethnicity, "Not") ~ "Non-Hispanic Black",
      ethnicity == "Hispanic or Latino" ~ "Hispanic",
      T ~ "Other"
    ),
    soma = case_when(record_id %in% unique(sub("_BL|_12M", "", soma$record_id)) ~ "Yes", T ~ "No"),
    olink_plasma = case_when(record_id %in% unique(sub("_BL|_12M", "", olink_plasma$record_id)) ~ "Yes", T ~ "No"),
    olink_urine = case_when(record_id %in% unique(sub("_BL|_12M", "", olink_urine$record_id)) ~ "Yes", T ~ "No"),
    ssRNA = case_when(record_id %in% unique(sub("_BL|_12M", "", so@meta.data[["michigan_id"]])) ~ "Yes", T ~ "No")
  ) %>%
  select(
    group, age, sex, race_ethnicity_condensed, diabetes_duration, hba1c, bmi, acr_u, albuminuria_cat,
    soma, olink_plasma, olink_urine, ssRNA
  ) %>%
  tbl_summary(by = group) %>%
  add_p(list(all_continuous() ~ "aov")) %>%
  add_overall()
```

# SOMAScan correlation matrix (with UACR)

## MAC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MAC were: `r toString(analytes$TargetFullName[match(top_mac,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mac,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_soma(vars = top_mac)
```

## MIC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mic,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mic,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_soma(vars = top_mic)
```

## HYP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_hyp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_hyp,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_soma(vars = top_hyp)
```

## RAPID

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for rapid eGFR decline were: `r toString(analytes$TargetFullName[match(top_rapid,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_rapid,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_soma(vars = top_rapid)
```

## HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_htn,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_soma(vars = top_htn)
```

## HTN with SBP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension (with SBP) were: `r toString(analytes$TargetFullName[match(top_htn_sbp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn_sbp,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_soma(vars = top_htn_sbp)
```

# Olink associations with SOMAScan

## MAC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MAC were: `r toString(analytes$TargetFullName[match(top_mac,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mac,analytes$AptName)])`, respectively).

### Plasma

```{r warning=FALSE,results='asis'}
top_mac_olink <- soma_to_olink(top_mac)
soma_olink_plots(top_olink = top_mac_olink, data = plasma)
```

### Urine

```{r warning=FALSE,results='asis'}
soma_olink_plots(top_olink = top_mac_olink, data = urine)
```

## MIC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mic,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mic,analytes$AptName)])`, respectively).

### Plasma

```{r warning=FALSE,results='asis'}
top_mic_olink <- soma_to_olink(top_mic)
soma_olink_plots(top_olink = top_mic_olink, data = plasma)
```

### Urine

```{r warning=FALSE,results='asis'}
soma_olink_plots(top_olink = top_mic_olink, data = urine)
```

## HYP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_hyp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_hyp,analytes$AptName)])`, respectively).

### Plasma

```{r warning=FALSE,results='asis'}
top_hyp_olink <- soma_to_olink(top_hyp)
soma_olink_plots(top_olink = top_hyp_olink, data = plasma)
```

### Urine

```{r warning=FALSE,results='asis'}
soma_olink_plots(top_olink = top_hyp_olink, data = urine)
```

## RAPID

Top proteins from SOMAScan were not available in Olink.

## HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension (with SBP) were: `r toString(analytes$TargetFullName[match(top_htn_sbp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn_sbp,analytes$AptName)])`, respectively).

### Plasma

```{r warning=FALSE,results='asis'}
top_htn_olink <- soma_to_olink(top_htn)
soma_olink_plots(top_olink = top_htn_olink, data = plasma)
```

### Urine

```{r warning=FALSE,results='asis'}
soma_olink_plots(top_olink = top_htn_olink, data = urine)
```

## HTN with SBP

Top proteins from SOMAScan were not available in Olink.

# Olink associations with UACR

## MAC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MAC were: `r toString(analytes$TargetFullName[match(top_mac,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mac,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_olink(vars = top_mac_olink)
```

## MIC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mic,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mic,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_olink(vars = top_mic_olink)
```

## HYP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_hyp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_hyp,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_olink(vars = top_hyp_olink)
```

## HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension (with SBP) were: `r toString(analytes$TargetFullName[match(top_htn_sbp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn_sbp,analytes$AptName)])`, respectively).

```{r results='asis'}
cor_and_plot_olink(vars = top_htn_olink)
```

## HTN with SBP

Top proteins from SOMAScan were not available in Olink.

# scRNA-seq

## MAC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MAC were: `r toString(analytes$TargetFullName[match(top_mac,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mac,analytes$AptName)])`, respectively).

### Overall expression

```{r message=FALSE,warning=FALSE}
umap_plot(so, top_mac)
```

### Differential expression in the highest expressing cell type

#### Diabetes status

```{r results='asis'}
de(outcome = "diabetes", ref_group = "HC", vars = top_mac)
```

#### SGLT2i status

```{r results='asis'}
de(outcome = "SGLT2i", ref_group = "No", vars = top_mac)
```

#### UACR

There are only 3 participants with UACR >= 30, so participants were divided into two groups: below ("Low") and above ("High") the median. Median UACR was 6.21.

```{r results='asis'}
de(outcome = "acr_u_cat", ref_group = "Low UACR", vars = top_mac)
```

## MIC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mic,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mic,analytes$AptName)])`, respectively).

### Overall expression

```{r message=FALSE,warning=FALSE}
umap_plot(so, top_mic)
```

### Differential expression in the highest expressing cell type

#### Diabetes status

```{r results='asis'}
de(outcome = "diabetes", ref_group = "HC", vars = top_mic)
```

#### SGLT2i status

```{r results='asis'}
de(outcome = "SGLT2i", ref_group = "No", vars = top_mic)
```

#### UACR

There are only 3 participants with UACR >= 30, so participants were divided into two groups: below ("Low") and above ("High") the median. Median UACR was 6.21.

```{r results='asis'}
de(outcome = "acr_u_cat", ref_group = "Low UACR", vars = top_mic)
```

## HYP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_hyp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_hyp,analytes$AptName)])`, respectively).

### Overall expression

```{r message=FALSE,warning=FALSE}
umap_plot(so, top_hyp)
```

### Differential expression in the highest expressing cell type

#### Diabetes status

```{r results='asis'}
de(outcome = "diabetes", ref_group = "HC", vars = top_hyp)
```

#### SGLT2i status

```{r results='asis'}
de(outcome = "SGLT2i", ref_group = "No", vars = top_hyp)
```

#### UACR

There are only 3 participants with UACR >= 30, so participants were divided into two groups: below ("Low") and above ("High") the median. Median UACR was 6.21.

```{r results='asis'}
de(outcome = "acr_u_cat", ref_group = "Low UACR", vars = top_hyp)
```

## RAPID

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for rapid eGFR decline were: `r toString(analytes$TargetFullName[match(top_rapid,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_rapid,analytes$AptName)])`, respectively).

### Overall expression

```{r message=FALSE,warning=FALSE}
umap_plot(so, top_rapid)
```

### Differential expression in the highest expressing cell type

#### Diabetes status

```{r results='asis'}
de(outcome = "diabetes", ref_group = "HC", vars = top_rapid)
```

#### SGLT2i status

```{r results='asis'}
de(outcome = "SGLT2i", ref_group = "No", vars = top_rapid)
```

#### UACR

There are only 3 participants with UACR >= 30, so participants were divided into two groups: below ("Low") and above ("High") the median. Median UACR was 6.21.

```{r results='asis'}
de(outcome = "acr_u_cat", ref_group = "Low UACR", vars = top_rapid)
```

## HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_htn,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn,analytes$AptName)])`, respectively).

### Overall expression

```{r message=FALSE,warning=FALSE}
umap_plot(so, top_htn)
```

### Differential expression in the highest expressing cell type

#### Diabetes status

```{r results='asis'}
de(outcome = "diabetes", ref_group = "HC", vars = top_htn)
```

#### SGLT2i status

```{r results='asis'}
de(outcome = "SGLT2i", ref_group = "No", vars = top_htn)
```

#### UACR

There are only 3 participants with UACR >= 30, so participants were divided into two groups: below ("Low") and above ("High") the median. Median UACR was 6.21.

```{r results='asis'}
de(outcome = "acr_u_cat", ref_group = "Low UACR", vars = top_htn)
```

## HTN with SBP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension (with SBP) were: `r toString(analytes$TargetFullName[match(top_htn_sbp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn_sbp,analytes$AptName)])`, respectively).

### Overall expression

```{r message=FALSE,warning=FALSE}
umap_plot(so, top_htn_sbp)
```

### Differential expression in the highest expressing cell type

#### Diabetes status

```{r results='asis'}
de(outcome = "diabetes", ref_group = "HC", vars = top_htn_sbp)
```

#### SGLT2i status

```{r results='asis'}
de(outcome = "SGLT2i", ref_group = "No", vars = top_htn_sbp)
```

#### UACR

There are only 3 participants with UACR >= 30, so participants were divided into two groups: below ("Low") and above ("High") the median. Median UACR was 6.21.

```{r results='asis'}
de(outcome = "acr_u_cat", ref_group = "Low UACR", vars = top_htn_sbp)
```

# TODAY pathway analysis

## MAC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MAC were: `r toString(analytes$TargetFullName[match(top_mac,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mac,analytes$AptName)])`, respectively).

```{r warning=FALSE}
v_mac <- volcano(top_mac_df)
v_mac <- v_mac +
  ggtitle("Severe Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))
v_mac
```

```{r}
mac_p <- pathway_analysis(de_genes_mac)
mac_p$ridge
mac_p$gseap
mac_p$dot
mac_p$cnet
mac_p$upset

mac_p_comp <- pathway_comparison(list(
  Baseline = de_genes_mac,
  Followup = de_genes_mac_10
))
mac_p_comp$dot
mac_p_comp$net
```

## MIC

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for MIC were: `r toString(analytes$TargetFullName[match(top_mic,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_mic,analytes$AptName)])`, respectively).

```{r warning=FALSE}
v_mic <- volcano(top_mic_df)
v_mic <- v_mic +
  ggtitle("Moderate Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))
v_mic
```

```{r}
mic_p <- pathway_analysis(de_genes_mic)
mic_p$ridge
mic_p$gseap
mic_p$dot
mic_p$cnet
mic_p$upset

mic_p_comp <- pathway_comparison(list(
  Baseline = de_genes_mic,
  Followup = de_genes_mic_10
))
mic_p_comp$dot
mic_p_comp$net
```

## HYP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_hyp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_hyp,analytes$AptName)])`, respectively).

```{r warning=FALSE}
v_hyp <- volcano(top_hyp_df)
v_hyp <- v_hyp +
  ggtitle("Hyperfiltration") +
  theme(plot.title = element_text(hjust = 0.5))
v_hyp
```

```{r}
hyp_p <- pathway_analysis(de_genes_hyp)
hyp_p$ridge
hyp_p$gseap
hyp_p$dot
hyp_p$cnet
hyp_p$upset

hyp_p_comp <- pathway_comparison(list(
  Baseline = de_genes_hyp,
  Followup = de_genes_hyp_10
))
hyp_p_comp$dot
hyp_p_comp$net
```

## RAPID

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for rapid eGFR decline were: `r toString(analytes$TargetFullName[match(top_rapid,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_rapid,analytes$AptName)])`, respectively).

```{r warning=FALSE}
v_rapid <- volcano(top_rapid_df)
v_rapid <- v_rapid +
  ggtitle("Rapid eGFR Decline") +
  theme(plot.title = element_text(hjust = 0.5))
v_rapid
```

```{r}
rapid_p <- pathway_analysis(de_genes_rapid)
rapid_p$ridge
rapid_p$gseap
rapid_p$dot
rapid_p$cnet
rapid_p$upset

rapid_p_comp <- pathway_comparison(list(
  Baseline = de_genes_rapid,
  Followup = de_genes_rapid_10
))
rapid_p_comp$dot
rapid_p_comp$net
```

## HTN

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension were: `r toString(analytes$TargetFullName[match(top_htn,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn,analytes$AptName)])`, respectively).

```{r warning=FALSE}
v_htn <- volcano(top_htn_df)
v_htn <- v_htn +
  ggtitle("Hypertension") +
  theme(plot.title = element_text(hjust = 0.5))
v_htn
```

```{r}
htn_p <- pathway_analysis(de_genes_htn)
htn_p$ridge
htn_p$gseap
htn_p$dot
htn_p$cnet
htn_p$upset

htn_p_comp <- pathway_comparison(list(
  Baseline = de_genes_htn,
  Followup = de_genes_htn_10
))
htn_p_comp$dot
htn_p_comp$net
```

## HTN with SBP

The proteins with the largest absolute effect size and adjusted p value $\leq 0.05$ for hypertension (with SBP) were: `r toString(analytes$TargetFullName[match(top_htn_sbp,analytes$AptName)])` (associated with genes `r toString(analytes$Target[match(top_htn_sbp,analytes$AptName)])`, respectively).

```{r warning=FALSE}
v_htn_sbp <- volcano(top_htn_sbp_df)
v_htn_sbp <- v_htn_sbp +
  ggtitle("Hypertension (with SBP)") +
  theme(plot.title = element_text(hjust = 0.5))
v_htn_sbp
```

```{r}
htn_sbp_p <- pathway_analysis(de_genes_htn_sbp)
htn_sbp_p$ridge
htn_sbp_p$gseap
htn_sbp_p$dot
htn_sbp_p$cnet
htn_sbp_p$upset

htn_sbp_p_comp <- pathway_comparison(list(
  Baseline = de_genes_htn_sbp,
  Followup = de_genes_htn_sbp_10
))
htn_sbp_p_comp$dot
htn_sbp_p_comp$net
```

# scRNA-seq correlations with circulating proteins

## MAC

```{r warning=FALSE}
scRNA_corr(vars = top_mac)
```

## MIC

```{r warning=FALSE}
scRNA_corr(vars = top_mic)
```

## HYP

```{r warning=FALSE}
scRNA_corr(vars = top_hyp)
```

## RAPID

```{r warning=FALSE}
scRNA_corr(vars = top_rapid)
```

## HTN

```{r warning=FALSE}
scRNA_corr(vars = top_htn)
```

## HTN with SBP

```{r warning=FALSE}
scRNA_corr(vars = top_htn_sbp)
```

# Save figures for manuscript

## Figure 1

```{r}
fig1 <- (v_mic + v_mac + v_rapid) / (v_hyp + v_htn + plot_spacer())
ggsave("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Proteomics and DKD/Figures/Figure_1_1600x900.jpeg",
  units = "px",
  width = 1600, height = 900, scale = 2, plot = fig1, device = "jpeg"
)
```

## Figure 2

```{r}
p_mic <- mic_p$dot +
  ggtitle("Moderate Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))

p_mac <- mac_p$dot +
  ggtitle("Severe Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))

p_rapid <- rapid_p$dot +
  ggtitle("Rapid eGFR Decline") +
  theme(plot.title = element_text(hjust = 0.5))

p_hyp <- hyp_p$dot +
  ggtitle("Hyperfiltration") +
  theme(plot.title = element_text(hjust = 0.5))

p_htn <- htn_p$dot +
  ggtitle("Hypertension") +
  theme(plot.title = element_text(hjust = 0.5))

fig2 <- (p_mic + p_mac + p_rapid) / (p_hyp + p_htn + plot_spacer())
fig2 <- fig2 + plot_layout(guides = "collect") &
  theme(legend.position = "none")
ggsave("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Proteomics and DKD/Figures/Figure_2_1600x900.jpeg",
  units = "px",
  width = 1600, height = 900, scale = 3, plot = fig2, device = "jpeg"
)
```

## Figure 3

```{r}
p_mic <- mic_p_comp$dot +
  ggtitle("Moderate Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))

p_mac <- mac_p_comp$dot +
  ggtitle("Severe Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))

p_rapid <- rapid_p_comp$dot +
  ggtitle("Rapid eGFR Decline") +
  theme(plot.title = element_text(hjust = 0.5))

p_hyp <- hyp_p_comp$dot +
  ggtitle("Hyperfiltration") +
  theme(plot.title = element_text(hjust = 0.5))

p_htn <- htn_p_comp$dot +
  ggtitle("Hypertension") +
  theme(plot.title = element_text(hjust = 0.5))

fig3 <- (p_mic + p_mac + p_rapid) / (p_hyp + p_htn + plot_spacer())
fig3 <- fig3 + plot_layout(guides = "collect") & theme(legend.position = "none")
ggsave("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Proteomics and DKD/Figures/Figure_3_1600x900.jpeg",
  units = "px",
  width = 1600, height = 900, scale = 5, plot = fig3, device = "jpeg"
)
```

## Supplemental Figure 1

Figure 3 as a network plot

```{r}
p_mic <- mic_p_comp$net +
  ggtitle("Moderate Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))

p_mac <- mac_p_comp$net +
  ggtitle("Severe Albuminuria") +
  theme(plot.title = element_text(hjust = 0.5))

p_rapid <- rapid_p_comp$net +
  ggtitle("Rapid eGFR Decline") +
  theme(plot.title = element_text(hjust = 0.5))

p_hyp <- hyp_p_comp$net +
  ggtitle("Hyperfiltration") +
  theme(plot.title = element_text(hjust = 0.5))

p_htn <- htn_p_comp$net +
  ggtitle("Hypertension") +
  theme(plot.title = element_text(hjust = 0.5))

figs1 <- (p_mic + p_mac + p_rapid) / (p_hyp + p_htn + plot_spacer())
figs1 <- figs1 + plot_layout(guides = "collect") & theme(legend.position = "none")
ggsave("/home/tim/UCD/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Proteomics and DKD/Figures/Figure_S1_1600x900.jpeg",
  units = "px",
  width = 1600, height = 900, scale = 5, plot = figs1, device = "jpeg"
)
```
