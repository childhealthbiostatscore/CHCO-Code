---
title: "Proteomics and DKD"
author: "Laura Pyle & Tim Vigers"
date: "`r format(Sys.time(), '%d %B %Y')`"
format:
  html:
    toc: true
    toc-depth: 5
    toc-float: true
    self-contained: true
    fig-cap-location: top
    page-layout: full
editor: source
---

```{r}
#| include: false
library(readxl)
library(tidyverse)
```

# 5.	RH/IT2D â€“ Table 2 

Validate top ~3-5 proteins identified in TODAY in RH/IT2D, by correlating the same proteins in RH/IT2D (SOMAScan) with UACR cross-sectionally (e.g., NELL-1 and UACR) and glomerular volume and mesangial expansion (if power permits) [e.g., NELL-1 and glomerular volume)

```{r}
# Import proteomic data
load("/Volumes/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Somalogic data/analytes.Rdata")
load("/Volumes/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/Renal HERITAGE/Somalogic data/rh_soma.Rdata")
load("/Volumes/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/IMPROVE T2D/Somalogic data/improve_soma.Rdata")
# Format
soma
improve_soma = improve_soma %>% select(SampleDescription,TimePoint,contains("seq."))
```

## Microalbuminuria

```{r}
df = read_excel("/Volumes/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/TODAY subaward/Results/Linear and Cox models/TODAY somalogic Cox models scaled baseline adjusted.xlsx",sheet = "MIC CPH")
top = df %>% slice_min(p.value,n=5)
top_effect = df %>% filter(adj.p.value <= 0.05) %>% slice_max(abs(estimate),n=5)
```

# scRNA

```{python}
# Read AnnData object
import scanpy as sc
adata = sc.read_h5ad("/Volumes/PEDS/RI Biostatistics Core/Shared/Shared Projects/Laura/Peds Endo/Petter Bjornstad/scRNA/Data_Raw/CU_Anschutz_scRNAseq_data/PB_40datasets_soupxcleaned070821_RPC2_Sean_selected.h5ad")
```

Analysis based on tutorials at https://scverse.org/learn/

## PCA

```{python}
sc.tl.pca(adata)
sc.pl.pca(adata, color='CST3')
sc.pl.pca_variance_ratio(adata)
```

## UMAP

```{python}
# Compute the neighborhood graph
sc.pp.neighbors(adata)
# Cluster it
sc.tl.leiden(adata)
# UMAP
sc.tl.umap(adata)
sc.pl.umap(adata,color=["celltype","CST3"])
```

## Finding marker genes

Compute a ranking for the highly differential genes in each cluster (per the Leiden graph-clustering method) based on a t-test. Print the top 20 for each comparison:

```{python}
sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')
sc.pl.rank_genes_groups(adata, n_genes=20, sharey=False)
```

Same again, but for SGLT2i status:

```{python}
sc.tl.rank_genes_groups(adata, 'SGLT2i', method='t-test')
sc.pl.rank_genes_groups(adata, n_genes=20, sharey=False)
```

# Multimodal analysis

